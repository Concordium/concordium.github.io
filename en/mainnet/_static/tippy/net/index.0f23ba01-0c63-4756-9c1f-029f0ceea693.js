selector_to_html = {"a[href=\"../smart-contracts-v0/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"references/query-node.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Querying a node<a class=\"headerlink\" href=\"#querying-a-node\" title=\"Permalink to this headline\">#</a></h1><p>The <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a> tool supports queries of multiple kinds of state against\na backend node:</p>", "a[href=\"desktop-wallet/accounts-desktop.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Desktop Wallet navigation and settings<a class=\"headerlink\" href=\"#desktop-wallet-navigation-and-settings\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes the information and the tasks that are available in the Desktop Wallet. To learn more about creating accounts, see <a class=\"reference internal\" href=\"guides/create-account.html#create-account\"><span class=\"std std-ref\">Create an account in the Desktop Wallet</span></a>.</p><p>To view information about an account, go to <strong>Accounts</strong> and select the relevant account. At the top of the window you see the following:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/frontend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a front end<a class=\"headerlink\" href=\"#setting-up-a-front-end\" title=\"Permalink to this headline\">#</a></h1><p>As an alternative to interacting with smart contracts directly,\nusers might have a better experience using a web-based application.</p><p>For the Piggybank example, such an application is available in <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-piggybank/\">this repository</a>.\nThe application is able to perform contract updates on behalf of the user,\neither using the Concordium Wallet for Web or Concordium Wallet for Mobile via\n<a class=\"reference external\" href=\"https://docs.walletconnect.com/2.0/\">Wallet Connect (v2)</a>.</p>", "a[href=\"../smart-contracts-v0/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to inspect a smart contract instance.\nInspecting an instance will show you its name, owner, module reference, balance,\nstate and receive-functions:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the piggy bank smart contract<a class=\"headerlink\" href=\"#writing-the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment. In this part you will focus on how to write a smart contract in the\n<a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer semi-fungible token<a class=\"headerlink\" href=\"#mint-and-transfer-semi-fungible-token\" title=\"Permalink to this headline\">#</a></h1><p>You have a contract instance which means you have an empty state and are ready to mint some tokens! You will be using <a class=\"reference external\" href=\"https://gateway.pinata.cloud/ipfs/QmZ3939dLLFzvYZjFnkdqACe2n9TQA8Rx4efbjaYTXteeu\">this metadata</a> and minting 100 of <a class=\"reference external\" href=\"https://ipfs.io/ipfs/QmNqv1QnZw6j6N3ueqCA6VotciHUopRAvZqY8JBnheoLk6\">this cool image</a>.</p><p>Create a folder called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-artifacts</span></code> and create a JSON file called <code class=\"docutils literal notranslate\"><span class=\"pre\">mint-params.json</span></code> in the folder to execute these steps properly. In the JSON file, you are going to give the minting parameters to the MintParams which you worked on a little in the beginning.</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke a smart contract instance<a class=\"headerlink\" href=\"#invoke-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to invoke a smart contract instance, which\nmeans triggering a receive function and viewing its return value. Invoking an\ninstance is <em>not a transaction</em> and it <em>does not change the state of a contract</em>.\nInvoking can be useful to either view information about the instance or to test\na receive method before running an update. Because invoking is not a transaction, there is no fee to run <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.\nThe view functions are regular receive functions that return information about\nthe contract, ideally with schemas on the return values.</p><p>There is no limit to the number of logs per invocation (apart from energy).</p>", "a[href=\"references/manage-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Accounts<a class=\"headerlink\" href=\"#accounts\" title=\"Permalink to this headline\">#</a></h1><p>Accounts and <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> are strongly linked on the Concordium Platform. To be able to hold, send, or receive <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a> or become a <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker\"><span class=\"xref std std-term\">baker</span></a> on the Concordium blockchain, you need an account and an identity. This is regardless of whether you are using the Concordium Wallet for Mobile, the Concordium Legacy Wallet, Desktop Wallet, or Concordium Client for your transactions.</p><p>You must have a verified identity and a user identity certificate issued by an authorized <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> to create accounts on the Concordium Platform. For more information about identities, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities</span></a>.</p>", "a[href=\"installation/downloads.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads<a class=\"headerlink\" href=\"#downloads\" title=\"Permalink to this headline\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Mainnet.</p>", "a[href=\"web3-id/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identity on Concordium<a class=\"headerlink\" href=\"#identity-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>Concordium\u2019s identity layer is built into the protocol. Every account on the chain has one or more credentials issued by specially sanctioned identity providers who are expected to be able to provide full anonymity revocation. ID 2.0 made it possible to use these identities off-chain: wallets allow using identities to prove properties about the holder, such as their nationality or age. These are known as <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a>.</p>", "a[href=\"../smart-contracts/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"../smart-contracts/tutorials/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tutorials<a class=\"headerlink\" href=\"#tutorials\" title=\"Permalink to this headline\">#</a></h1><p>You can go through a number of different tutorials to sharpen your skills as\na dApp (decentralized application) developer on the Concordium blockchain.</p><p>In <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the developer enviroment</span></a> you learn how to set up the development enviroment for working with smart contracts.</p>", "a[href=\"guides/baker-pool.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Baker management<a class=\"headerlink\" href=\"#baker-management\" title=\"Permalink to this headline\">#</a></h1><p>A <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">baker</span></a> is a node that participates in the network by baking (creating) new blocks that are added to the chain. There are some recommended best practices around baking, particularly when a baker runs a <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker-pool\"><span class=\"xref std std-term\">baker pool</span></a>. A baker can choose to open a baker pool to which others can <a class=\"reference internal\" href=\"concepts/concepts-delegation.html#delegation-concept\"><span class=\"std std-ref\">delegate</span></a> some of their stake.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-dapp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the front end<a class=\"headerlink\" href=\"#setting-up-the-front-end\" title=\"Permalink to this headline\">#</a></h1><p>In this part, you will create a web front end. Users can interact with the smart contract more easily\nusing a front end compared to interacting with the node directly.\nNon-tech users might find it inconvenient to interact with smart contracts via the Concordium node\nand some users may choose not to host their own Concordium node locally. This tutorial part shows you\na setup that eliminates the need for the user to host their own Concordium node.</p><p>You can lower the bar for entry by coding an appealing front end that provides additional information\nto your potential customers. Web front ends are a familiar sight nowadays, but to use\nthe front end, users will also need to download a web wallet as a browser extension.\nThe installation and safe usage of the Concordium Wallet for Web might be new for people using your front end.\nProviding comprehensive explanations and step-by-step guides on your website on topics\nrelated to the Concordium Wallet for Web is important for a good user experience. The Concordium Wallet for Web\nconnects via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a> to a server that is connected to a Concordium node. This setup alleviates the\nneed for the user to host their own Concordium node.</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developing smart contracts in Rust<a class=\"headerlink\" href=\"#developing-smart-contracts-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>On the concordium blockchain smart contracts are deployed as Wasm modules, but\nWasm is designed primarily as a compilation target and is not convenient to\nwrite by hand.\nInstead you can write your smart contracts in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language, which\nhas good support for compiling to Wasm.</p><p>Smart contracts do not have to be written in Rust.\nThis is simply the first SDK provided.\nManually written Wasm, or Wasm compiled from C, C++, <a class=\"reference external\" href=\"https://github.com/AssemblyScript\">AssemblyScript</a>, and\nothers, is equally valid on the chain, as long as it adheres to the <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-module.html#wasm-limitations-v0\"><span class=\"std std-ref\">Wasm\nlimitations Concordium imposes</span></a>.</p>", "a[href=\"guides/create-proofs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create proofs<a class=\"headerlink\" href=\"#create-proofs\" title=\"Permalink to this headline\">#</a></h1><p>A <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifier\"><span class=\"xref std std-term\">verifier</span></a> is a business or use-case that provides a service contingent on the holder providing information about themselves using <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> or <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> they have. A verifier will typically consist of two components:</p>", "a[href=\"nodes/windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Windows nodes<a class=\"headerlink\" href=\"#windows-nodes\" title=\"Permalink to this headline\">#</a></h1><p>This section contains topics that describe running a node with Windows.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying the piggy bank smart contract<a class=\"headerlink\" href=\"#deploying-the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the third <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written and tested a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p><p>This part focuses on how you can deploy your developed piggy bank smart contract to the Concordium testnet and interact with it.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint, transfer, and burn fungible tokens<a class=\"headerlink\" href=\"#mint-transfer-and-burn-fungible-tokens\" title=\"Permalink to this headline\">#</a></h1><p>Now you are ready to mint your new tokens. Before minting, look at the minting parameters in the JSON file below. You need to specify the owner, then the token data following with its tokenID, metadata location on IPFS with the URL that you got when you uploaded the metadata file, hash value of it, amount to be minted, and maximum supply number. In this case, it uses tokenID <code class=\"docutils literal notranslate\"><span class=\"pre\">01</span></code>, and mint <code class=\"docutils literal notranslate\"><span class=\"pre\">110</span></code> tokens initially with a maximum supply of 1000.</p>", "a[href=\"../smart-contracts/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"guides/recover-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Recover your Wallet<a class=\"headerlink\" href=\"#recover-your-wallet\" title=\"Permalink to this headline\">#</a></h1><p>In case you get a new device or need to restore your existing device, you can recover your identities, accounts, and keys with the secret recovery phrase you wrote down during wallet setup.</p>", "a[href=\"guides/gallery/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The gallery with ID authentication<a class=\"headerlink\" href=\"#the-gallery-with-id-authentication\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you will learn how to write a gallery which requires the user to prove something using their identity to access the images on the site.\nThe gallery consists of a basic React web front end example that displays the images and communicates with a wallet and a Rust backend that can verify the proofs given by the wallet.</p><p>In the <a class=\"reference internal\" href=\"guides/gallery/gallery-backend.html#gallery-backend\"><span class=\"std std-ref\">first part</span></a>, you will learn how the backend works.</p>", "a[href=\"mobile-wallet/inspect-release-schedule-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a release schedule<a class=\"headerlink\" href=\"#inspect-a-release-schedule\" title=\"Permalink to this headline\">#</a></h1><p>By inspecting the release schedule, you can see when the releases are unlocked.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint a semi-fungible token<a class=\"headerlink\" href=\"#mint-a-semi-fungible-token\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you will learn how to mint semi-fungible tokens on Concordium testnet with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, the Concordium command line interface tool.  In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/nft-minting/index.html#nft-index\"><span class=\"std std-ref\">NFT minting tutorial</span></a>, you learned many things, including how you can mint an NFT on Concordium and set up your development environment with node configurations, wallet and key exports, build, deploy, initialize, mint and transfer. The process in this tutorial will be the same as the first tutorial: first is the wallet setup and key exports, then the storage solutions and preparation of metadata, and finally the development part including minting, transferring and querying balances.</p><p>Before you start this tutorial, if you have not completed your development environment setup, see <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a>. This tutorial assumes you\u2019ve already configured your environment, have a node running, and installed your web wallet and exported its key.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Permalink to this headline\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>", "a[href=\"guides/run-node-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on a server with Ubuntu on Mainnet<a class=\"headerlink\" href=\"#run-a-node-on-a-server-with-ubuntu-on-mainnet\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how organizations can run a node on the Concordium network from a server and how to set up the node to run as a <a class=\"reference internal\" href=\"#baker-node-ubuntu\"><span class=\"std std-ref\">baker node</span></a>.</p><p>You can also watch the video to learn how to run a node with Ubuntu.</p>", "a[href=\"../smart-contracts-v0/guides/local-simulate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Permalink to this headline\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"desktop-wallet/create-credentials-file.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a credentials file<a class=\"headerlink\" href=\"#create-a-credentials-file\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes how you create and export a file with <a class=\"reference internal\" href=\"resources/glossary.html#term-Credential\"><span class=\"xref std std-term\">credentials</span></a>. For information about adding more credentials to an account, see <a class=\"reference internal\" href=\"guides/multi-credentials.html#multi-credentials\"><span class=\"std std-ref\">Add credentials to an account</span></a>.</p>", "a[href=\"desktop-wallet/reset-data.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Reset desktop wallet data<a class=\"headerlink\" href=\"#reset-desktop-wallet-data\" title=\"Permalink to this headline\">#</a></h1><p>All the local data of the desktop wallet is stored in a database in the user\u2019s applications data folder.</p><p>The desktop wallet does not remove your user data when it is uninstalled; this avoids users losing their data, and simplifies the update process for the application.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the piggy bank smart contract<a class=\"headerlink\" href=\"#writing-the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts-v0/tutorials/piggy-bank/index.html#piggy-bank-v0\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment. In this part you will focus on how to write a smart contract in the\n<a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p>", "a[href=\"guides/overview-desktop.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Desktop Wallet<a class=\"headerlink\" href=\"#set-up-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts, and to create transactions such as sending CCD, adding a baker, and exporting and importing account information.</p><p>The Desktop Wallet also supports storing of your private keys on a hardware device. Currently, the LEDGER NANO S, LEDGER NANO S Plus, and LEDGER Nano X are supported.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint an NFT<a class=\"headerlink\" href=\"#mint-an-nft\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint an NFT on Concordium blockchain. First you will learn the basics to set up your development environment. Note that in this tutorial most of the commands are for UNIX-like systems and will not work on Windows.</p><p>All development is completed using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and includes the following examples:</p>", "a[href=\"release-notes/release-notes-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Release notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">#</a></h1><p>This overview outlines the main differences of account models and smart contract functionality between Solana and Concordium.</p>", "a[href=\"guides/run-node.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node with Docker<a class=\"headerlink\" href=\"#run-a-node-with-docker\" title=\"Permalink to this headline\">#</a></h1><p>In this guide, you learn how to run a node on your Linux computer that\nparticipates in the Concordium network. This means that you receive\nblocks and transactions from other nodes, as well as propagate\ninformation about blocks and transactions to the nodes in the Concordium\nnetwork. After following this guide, you will be able to</p>", "a[href=\"../smart-contracts-v0/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"../smart-contracts/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"../smart-contracts-v0/sc-v0-rollup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">V0 Smart Contracts<a class=\"headerlink\" href=\"#v0-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>V0 smart contracts can still be used on the Concordium blockchain, however, there is no development on tooling for v0 smart contracts and the smart contract libraries Concordium provides do not support v0 smart contracts.</p>", "a[href=\"../smart-contracts/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"guides/run-node-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run and manage a node on Windows<a class=\"headerlink\" href=\"#run-and-manage-a-node-on-windows\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how you can run and manage a node on the Concordium network from a Windows computer. You can also run a node using <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#run-node-ubuntu\"><span class=\"std std-ref\">Ubuntu</span></a>, or <a class=\"reference internal\" href=\"guides/run-node-macos.html#run-node-macos\"><span class=\"std std-ref\">macOS</span></a>.</p><p>If you want to run a baker node on Windows, see <a class=\"reference internal\" href=\"guides/baker-windows.html#baker-windows\"><span class=\"std std-ref\">Configure a node on Windows as baker</span></a>.</p>", "a[href=\"desktop-wallet/sign-transaction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sign a transaction proposal<a class=\"headerlink\" href=\"#sign-a-transaction-proposal\" title=\"Permalink to this headline\">#</a></h1><p>As a co-signer on an account, you\u2019ll receive transaction proposals that you have to sign. You\u2019ll receive the proposals as files with the extension .json. Sometimes, you\u2019ll also receive a PDF file with the transaction information. You import the .json file into the Desktop Wallet and then you compare the transaction details with the contents of the PDF file. Some proposers also send a separate file with a copy of the identicon as an extra security measure.</p>", "a[href=\"../smart-contracts/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a smart contract project<a class=\"headerlink\" href=\"#setting-up-a-smart-contract-project\" title=\"Permalink to this headline\">#</a></h1><p>This guide documents two different options (<em>from a template</em> or <em>from scratch</em>) to create a new Concordium smart contract project.\nThe <em>from a template</em> option is available for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> version 2.2.0 or greater. It provides you with some\nsmart contract templates. Choose the template that best fits your project scope.\nThe <em>from scratch</em> option guides you through the process when you want to start a new project without any boilerplate code.</p>", "a[href=\"nodes/node-runner-service-configuration.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Windows node runner service configuration<a class=\"headerlink\" href=\"#concordium-windows-node-runner-service-configuration\" title=\"Permalink to this headline\">#</a></h1><p>You can change the mainnet or testnet node configuration with the Configure Concordium Node Service. The Concordium Node Runner Service (\u201cservice\u201d for short) is configured using a TOML file. This file is typically located at <code class=\"docutils literal notranslate\"><span class=\"pre\">C:\\ProgramData\\Concordium\\Node</span> <span class=\"pre\">Runner\\nodes.toml.</span></code> (The path on your system is determined by the <code class=\"docutils literal notranslate\"><span class=\"pre\">Config</span></code> value in the registry key <code class=\"docutils literal notranslate\"><span class=\"pre\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Concordium\\Node</span> <span class=\"pre\">Runner</span></code>.)</p><p>To run the app, search for <em>configure concordium node</em> in the <strong>Search</strong> bar, and then select <strong>Configure Concordium Node Service</strong>. If you see a message saying <em>Do you want to allow this app to make changes to your device?</em>, select <strong>Yes</strong>. The configuration file opens in Notepad or your default editor.</p>", "a[href=\"desktop-wallet/proposed-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">View transaction proposals<a class=\"headerlink\" href=\"#view-transaction-proposals\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../smart-contracts/general/contract-instances.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Permalink to this headline\">#</a></h1><p>A <strong>smart contract instance</strong> is a smart contract module together with a\nspecific state and an amount of CCD tokens.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"../smart-contracts/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>A <a class=\"reference internal\" href=\"../net/resources/glossary.html#term-Smart-contract\"><span class=\"xref std std-term\">smart contract</span></a> is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"../smart-contracts/best-practices/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Best practices<a class=\"headerlink\" href=\"#best-practices\" title=\"Permalink to this headline\">#</a></h1><p>Here, you can find best practices for smart contract development, audit, information about common pitfalls and security vulnerabilities, and how to avoid them.</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQ for Ethereum developers<a class=\"headerlink\" href=\"#faq-for-ethereum-developers\" title=\"Permalink to this headline\">#</a></h1><p>The following Frequently Asked Questions about Concordium\nfocuses on helping developers with an Ethereum/solidity\nbackground to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"../smart-contracts/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Permalink to this headline\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQs<a class=\"headerlink\" href=\"#faqs\" title=\"Permalink to this headline\">#</a></h1><p>The following Frequently Asked Questions about Concordium focuses on helping developers with a Solana background to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"../smart-contracts/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"resources/ccd-scan.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan<a class=\"headerlink\" href=\"#ccdscan\" title=\"Permalink to this headline\">#</a></h1><p><a class=\"reference external\" href=\"https://ccdscan.io\">CCDScan</a> is a Concordium blockchain explorer. CCDScan effectively serves as a search engine for data on the Concordium blockchain and enables users to search for, explore, and analyze relevant on-chain data. CCDScan includes functionality to scan and gain insights into Concordium blockchain data, such as:</p>", "a[href=\"guides/create-identity.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an identity<a class=\"headerlink\" href=\"#create-an-identity\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start using a Wallet and submit transactions to the blockchain, you need an identity issued by an identity provider, and, in the case of Concordium Legacy Wallet and Desktop Wallet, an initial account issued by the identity provider. The identity provider submits the initial account to the chain and knows the identity of the owner of the initial account, but not of any other accounts that you create. For Concordium Wallet for Web and Concordium Wallet for Mobile, an initial account is not submitted by the identity provider.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">Accounts</span></a>.</p>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"installation/downloads-testnet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads - Testnet<a class=\"headerlink\" href=\"#downloads-testnet\" title=\"Permalink to this headline\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Testnet. You can also find out about the hardware requirements for running a node.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Permalink to this headline\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>.</p>", "a[href=\"nodes/troubleshoot-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node running on Windows<a class=\"headerlink\" href=\"#troubleshoot-a-node-running-on-windows\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to troubleshoot a node running on Windows on the Concordium network.</p>", "a[href=\"guides/run-node-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run and manage a node on macOS<a class=\"headerlink\" href=\"#run-and-manage-a-node-on-macos\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to run and manage a node on macOS. You can also run a node using <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#run-node-ubuntu\"><span class=\"std std-ref\">Ubuntu</span></a>, or <a class=\"reference internal\" href=\"guides/run-node-windows.html#run-node-windows\"><span class=\"std std-ref\">Windows</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-sc.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The voting smart contract<a class=\"headerlink\" href=\"#the-voting-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts/tutorials/voting/index.html#voting-dapp\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract development. In this part you will focus on how to write a smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/voting\">voting smart contract</a> allows for conducting an election with several voting options. An <cite>end_time</cite> is set when the election is initialized. Only accounts are eligible to vote. Each account can change its selected voting option as often as it desires until the <cite>end_time</cite> is reached. No voting is possible after the <cite>end_time</cite>.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p>", "a[href=\"nodes/macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">MacOS nodes<a class=\"headerlink\" href=\"#macos-nodes\" title=\"Permalink to this headline\">#</a></h1><p>This section contains topics that describe running a node with MacOS.</p>", "a[href=\"../smart-contracts/guides/quick-start.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts quick start guide<a class=\"headerlink\" href=\"#concordium-smart-contracts-quick-start-guide\" title=\"Permalink to this headline\">#</a></h1><p>This guide is intended to be used by experienced developers who want to get up and running quickly with a smart contract deployed on chain with which they can interact.</p><p>Before starting, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"guides/update-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update delegation to a baker pool or passive delegation<a class=\"headerlink\" href=\"#update-delegation-to-a-baker-pool-or-passive-delegation\" title=\"Permalink to this headline\">#</a></h1><p>You can change the delegation amount, target, and preferences on an account. You do not have to change all selections. For example, you might only want to change if rewards are restaked or not.</p><p>If you increase the delegation, the new amount will be applied at the start of the next <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. There is one pay day approximately every 24 hours. However, if you decrease the delegation, there is a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a> before the new stake is applied. During this period, you cannot stop delegation or change the amount, but you can change other delegation settings. After the cool-down period, the amount you\u2019ve decreased the delegation by is returned to your disposable balance at the next pay day after the end of the cool-down period.</p>", "a[href=\"installation/verification-instructions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Verification instructions<a class=\"headerlink\" href=\"#verification-instructions\" title=\"Permalink to this headline\">#</a></h1><p>To find instructions on how to verify the integrity of the file you have downloaded, navigate to the respective section that outlines the steps needed for that specific file.</p>", "a[href=\"guides/become-baker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Become a baker using the Concordium Client<a class=\"headerlink\" href=\"#become-a-baker-using-the-concordium-client\" title=\"Permalink to this headline\">#</a></h1><p>This guide takes you through the steps involved in upgrading your node to a baker node and managing the node using the Concordium Client.</p><p>The process of becoming a baker involves the following:</p>", "a[href=\"references/concordium-client.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium distribution ships with a CLI tool named <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>.</p><p>By default <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> performs its queries and sends transactions\nthrough a <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">local node</span></a>. If the node runs on a different machine\nor in a custom setup, the options <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-ip</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-port</span></code> can be used\nto set the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IP_address\">IP address</a> and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> where the node is accessible. These\nflags are supported by all <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> commands. Note that as of version\n5.1.1, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> must be the port where the GRPC V2 interface is enabled, in contrast to previous versions which required the port number of the V1 API of the Concordium node.</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"../smart-contracts/guides/fallback-entrypoints.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Fallback entrypoints<a class=\"headerlink\" href=\"#fallback-entrypoints\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to use fallback entrypoints, which can be useful\nwhen creating a proxy for your smart contract.</p>", "a[href=\"resources/legal.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Legal<a class=\"headerlink\" href=\"#legal\" title=\"Permalink to this headline\">#</a></h1><p>The topics here relate to terms and conditions of use as well as notices and licenses for referenced hardware and software.</p>", "a[href=\"guides/multisig-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a scheduled transfer in the Desktop Wallet<a class=\"headerlink\" href=\"#create-a-scheduled-transfer-in-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"resources/glossary.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary of Concordium Terms<a class=\"headerlink\" href=\"#glossary-of-concordium-terms\" title=\"Permalink to this headline\">#</a></h1><p>See also our <a class=\"reference external\" href=\"https://concordium.com/wp-content/uploads/2023/01/Concordium-White-Paper-v1.6.pdf\">whitepaper</a> for more details on the terms described below.</p>", "a[href=\"mobile-wallet/update-baker-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change baker options<a class=\"headerlink\" href=\"#change-baker-options\" title=\"Permalink to this headline\">#</a></h1><p>The following information describes how to access baker settings to update your stake or restaking preference, to open and manage a baker pool, update baker keys, or stop baking.</p><p>The steps to get to these settings differ between Concordium Wallet for Mobile and Concordium Legacy Wallet. They are described below.</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"../smart-contracts/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a multi-signature CCD transfer in the Desktop Wallet<a class=\"headerlink\" href=\"#create-a-multi-signature-ccd-transfer-in-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>A multi-signature transfer of CCD is a transaction that\nrequires two or more co-signers to sign with their private keys to\nauthorize the transaction.</p>", "a[href=\"../smart-contracts/general/contract-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nreturn value of a receive function and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"guides/shield-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shield and unshield CCD on an account<a class=\"headerlink\" href=\"#shield-and-unshield-ccd-on-an-account\" title=\"Permalink to this headline\">#</a></h1><p>Accounts on the Concordium blockchain have two balances, the <strong>Balance</strong> and the <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a>. You can move funds between these\ntwo balances using either a <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shield CCD transaction</span></a> or an <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshield CCD transaction</span></a>.</p><p>When you shield an amount on an account, only the account\u2019s credential holder can see the shielded amounts. Other participants in the network will be able to see the shielding transaction, but can\u2019t see the shielded balance or any shielded transfers going in or out of the account. You can\u2019t make shielded transfers on multi-signature accounts, only on accounts with a single credential.</p>", "a[href=\"guides/shielded-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a shielded transfer on an account<a class=\"headerlink\" href=\"#make-a-shielded-transfer-on-an-account\" title=\"Permalink to this headline\">#</a></h1><p>A shielded transfer is a transfer between two accounts where the <strong>amount</strong> of the transfer is encrypted. When you make a shielded transfer, the amount you transfer is only known to you and the recipient. However, the sender, receiver, and potential memo will be publicly visible on the blockchain.</p>", "a[href=\"references/grpc.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">gRPC documentation<a class=\"headerlink\" href=\"#grpc-documentation\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium node has a <a class=\"reference external\" href=\"https://grpc.io/\">gRPC</a> interface that enables\nqueries, sending of transactions, and more.\nWhile the gRPC interface is powerful, it is not the most convenient tool.\nConcordium provides a number of SDKs that build on top of the gRPC interface, which are\nmuch more ergonomic to use.</p><p>The SDKs currently provided are:</p>", "a[href=\"web3-id/wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web3 ID in the Concordium Wallet for Web<a class=\"headerlink\" href=\"#web3-id-in-the-bw\" title=\"Permalink to this headline\">#</a></h1><p>Web3 <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> are available in the Concordium Wallet for Web. They might have any of the following states:</p>", "a[href=\"guides/scheduled-release.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scheduled releases<a class=\"headerlink\" href=\"#scheduled-releases\" title=\"Permalink to this headline\">#</a></h1><p>Some transfers contain a release schedule. This means that the CCD in the transfer can be seen on the account, but they are locked until one or more specific points in time. While the funds are locked, they cannot be transferred, but they will be part of the total amount on the account. Scheduled releases can only be created in the Desktop Wallet. You can inspect when funds will be released in Desktop Wallet, Concordium Wallet for Mobile, and Concordium Legacy Wallet.</p>", "a[href=\"../smart-contracts/guides/json-params.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Work with the JSON parameters<a class=\"headerlink\" href=\"#work-with-the-json-parameters\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to interact with the CIS-2 smart contract functions by providing input JSON parameters. This guide uses the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi smart contract</a> as a starting point, and then continues with a couple of custom input types.</p><p>A smart contract implementing CIS-2 must export the following functions: <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code>. This topic briefly describes what the required functions do and how to interact with them using JSON parameters one by one.</p>", "a[href=\"../smart-contracts-v0/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"nodes/node-requirements.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on Concordium<a class=\"headerlink\" href=\"#run-a-node-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>When you run a node on the Concordium blockchain, you are participating in the Concordium blockchain by validating transactions.</p><p>Nodes are required for most things, from using a Concordium wallet to baking. You can choose to run a node yourself or you can have a third-party provider run a node for you. If you choose to run the node yourself, you can\nchoose from four different platforms to run your node: Ubuntu, Windows, MacOS, or Docker/Linux.</p>", "a[href=\"nodes/docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Docker nodes<a class=\"headerlink\" href=\"#docker-nodes\" title=\"Permalink to this headline\">#</a></h1><p>This section contains topics that describe running a node with Docker.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Intialize, build, and deploy the smart contract<a class=\"headerlink\" href=\"#intialize-build-and-deploy-the-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>Now you are ready to build your smart contract. You\u2019ll be using the <code class=\"docutils literal notranslate\"><span class=\"pre\">cis2-nft</span></code> contract template provided by Concordium.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sponsored Transactions Front End and Back End<a class=\"headerlink\" href=\"#sponsored-transactions-front-end-and-back-end\" title=\"Permalink to this headline\">#</a></h1><p>The goal of this part of the tutorial is to set up the front end and the back end locally and to understand the two flows that the dApp provides.</p><p>You can explore the <a class=\"reference external\" href=\"https://sponsored.testnet.concordium.com\">hosted sponsored transaction service</a>.\nThe sponsored transaction service consists of a front end and a back end. You can start your own service by\nfollowing the instructions in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/frontend/README.md\">front end README.md file</a>\nand then the instructions in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/backend/README.md\">back end README.md file</a>.\nAlternatively, follow the steps in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/README.md\">README.md file</a> to deploy the Docker container.\nThe docker container will set up the front end as well as the back end.</p>", "a[href=\"guides/send-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Send CCD<a class=\"headerlink\" href=\"#send-ccd\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes how you can send CCD from an account when only one participant is required to sign the transfer.</p>", "a[href=\"guides/gallery/gallery-frontend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create the public front end<a class=\"headerlink\" href=\"#create-the-public-front-end\" title=\"Permalink to this headline\">#</a></h1><p>The front end is a simple webpage in React that can display the images of the gallery and let the user authenticate.</p><p>When the page is initially opened, it displays the items of the gallery but without the actual images.</p>", "a[href=\"resources/ccd-scan-blocks.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Blocks overview<a class=\"headerlink\" href=\"#ccdscan-blocks-overview\" title=\"Permalink to this headline\">#</a></h1><p>The Blocks overview shows information about the blocks created during the selected time range in the filter.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">A Sponsored Transactions dApp<a class=\"headerlink\" href=\"#a-sponsored-transactions-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to implement a sponsored transaction mechanism in a smart contract, how to sign messages in a wallet and verify the signature in the smart contract,\nhow to send a transaction from a back-end server to the blockchain, and how to connect your Concordium Wallet for Mobile via walletConnect to the frontend.</p><p>The dApp consists of three components that you will explore as part of this tutorial:</p>", "a[href=\"browser-wallet/browser-wallet-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web FAQ<a class=\"headerlink\" href=\"#bw-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"guides/wallet-faqs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Wallet FAQs<a class=\"headerlink\" href=\"#wallet-faqs\" title=\"Permalink to this headline\">#</a></h1><p>The wallet FAQs can help you decide which wallet is best for you.</p>", "a[href=\"guides/dapp-examples.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">dApp examples<a class=\"headerlink\" href=\"#dapp-examples\" title=\"Permalink to this headline\">#</a></h1><p>Select an example to see more information about it, such as a hosted dApp for you to try, links to tutorials, repositories, and more.</p>", "a[href=\"guides/low-code-nft-marketplace/marketplace.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low code NFT marketplace<a class=\"headerlink\" href=\"#low-code-nft-marketplace\" title=\"Permalink to this headline\">#</a></h1><p>To make it quicker and easier to develop and run an NFT marketplace, the Low-Code NFT Minting tool and marketplace have been created. It includes built-in smart contracts, a template user interface, and various functionalities, including the following:</p>", "a[href=\"../smart-contracts/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"../smart-contracts/guides/local-simulate.html#local-simulate\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"nodes/ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Ubuntu nodes<a class=\"headerlink\" href=\"#ubuntu-nodes\" title=\"Permalink to this headline\">#</a></h1><p>This section contains topics that describe running a node with Ubuntu.</p>", "a[href=\"../smart-contracts/guides/local-simulate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Permalink to this headline\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"../smart-contracts/general/contract-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Permalink to this headline\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract implementation for fungible tokens<a class=\"headerlink\" href=\"#smart-contract-implementation-for-fungible-tokens\" title=\"Permalink to this headline\">#</a></h1><p>For your token contract, use the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi contract from Concordium\u2019s example smart contract repository on GitHub</a>. You will make some minor modifications to it in this tutorial, such as the maximum supply of your token, circulating supply, and a burn function. Basically, no one will be able to mint a token again if it already met the maximum supply. Your token will be deflationary in that sense. Burning a token will not affect the circulating supply; if you want, you can adjust the corresponding function so it could affect circulating supply.</p>", "a[href=\"browser-wallet/connect-app.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Connect dApps to wallets<a class=\"headerlink\" href=\"#connect-dapps-to-wallets\" title=\"Permalink to this headline\">#</a></h1><p>You can connect the Concordium Wallet for Web and Concordium Wallet for Mobile to a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Decentralized_application\">dApp</a> that has a front end interface so that you can pay for services. You can initiate the request from within the Concordium Wallet for Web or Concordium Wallet for Mobile, or the dApp can initiate a connection request that you must confirm. Connection can be made by either scanning a QR code or from a link to the dApp service.</p>", "a[href=\"mobile-wallet-gen2/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile FAQ<a class=\"headerlink\" href=\"#mw-gen2-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"concepts/concepts-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Transactions overview<a class=\"headerlink\" href=\"#transactions-overview\" title=\"Permalink to this headline\">#</a></h1><p>A transaction on the Concordium blockchain is an operation which applies some change to the chain. All transactions are recorded on the chain and once recorded, they are immutable. A transaction always has one sender <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">account</span></a> and is signed using the <a class=\"reference internal\" href=\"resources/glossary.html#term-Private-keys\"><span class=\"xref std std-term\">keys</span></a> of this account.</p><p>The most basic transaction is the CCD transfer that is used to send CCD from one account to another. However, there are several transaction types on the Concordium blockchain.</p>", "a[href=\"resources/ccd-scan-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Accounts overview<a class=\"headerlink\" href=\"#ccdscan-accounts-overview\" title=\"Permalink to this headline\">#</a></h1><p>The Accounts overview shows information about accounts during the selected time range in the filter.</p>", "a[href=\"../smart-contracts/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p><p>It is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"guides/company-identities.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Company identity creation<a class=\"headerlink\" href=\"#company-identity-creation\" title=\"Permalink to this headline\">#</a></h1><p>A company identity is for companies that need an identity and accounts on the Concordium blockchain, but don\u2019t want that identity to belong to a specific person. Company identities are therefore issued with documents that identify the company and not an individual. Company identities are only relevant for a few companies, such as crypto exchanges.</p><p>You can\u2019t use the Desktop Wallet, Concordium Wallet for Web, Concordium Wallet for Mobile, or Concordium Legacy Wallet to create a company identity. You need to use a set of command-line tools, and you need to communicate directly with the identity provider (currently Notabene). <a class=\"reference external\" href=\"https://notaben.notion.site/Entity-verification-next-1b4fbcd8e32042e1ac3b0018a3cc27bc\">This page</a> describes Notabene\u2019s process, including recovery of company identities.</p>", "a[href=\"../smart-contracts/guides/upgradeable-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a contract upgradeable<a class=\"headerlink\" href=\"#make-a-contract-upgradeable\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to make a Rust smart contract upgradeable.</p><p>Immutable smart contracts come with the drawback that bugs cannot be fixed, new features and cost optimizations cannot be implemented.\nFor some decentralized applications this is a problem and these need some way to upgrade the smart contract code.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium counter smart contract<a class=\"headerlink\" href=\"#concordium-counter-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This tutorial guides you through creating a smart contract using the Concordium a default contract template that simply keeps a counter value in its state. It is a super simple, fundamental example contract that touches on the following points:</p>", "a[href=\"guides/gallery/gallery-setup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Running the example<a class=\"headerlink\" href=\"#running-the-example\" title=\"Permalink to this headline\">#</a></h1><p>The front end needs the Concordium Wallet for Web for interaction. Install the extension for your browser as described <a class=\"reference internal\" href=\"browser-wallet/setup-browser-wallet.html#setup-browser-wallet\"><span class=\"std std-ref\">here</span></a>.</p><p>Clone this <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples\">repository</a>.</p>", "a[href=\"web3-id/concordia.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordia<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">#</a></h1><p>Concordia is an example solution built on Web3 ID. It allows you to transfer trust between Telegram and Discord. Using verifiable credentials in the Concordium Wallet for Web, you can prove ownership of accounts on Telegram and Discord. This is done by allowing users to link their accounts and, optionally, real name. You can also <code class=\"docutils literal notranslate\"><span class=\"pre\">/check</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">/verify</span></code> other users in Telegram and Discord. In other words, if you know John Doe in one platform, you can also trust him in the other platform using his verifiable credentials.</p><p>To issue credentials and perform verification that these are your credentials, you can use the Concordia Social media verifier. The Concordia Social media verifier performs all the steps needed for you to allow transfer of trust of your user between platforms.</p>", "a[href=\"desktop-wallet/single-sign-schedule.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer CCD with a schedule in Desktop Wallet<a class=\"headerlink\" href=\"#transfer-ccd-with-a-schedule-in-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes how you can send CCD from an account with only one signer with a schedule. If you want to learn about sending CCD with a schedule when more co-signers are required, see <a class=\"reference internal\" href=\"guides/multisig-transfer.html#create-multisig-scheduled\"><span class=\"std std-ref\">Create a scheduled multi-signature CCD transfer in the Desktop Wallet</span></a>.</p><p>You can create two types of release schedules: a regular interval\nschedule and an explicit schedule.</p>", "a[href=\"web3-id/issuer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web3 ID issuers<a class=\"headerlink\" href=\"#web3-id-issuers\" title=\"Permalink to this headline\">#</a></h1><p>Web3 ID includes many types of credentials that are not identity credentials. This might be employment history, certifications from educational courses or diplomas, membership in loyalty clubs or rewards programs, and more. Because of this anyone can become an <a class=\"reference internal\" href=\"resources/glossary.html#term-Issuer\"><span class=\"xref std std-term\">issuer</span></a>!</p>", "a[href=\"../smart-contracts/guides/unit-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to write unit tests for a smart contract written in\nRust.\nFor information about how to test a smart contract Wasm module, see <a class=\"reference internal\" href=\"../smart-contracts/guides/local-simulate.html#local-simulate\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">NFT marketplace smart contract tutorial<a class=\"headerlink\" href=\"#nft-marketplace-smart-contract-tutorial\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial you will create an NFT Marketplace. The <a class=\"reference external\" href=\"https://github.com/chainorders/concordium-nft-tutorials\">contract</a> provides some functionalities, such as minting semi-fungible, and non-fungible tokens, buying and selling NFTs with fixed prices, setting commissions for your marketplace, and setting royalties for your NFTs to get some fees from secondary sales in this marketplace. Before you start, it is important to note that this is not a beginner-level tutorial; it does not cover the basics like downloads, node configurations, wallet setup and export, and so on.</p><p>This tutorial will be the first part of the Marketplace. There will be no UI interaction. You will invoke the functions with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. In the end, while implementing a dApp, what you have to do is implement a client that connects your backend with the blockchain. <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is that client and does that. In the second part which will be released soon, you will implement this marketplace from scratch with an empty React template.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developing smart contracts in Rust<a class=\"headerlink\" href=\"#developing-smart-contracts-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>On the Concordium blockchain smart contracts are deployed as Wasm modules, but\nWasm is designed primarily as a compilation target and is not convenient to\nwrite by hand.\nInstead you can write your smart contracts in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language, which\nhas good support for compiling to Wasm.</p><p>Smart contracts do not have to be written in Rust.\nThis is simply the first SDK provided.\nManually written Wasm, or Wasm compiled from C, C++, <a class=\"reference external\" href=\"https://github.com/AssemblyScript\">AssemblyScript</a>, and\nothers, is equally valid on the chain, as long as it adheres to the <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#wasm-limitations\"><span class=\"std std-ref\">Wasm\nlimitations Concordium imposes</span></a>.</p>", "a[href=\"guides/tokens.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tokens in the wallet<a class=\"headerlink\" href=\"#tokens-in-the-wallet\" title=\"Permalink to this headline\">#</a></h1><p>You can add, inspect, and send tokens in the Concordium Wallet for Web and Concordium Wallet for Mobile for Android devices.</p>", "a[href=\"guides/remove-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Remove delegation to a baker pool or passive delegation<a class=\"headerlink\" href=\"#remove-delegation-to-a-baker-pool-or-passive-delegation\" title=\"Permalink to this headline\">#</a></h1><p>You can remove the delegation on an account to stop delegating.</p><p>If you remove the delegation, there is a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a> before the delegation is stopped. During this period, you continue to earn rewards; you cannot change the delegation amount, but you can change other delegation settings. The delegation stop is not effective until the next pay day after cool-down period ends. At that time the amount you had delegated is returned to your disposable balance.</p>", "a[href=\"concepts/concepts-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation<a class=\"headerlink\" href=\"#delegation\" title=\"Permalink to this headline\">#</a></h1><p>On the Concordium blockchain, <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker\"><span class=\"xref std std-term\">bakers</span></a> run the protocol that generates blocks, and the action of creating blocks is baking. Bakers are rewarded for every block that they create with a payment of some <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a>. Because Concordium runs a proof-of-stake protocol, each baker needs to <a class=\"reference internal\" href=\"resources/glossary.html#term-Staked-Amount\"><span class=\"xref std std-term\">stake an amount to bake</span></a>, and the <a class=\"reference internal\" href=\"resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">probability of being selected to create the next block</span></a> is proportional to each baker\u2019s stake. So the payment may be seen as an interest on the baker\u2019s capital.</p><p>Not everyone with CCD has the resources needed to run a baker. <a class=\"reference internal\" href=\"resources/glossary.html#term-Delegator\"><span class=\"xref std std-term\">Delegation</span></a> enables everyone to earn rewards for delegating some stake without the need to run a node or become a baker. Any party with CCD may delegate some of their capital to a baker. This increases the baker\u2019s chance of baking the next block and getting rewards, which are then shared with the delegators. This is a non-custodial solution: when a party delegates an amount of CCD to a baker, the CCDs are not transferred to the baker and remain under the party\u2019s control; they are just considered part of the baker\u2019s stake for the proof-of-stake protocol. Staked CCDs, both for delegators and bakers, cannot be spent while staked. Unstaking CCDs is subject to a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a>.</p>", "a[href=\"nodes/baker-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a baker node on Ubuntu<a class=\"headerlink\" href=\"#run-a-baker-node-on-ubuntu\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#baker-node-ubuntu\"><span class=\"std std-ref\">baker node</span></a>.</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#set-up-the-mw-gen2\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Wallet for Mobile is a digital <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"guides/baker-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a baker node on Windows<a class=\"headerlink\" href=\"#run-a-baker-node-on-windows\" title=\"Permalink to this headline\">#</a></h1><p>A baker node is a node that participates in the network by baking (creating) new blocks that are added to the chain. Each baker has a set of cryptographic keys called baker keys that the node needs to bake blocks. You generate the baker keys in the Desktop Wallet when you add a baker account. The baker node will start baking two epochs after the transaction has been approved.</p>", "a[href=\"guides/gallery/gallery-backend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the verifying backend<a class=\"headerlink\" href=\"#writing-the-verifying-backend\" title=\"Permalink to this headline\">#</a></h1><p>The backend does the following:</p>", "a[href=\"guides/recovery.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Backup and recovery<a class=\"headerlink\" href=\"#backup-and-recovery\" title=\"Permalink to this headline\">#</a></h1><p>It can be necessary to recover your wallet, for example if you get a new computer or mobile device. It is important to know how you can recover your wallet on a device if necessary. There are differences between what the wallets require for recovery.</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build and deploy the smart contract<a class=\"headerlink\" href=\"#build-and-deploy-the-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>The flow will be the same as the previous tutorials. You will build the contract, deploy it, and then create an instance of it. While selling your NFTs there will be some additional steps.</p><p>Now, you have the smart contract and helpers in your project\u2019s folder. In that folder, create another one called <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/marketplace-contract</span></code> for your output files. Then run the command below to build the contract and save the schema and Wasm file.</p>", "a[href=\"../smart-contracts/guides/contract-testing-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract testing guides<a class=\"headerlink\" href=\"#contract-testing-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract testing guides help you get started testing smart contracts. Here you have guides to help you set up and write unit and integrations tests.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/setup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Permalink to this headline\">#</a></h1><p>If you have done the NFT minting tutorial, you will already have most of the necessary setup, including the Concordium Wallet for Web and necessary tools for authoring smart contracts. Otherwise, see <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Set up the development environment</span></a>. You need the following tools:</p>", "a[href=\"guides/low-code-nft-marketplace/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium low-code NFT framework<a class=\"headerlink\" href=\"#concordium-low-code-nft-framework\" title=\"Permalink to this headline\">#</a></h1><p>Concordium provides developer tools to its community for developing high-level dApps. In order to help our community, Concordium has implemented this Low-Code Minting Tool and Marketplace to lower the bar for getting started on Concordium.</p><p>Concordium has collected feedback and done lots of market research and product experiments to understand the real pains when developing on Concordium. One outcome of those findings is the low-code NFT framework. The Low-Code NFT Minting tool provides a public resource to follow as an example and a white labeling solution for NFT project owners.</p>", "a[href=\"references/grpc2.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">gRPC V2 documentation<a class=\"headerlink\" href=\"#grpc-v2-documentation\" title=\"Permalink to this headline\">#</a></h1><p>Since version 4.5.0 the Concordium node, in addition to the legacy <a class=\"reference internal\" href=\"references/grpc.html#grpc-documentation\"><span class=\"std std-ref\">gRPC\nAPI</span></a>, supports a new API that has a much more detailed\nschema definition, and does not rely on JSON responses. It also supports\nstreaming responses in cases where there is a lot of data, and supports\nsubscribing to new blocks and finalizations.</p><p>The new V2 interface enables access to the same data as the original V1 interface,\nbut in addition supports new endpoints, such as the ability to retrieve the\nentire smart contract state.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Understanding the wCCD smart contract<a class=\"headerlink\" href=\"#understanding-the-wccd-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>The native currency on the Concordium blockchain is CCD. When other tokens are\nbuilt on the Concordium blockchain, they often use the recommended <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code>\ntoken standard. This has the advantage that other dApps (decentralized apps)\ncan rely on some basic rules for how to interact with the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code>\ntokens and on some basic rules for how the apps can retrieve events and data from the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code> tokens.\nThe native currency CCD has a special purpose in the Concordium\nblockchain network and does not comply with the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code> token standard.</p>", "a[href=\"../smart-contracts-v0/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"desktop-wallet/transaction-log-filter.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Apply a transaction log filter in the Desktop Wallet<a class=\"headerlink\" href=\"#apply-a-transaction-log-filter-in-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>You can specify which transactions to show in the transaction log.</p>", "a[href=\"../smart-contracts/tutorials/setup-env.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Permalink to this headline\">#</a></h1><p>First, you need to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> which installs Rust and Cargo to your computer. Go to <a class=\"reference external\" href=\"https://rustup.rs/\">Rustup</a> to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> for your platform.</p><p>Select <strong>1</strong> to continue the installation.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.\nThe library allows you to test individual contracts in isolation, but, notably, also interactions between multiple contracts.\nWhen running the tests, they are executed locally on the exact contract code that is deployed on the chain, and using the same execution engine that the nodes use.\nV0 smart contracts are not supported, but all V1 smart contract features are, including upgrades, and it is also possible to see the energy usage of your contracts.\nThis allows you to refactor and optimize your contracts for speed and efficiency with greater ease and confidence.</p><p>The high-level process of adding integration tests to your existing smart contract project is as follows:</p>", "a[href=\"../smart-contracts/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p>", "a[href=\"guides/add-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegate to a baker pool or passive delegation<a class=\"headerlink\" href=\"#delegate-to-a-baker-pool-or-passive-delegation\" title=\"Permalink to this headline\">#</a></h1><p>You can delegate stake from an account to a <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker-pool\"><span class=\"xref std std-term\">baker pool</span></a> or to <a class=\"reference internal\" href=\"resources/glossary.html#term-Passive-delegation\"><span class=\"xref std std-term\">passive delegation</span></a>.</p><p>When you delegate some stake to a baker pool, it can influence the chances of the baker owner of the baker pool being selected to bake a block and receive baker rewards and thus delegation rewards to you.</p>", "a[href=\"resources/ar-idp-contact.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contact Anonymity Revokers and Identity Providers<a class=\"headerlink\" href=\"#contact-anonymity-revokers-and-identity-providers\" title=\"Permalink to this headline\">#</a></h1><p>To begin the process of anonymity revocation, you must contact the anonymity revoker and identity provider associated with the account with appropriate documentation. To learn about this process, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#revoke-anomity\"><span class=\"std std-ref\">anonymity revocation</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The wCCD smart contract<a class=\"headerlink\" href=\"#the-wccd-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed wCCD token on testnet.\nYou are going to write a basic web front end example that can read from and write to the deployed wCCD smart contract on testnet.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/wCCD/wCCD-introduction.html#wccd-introduction\"><span class=\"std std-ref\">first part</span></a>, you will learn more about the wCCD token protocol.</p>", "a[href=\"../smart-contracts-v0/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p>", "a[href=\"../smart-contracts-v0/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"mobile-wallet/add-baker-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Add baker<a class=\"headerlink\" href=\"#add-baker\" title=\"Permalink to this headline\">#</a></h1><p>Prior to becoming a baker, read <a class=\"reference internal\" href=\"guides/baker-pool.html#baker-pool\"><span class=\"std std-ref\">Baker management</span></a> to learn about best practices for bakers.</p>", "a[href=\"guides/learn-about-concordium.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Learn about Concordium<a class=\"headerlink\" href=\"#learn-about-concordium\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium blockchain is a compliance ready blockchain backed by science that enables private and public transactions. It offers high throughput, fast transactions, and predictable fees, allowing businesses, developers, and traders to harness blockchain\u2019s true power and potential.</p><p>Before you start using the Concordium blockchain, it\u2019s a good idea to understand some basic concepts about our unique blockchain.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint fungible tokens<a class=\"headerlink\" href=\"#mint-fungible-tokens\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint and burn fungible tokens on the Concordium blockchain, send them to multiple accounts, and test the balances. Before starting, you need to understand the <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html\">CIS-2</a> standard.</p>", "a[href=\"mobile-wallet/share-address-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Find and share your account address<a class=\"headerlink\" href=\"#find-and-share-your-account-address\" title=\"Permalink to this headline\">#</a></h1><p>If you need to share your account address with someone, you can find the address on the account page.</p>", "a[href=\"../smart-contracts-v0/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"guides/transaction-report.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a transaction report<a class=\"headerlink\" href=\"#create-a-transaction-report\" title=\"Permalink to this headline\">#</a></h1><p>A transaction report can be useful when you need to know transaction details, such as for tax reporting purposes.</p>", "a[href=\"../smart-contracts-v0/guides/unit-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to write unit tests for a smart contract written in\nRust.\nFor testing a smart contract Wasm module, see <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"guides/export-import.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a backup of identities, accounts, and addresses<a class=\"headerlink\" href=\"#make-a-backup-of-identities-accounts-and-addresses\" title=\"Permalink to this headline\">#</a></h1><p>To make sure that you have a backup of your accounts, identities, and addresses, Concordium strongly recommends that if you are using Concordium Legacy Wallet or Desktop Wallet, you export the data to a file you can store in a safe location. The backup will ensure that you can recover your accounts, identities, and addresses if your Wallet database becomes damaged or if, for some reason, you can\u2019t access the Wallet.</p>", "a[href=\"nodes/troubleshoot-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on a server with Ubuntu<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-a-server-with-ubuntu\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to troubleshoot a node on the Concordium network from a server with Ubuntu.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">An eSealing dApp<a class=\"headerlink\" href=\"#an-esealing-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed eSealing smart contract on testnet and explore the associated website.</p>", "a[href=\"../smart-contracts/tutorials/voting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The Voting dApp<a class=\"headerlink\" href=\"#the-voting-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed voting dApp on testnet. The voting dApp example is intended to show how you can use Concordium to conduct an election using the Concordium Wallet for Web to enable users to cast their vote in your election.\nYou are going to write a basic web front-end example that can read from and write to the deployed smart contract on testnet.</p><p>If you want to try this example before starting the tutorial:</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-front-end-set-up.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the front end<a class=\"headerlink\" href=\"#setting-up-the-front-end\" title=\"Permalink to this headline\">#</a></h1><p>In this part, you will create a web front end. Users can interact with the smart contract easier\nby using your front end compared to interacting with the node directly.\nNon-tech users might find it inconvenient to interact with smart contracts via the Concordium node\nand some users may choose not to host their own Concordium node locally. This tutorial part will show you\na setup that alleviates the need for the user to host their own Concordium node.</p><p>You can lower the bar for entry by coding an appealing front end that provides additional information\nto your potential customers. Web front ends are a familiar sight nowadays, but to use\nthe front end, users will also need to download a browser wallet as a browser extension.\nThe installation and safe usage of the browser wallet might be new for people using your front end.\nProviding comprehensive explanations and step-by-step guides on your website on topics\nrelated to the browser wallet is important for a good user experience. The browser wallet\nconnects via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a> to a server that is connected to a Concordium node. This setup alleviates the\nneed for the user to host their own Concordium node.</p>", "a[href=\"guides/developer-page.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developer resources<a class=\"headerlink\" href=\"#developer-resources\" title=\"Permalink to this headline\">#</a></h1><p>The following developer resources help you get started developing on the Concordium network.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/upload-nft.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upload the NFT<a class=\"headerlink\" href=\"#upload-the-nft\" title=\"Permalink to this headline\">#</a></h1><p>Now you need to upload your asset and give it metadata. For this tutorial you will use the InterPlanetary File System (IPFS).</p>", "a[href=\"nodes/run-node-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on a server with Ubuntu on Testnet<a class=\"headerlink\" href=\"#run-a-node-on-a-server-with-ubuntu-on-testnet\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how organizations can run a node on the Concordium network from a server and how to set up the node to run as a <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#baker-node-ubuntu\"><span class=\"std std-ref\">baker node</span></a>.</p><p>You can also watch the video to learn how to run a node with Ubuntu.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write integration-tests for your piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.\nThe library simulates part of a blockchain <em>locally</em> to allow you to create one or more contracts and interact with them in the tests.</p>", "a[href=\"../smart-contracts-v0/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Permalink to this headline\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-full-dApp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Running your first full dApp<a class=\"headerlink\" href=\"#running-your-first-full-dapp\" title=\"Permalink to this headline\">#</a></h1><p>You are running your own local dApp now. If you want, you can compare it with our\n<a class=\"reference external\" href=\"https://wccd.testnet.concordium.com/\">testnet wCCD dApp</a> hosted on testnet or <a class=\"reference external\" href=\"https://wccd.mainnet.concordium.software/\">mainnet wCCD dApp</a> hosted on mainnet. You can use your Concordium Wallet for Web\nto connect to the dApp.</p>", "a[href=\"references/developer-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Auxiliary Tools<a class=\"headerlink\" href=\"#auxiliary-tools\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"guides/deciding-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deciding between the wallets<a class=\"headerlink\" href=\"#deciding-between-the-wallets\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"references/transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client transactions<a class=\"headerlink\" href=\"#concordium-client-transactions\" title=\"Permalink to this headline\">#</a></h1><p>You can perform all types of transactions with the <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. To do so, you use specialized subcommands. For an introduction to transactions, see <a class=\"reference internal\" href=\"concepts/concepts-transactions.html#transactions-overview\"><span class=\"std std-ref\">Transactions overview</span></a>.</p>", "a[href=\"../smart-contracts-v0/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a smart contract project<a class=\"headerlink\" href=\"#setting-up-a-smart-contract-project\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract in Rust is written as an ordinary Rust library crate.\nThe library is then compiled to Wasm using the Rust target\n<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code> and, since it is just a Rust library, you can use\n<a class=\"reference external\" href=\"https://doc.rust-lang.org/cargo/\">Cargo</a> for dependency management.</p><p>To set up a new smart contract project, first create a project directory. Inside\nthe project directory run the following in a terminal:</p>", "a[href=\"guides/address-book.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Manage address book<a class=\"headerlink\" href=\"#manage-address-book\" title=\"Permalink to this headline\">#</a></h1><p>The address book helps you select a recipient quickly for transactions.</p>", "a[href=\"../smart-contracts/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write unit tests for your piggy bank smart\ncontract and how to setup and locally simulate an invocation of a smart\ncontract.</p>", "a[href=\"guides/how-to-earn.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">How to earn with Concordium<a class=\"headerlink\" href=\"#how-to-earn-with-concordium\" title=\"Permalink to this headline\">#</a></h1><p>To earn more CCDs, you can either delegate or bake. There are advantages and disadvantages to both options.</p>", "a[href=\"resources/ccd-scan-nodes.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Nodes overview<a class=\"headerlink\" href=\"#ccdscan-nodes-overview\" title=\"Permalink to this headline\">#</a></h1><p>Nodes shows information about the nodes on Mainnet/Testnet in alphabetical order. The list contains the following information:</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrading smart contracts on Concordium<a class=\"headerlink\" href=\"#upgrading-smart-contracts-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to upgrade a smart contract natively. You will explore how to\nmigrate the smart contract state from your old contract to the upgraded contract.</p><p>An important desired feature of blockchains is that smart contracts, once deployed, are immutable by default.\nHistory has shown that development teams are looking for mutable smart contract options as well if they want to have\nthe capabilities to fix bugs, or to have the option to add additional\nfeatures to their smart contract protocol in the future.\nOther blockchain require complex <code class=\"docutils literal notranslate\"><span class=\"pre\">proxy-implementation</span></code> patterns to achieve upgradability on the by default immutable smart contracts.\nConcordium makes this process easier by exposing an upgrade mechanism to natively upgrade the smart contract.\nUpgradability is an opt-in on Concordium, meaning you can continue to write immutable contracts on Concordium if you prefer to do so.</p>", "a[href=\"nodes/troubleshoot-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on MacOS<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-macos\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to troubleshoot a node running on MacOS on the Concordium network.</p>", "a[href=\"guides/create-account.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an account<a class=\"headerlink\" href=\"#create-an-account\" title=\"Permalink to this headline\">#</a></h1><p>If you are using Concordium Legacy Wallet or Desktop Wallet, when you created your <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>, it came with an <a class=\"reference internal\" href=\"resources/glossary.html#term-Initial-Account\"><span class=\"xref std std-term\">initial account</span></a>. The initial account is a special account that the <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> submits\nto the chain. When you already have an identity, you can create more <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> with that identity yourself.</p><p>If you are using Concordium Wallet for Web or Concordium Wallet for Mobile, no initial account was created when you created your <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>. You create all <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> related to your identities.</p>", "a[href=\"guides/change-identity-name.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change identity name<a class=\"headerlink\" href=\"#change-identity-name\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/walletConnect.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">WalletConnect<a class=\"headerlink\" href=\"#walletconnect\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Wallet for Mobile are in the process of being updated to support signing byte messages with the <code class=\"docutils literal notranslate\"><span class=\"pre\">signMessage</span></code> request.\nThis tutorial page will be available when the relevant version of Concordium Wallet for Mobile is released.</p>", "a[href=\"guides/run-local-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a local chain<a class=\"headerlink\" href=\"#run-a-local-chain\" title=\"Permalink to this headline\">#</a></h1><p>This guide details how to run your own instance of the Concordium blockchain. This is useful when developing and testing smart contracts. Running your own chain also lets you control various aspects, such as the genesis parameters, anonymity revokers, identity providers, and foundation accounts.</p><p>The chain is run by a network of baker nodes that bake and finalize blocks. In the following minimal example you will set up a network comprised of a single baker node that runs <em>locally</em> on your system and <em>does not connect to mainnet or testnet</em>. Note, however, that the concepts demonstrated here equally apply to any number of baker nodes configured in a LAN or WAN setting.</p>", "a[href=\"../smart-contracts-v0/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"nodes/baker-docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a baker node on Docker<a class=\"headerlink\" href=\"#run-a-baker-node-on-docker\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to configure and manage baking on a Docker/Linux node.</p>", "a[href=\"desktop-wallet/update-application.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update the Desktop Wallet<a class=\"headerlink\" href=\"#update-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>The Desktop Wallet installs updates automatically on <strong>MacOS</strong>, <strong>Windows</strong>, and <strong>Linux</strong> (though only for the AppImage distribution).</p>", "a[href=\"../smart-contracts-v0/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Permalink to this headline\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p>", "a[href=\"guides/low-code-nft-marketplace/minting-tool.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low-code NFT minting tool<a class=\"headerlink\" href=\"#low-code-nft-minting-tool\" title=\"Permalink to this headline\">#</a></h1><p>For non-developers, Concordium has developed a minting tool to mint your NFT collections without minimal development effort. With this super simple dApp you will be able to:</p>", "a[href=\"mobile-wallet/change-passcode-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update your passcode and biometric settings<a class=\"headerlink\" href=\"#update-your-passcode-and-biometric-settings\" title=\"Permalink to this headline\">#</a></h1><p>If you want to change your passcode or enable/disable your biometrics (on a mobile device), following the directions below for your wallet.</p>", "a[href=\"resources/dashboards.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Dashboards and Status Pages<a class=\"headerlink\" href=\"#dashboards-and-status-pages\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"nodes/troubleshoot-docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on a server with Docker<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-a-server-with-docker\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to troubleshoot a node on the Concordium network running in Docker.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interacting with the wCCD token protocol<a class=\"headerlink\" href=\"#interacting-with-the-wccd-token-protocol\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">eSealing dApp<a class=\"headerlink\" href=\"#esealing-dapp\" title=\"Permalink to this headline\">#</a></h1><p>You can explore the <a class=\"reference external\" href=\"https://esealing.testnet.concordium.com\">hosted eSealing service</a> or\nstart your own front-end by following the instructions in the README.md file of this\n<a class=\"reference external\" href=\"https://github.com/Concordium/concordium-browser-wallet/tree/main/examples/eSealing\">repository</a> to get an overview of the dApp flow.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"guides/export-key.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Export a private key<a class=\"headerlink\" href=\"#export-a-private-key\" title=\"Permalink to this headline\">#</a></h1><p>In certain situations, such as testing interaction with smart contracts, you may need to export your private key for an account in your wallet. The file format of the key export is specifically for <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import</span></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. If you just copy the key to the clipboard, it\u2019s just the key itself and can be used for other purposes.</p>", "a[href=\"mobile-wallet/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Legacy Wallet<a class=\"headerlink\" href=\"#set-up-the-mw-gen1\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Legacy Wallet is a digital <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"concepts/id-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identities<a class=\"headerlink\" href=\"#reference-id-accounts\" title=\"Permalink to this headline\">#</a></h1><p>Accounts and identities are strongly linked on the Concordium Platform. To be able to hold, send, or receive <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a> or become a baker on the Concordium blockchain, you need an <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">account</span></a> and an identity. This is regardless of whether you are using the Concordium Legacy Wallet, Concordium Wallet for Mobile, Desktop Wallet, or Concordium Client for your transactions.</p><p>Before you can use the Concordium Platform, an <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> must verify and record your real-world identity. This identification is performed when you create your first account.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Onboarding<a class=\"headerlink\" href=\"#onboarding\" title=\"Permalink to this headline\">#</a></h1><p>Two guides help Solana developers get started on the Concordium chain.</p>", "a[href=\"guides/overview-shared-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shared accounts with multiple credentials in Desktop Wallet<a class=\"headerlink\" href=\"#shared-accounts-with-multiple-credentials-in-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>In the Desktop Wallet, you have the option of creating shared accounts, also known as multi-signature accounts. This is useful, for example, if your organization wants to allow multiple people to manage an account, or if you\u2019re part of a group of people who want to share an account. In these cases, more credentials must be added to an account.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sponsored Transactions Smart Contract<a class=\"headerlink\" href=\"#sponsored-transactions-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>The goal of this part of the tutorial is to understand how the sponsored\ntransaction mechanism is implemented in the smart contract and how to create and verify an Ed25519 signature in the smart contract code.</p><p>Clone the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis3-nft-sponsored-txs\">sponsored transaction example</a>\nwhich you will modify in this tutorial.</p>", "a[href=\"../smart-contracts-v0/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p>", "a[href=\"concepts/concepts-baker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Bakers<a class=\"headerlink\" href=\"#bakers\" title=\"Permalink to this headline\">#</a></h1><p>Baking is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"#baker-concept\"><span class=\"std std-ref\">baker</span></a> is a <a class=\"reference internal\" href=\"resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> that participates in the network by <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker\"><span class=\"xref std std-term\">baking</span></a> (creating) new <a class=\"reference internal\" href=\"resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"resources/glossary.html#term-Baker\"><span class=\"xref std std-term\">baker</span></a> nodes that maintain the blockchain by baking and <a class=\"reference internal\" href=\"resources/glossary.html#term-Finalization\"><span class=\"xref std std-term\">finalizing</span></a> <a class=\"reference internal\" href=\"resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a>.</p>", "a[href=\"guides/change-account-name.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change account name<a class=\"headerlink\" href=\"#change-account-name\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"nodes/baker-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a baker node on macOS<a class=\"headerlink\" href=\"#run-a-baker-node-on-macos\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to configure and manage baking on a macOS node.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nstate of a smart contract instance and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/smartContractUpgrade.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Native upgradability<a class=\"headerlink\" href=\"#native-upgradability\" title=\"Permalink to this headline\">#</a></h1><p>The goal of this tutorial is to deploy a <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>, upgrade its logic, and migrate its state to <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code>.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version1\">contract-version1</a>\nincludes an <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> function and the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version2\">contract-version2</a>\nincludes a <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function. These functions are explored in the next two sections.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modifications<a class=\"headerlink\" href=\"#smart-contract-modifications\" title=\"Permalink to this headline\">#</a></h1><p>You are using the example contract from Concordium\u2019s examples and it\u2019s ready to use. If you want to use it as is you can do it for your project. But in this tutorial you will add a couple of things and update some functions to give more flexibility.</p><p>First, you will add a new struct called <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadata</span></code>. It needs to implement the <code class=\"docutils literal notranslate\"><span class=\"pre\">Serialize</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code> traits for the sake of deserialization of the contract you need it. For those who are familiar with the Ethereum ecosystem it\u2019s like the ABI.</p>", "a[href=\"guides/multi-credentials.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Add credentials to an account<a class=\"headerlink\" href=\"#add-credentials-to-an-account\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../smart-contracts/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"../smart-contracts/references/crypto-primitives.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Cryptographic primitives<a class=\"headerlink\" href=\"#cryptographic-primitives\" title=\"Permalink to this headline\">#</a></h1><p>V1 smart contracts natively support a number of common cryptographic primitives.\nCompared to implementing the same functionality in the smart contract, using primitives is substantially cheaper.\nAt the same time, smart contract developers benefit from using a single, high-quality implementation of the primitives provided by the chain.</p><p>Since all contract inputs, as well as the contract state, on the Concordium blockchain are public, it is only reasonable to have primitives that take public inputs.\nThe currently supported primitives are:</p>", "a[href=\"../smart-contracts/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Permalink to this headline\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"resources/ccd-scan-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Transactions overview<a class=\"headerlink\" href=\"#ccdscan-transactions-overview\" title=\"Permalink to this headline\">#</a></h1><p>The Transactions overview shows information about the transactions during the selected time range in the filter.</p>", "a[href=\"../smart-contracts/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to inspect a smart contract instance.\nInspecting an instance shows you its name, owner, module reference, balance,\nand receive-functions:</p>", "a[href=\"../smart-contracts/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"../smart-contracts/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"snippets/delegation-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation and baking FAQ<a class=\"headerlink\" href=\"#delegation-and-baking-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"resources/ccd-scan-staking.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Staking overview<a class=\"headerlink\" href=\"#ccdscan-staking-overview\" title=\"Permalink to this headline\">#</a></h1><p>The Staking overview shows information about bakers during the selected time range in the filter:</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Permalink to this headline\">#</a></h1><p>A <strong>smart contract instance</strong> is a smart contract module together with a\nspecific state and an amount of CCD tokens.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"guides/sdks-apis.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">SDKs and APIs<a class=\"headerlink\" href=\"#sdks-and-apis\" title=\"Permalink to this headline\">#</a></h1><p>The following SDKs and APIs exist for developing on the Concordium network.</p>", "a[href=\"../smart-contracts/best-practices/development.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Development best practices<a class=\"headerlink\" href=\"#development-best-practices\" title=\"Permalink to this headline\">#</a></h1><p>This document provides guidelines for developing smart contracts.\nIt starts with some general thoughts about smart contract development and then gives more details about writing smart contracts in Rust for Concordium.</p>", "a[href=\"guides/proofs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Proofs and revealing information<a class=\"headerlink\" href=\"#proofs-and-revealing-information\" title=\"Permalink to this headline\">#</a></h1><p>Some dApps or services may require you to prove that you are over a certain age, that you reside in a specific range of countries or area without revealing your exact age or country of residence, or that you have a certain type of education. You can choose whether you want to prove these <a class=\"reference internal\" href=\"resources/glossary.html#term-Attributes\"><span class=\"xref std std-term\">attributes</span></a> to the dApp or service using your <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> or <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a>. The dApp or service uses a <a class=\"reference internal\" href=\"resources/glossary.html#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">zero-knowledge proof</span></a> to request the attributes necessary for their service. This means that the dApp or service does not get any exact attributes, only proof that you live up to their requirements. You can choose which account (and thus identity) to use to fulfill the proof request for <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> using the drop-down above the proof.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Web<a class=\"headerlink\" href=\"#set-up-the-bw\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Wallet for Web is a digital wallet that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions, such as sending CCD.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
