selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/ElGamal_encryption\"]": "<p>In cryptography, the <b>ElGamal encryption system</b> is an asymmetric key encryption algorithm for public-key cryptography which is based on the Diffie\u2013Hellman key exchange. It was described by Taher Elgamal in 1985. ElGamal encryption is used in the free GNU Privacy Guard software, recent versions of PGP, and other cryptosystems. The Digital Signature Algorithm (DSA) is a variant of the ElGamal signature scheme, which should not be confused with ElGamal encryption.</p>", "a[href^=\"https://en.wikipedia.org/wiki/ElGamal_encryption#\"]": "<p>In cryptography, the <b>ElGamal encryption system</b> is an asymmetric key encryption algorithm for public-key cryptography which is based on the Diffie\u2013Hellman key exchange. It was described by Taher Elgamal in 1985. ElGamal encryption is used in the free GNU Privacy Guard software, recent versions of PGP, and other cryptosystems. The Digital Signature Algorithm (DSA) is a variant of the ElGamal signature scheme, which should not be confused with ElGamal encryption.</p>", "a[href=\"https://en.wikipedia.org/wiki/Ciphertext\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Zimmermann_Telegram.jpeg/320px-Zimmermann_Telegram.jpeg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>In cryptography, <b>ciphertext</b> or <b>cyphertext</b> is the result of encryption performed on plaintext using an algorithm, called a cipher. Ciphertext is also known as encrypted or encoded information because it contains a form of the original plaintext that is unreadable by a human or computer without the proper cipher to decrypt it. This process prevents the loss of sensitive information via hacking. Decryption, the inverse of encryption, is the process of turning ciphertext into readable plaintext. Ciphertext is not to be confused with codetext because the latter is a result of a code, not a cipher.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Ciphertext#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Zimmermann_Telegram.jpeg/320px-Zimmermann_Telegram.jpeg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>In cryptography, <b>ciphertext</b> or <b>cyphertext</b> is the result of encryption performed on plaintext using an algorithm, called a cipher. Ciphertext is also known as encrypted or encoded information because it contains a form of the original plaintext that is unreadable by a human or computer without the proper cipher to decrypt it. This process prevents the loss of sensitive information via hacking. Decryption, the inverse of encryption, is the process of turning ciphertext into readable plaintext. Ciphertext is not to be confused with codetext because the latter is a result of a code, not a cipher.</p>", "a[href=\"#term-Baker\"]": "<dt id=\"term-Baker\">Baker</dt><dd><p>A node that participates in the production of <a class=\"reference internal\" href=\"#term-Block\"><span class=\"xref std std-term\">blocks</span></a>, referred to as <em>baking</em>.</p></dd>", "a[href=\"#term-Cool-down-period\"]": "<dt id=\"term-Cool-down-period\">Cool-down period</dt><dd><p>A period of time during which a transaction is frozen. Examples of when cool-down periods apply include removing a baker and updating stake. The length of a cool-down period varies between transactions.</p></dd>", "a[href=\"#term-Qualified-authority\"]": "<dt id=\"term-Qualified-authority\">Qualified authority</dt><dd><p>A governmental body that has the authority to act in a relevant jurisdiction. For example, a local police force, a local court or an investigatory division of a local authority that regulates financial conduct may have authority to act in their relevant jurisdictions. These authorities are qualified to begin the process of revoking the anonymity of a user when they proceed through established legal channels and make a formal request. The outcome of such a request is likely to be that a qualified authority obtains an official order, which may be in the form of a warrant, court order, or similar instrument. Only after a qualified authority validly serves an official order upon the relevant <a class=\"reference internal\" href=\"#term-Anonymity-revoker\"><span class=\"xref std std-term\">anonymity revokers</span></a> and <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>, can the real-world identity of a user be revealed and only to the extent set out in the order.</p></dd>", "a[href=\"#term-Branch\"]": "<dt id=\"term-Branch\">Branch</dt><dd><p>A chain of blocks that has split from the main chain. All branches have the potential to become the main chain. The Chain selection rule determines which branch is the best chain.</p></dd>", "a[href=\"#term-Winning-probability\"]": "<dt id=\"term-Winning-probability\">Winning probability</dt><dd><p>The winning probability is the probability that a baker wins in a given round. The probability is <span class=\"math notranslate nohighlight\">\\(\\alpha\\)</span>, which equals the baker\u2019s relative stake.</p></dd>", "a[href=\"#term-Chain-selection-rule\"]": "<dt id=\"term-Chain-selection-rule\">Chain selection rule</dt><dd><p>A rule that selects the best chain based on the following criteria:</p></dd>", "a[href=\"#term-Leader-Election\"]": "<dt id=\"term-Leader-Election\">Leader Election</dt><dd><p>In each round, a predetermined leader among the bakers should produce a block. Round leaders are determined each epoch, defined as a fixed time duration. The leaders are determined from a leader election nonce that is updated each epoch. To update the leader election nonce the first block (the trigger block) after the nominal epoch time must be finalized. When this happens the chain starts a new epoch with the new leader election nonce set. When finalizers see the proof for the trigger block they stop signing additional blocks in the current epoch. When a baker sees the finalization proof it will bake in the new epoch. The leader election nonce is based on the block hashes up to the trigger block of the current epoch.</p><p>The <a class=\"reference internal\" href=\"#term-Winning-probability\"><span class=\"xref std std-term\">winning probability</span></a> is proportional to the baker\u2019s relative stake.</p><p>See <a class=\"reference internal\" href=\"#term-Lottery-Power\"><span class=\"xref std std-term\">lottery power</span></a>.</p></dd>", "a[href=\"#term-Baker-pool\"]": "<dt id=\"term-Baker-pool\">Baker pool</dt><dd><p>A baker and delegators that collectively pool their stake to participate in the consensus protocol and earn rewards. The baker runs a baker node on behalf of the baker pool to bake (and possibly finalize) blocks using the collective stake of the pool to determine its lottery power. Rewards are accrued to the pool each time the baker produces a block. Each pay day, the accrued rewards are distributed to the pool\u2019s participants in proportion to their relative stakes in the pool, with the baker (the pool owner) receiving an additional commission from the delegators\u2019 rewards.</p></dd>", "a[href=\"#term-Attributes\"]": "<dt id=\"term-Attributes\">Attributes</dt><dd><p>User data, such as date of birth or country of residence, that is associated with a user <a class=\"reference internal\" href=\"#term-Identity\"><span class=\"xref std std-term\">identity</span></a>. Users can choose which attributes should be revealed in each of their accounts.</p></dd>", "a[href=\"#term-Nonce\"]": "<dt id=\"term-Nonce\">Nonce</dt><dd><p>May refer to:</p></dd>", "a[href=\"#term-Round\"]": "<dt id=\"term-Round\">Round</dt><dd><p>Replaces slots in the Concordium BFT protocol. In each round, a predetermined leader among the bakers should produce a block. Round leaders are determined each epoch, defined as a fixed time duration. Rounds are an index to a block or timeout.</p></dd>", "a[href=\"#term-Mainnet\"]": "<dt id=\"term-Mainnet\">Mainnet</dt><dd><p>The main Concordium network which is expected to launch in early 2021. The mainnet will receive periodic upgrades, but in contrast to the <a class=\"reference internal\" href=\"#term-Testnet\"><span class=\"xref std std-term\">testnet</span></a>, it will never be reset, and accounts created on the mainnet will remain indefinitely.</p></dd>", "a[href=\"#term-On-chain\"]": "<dt id=\"term-On-chain\">On-chain</dt><dd><p>Refers to an an event or activity that is propagated through the Concordium network and recorded on the Concordium blockchain. The recording can be explicit or implicit as part of the consensus protocol. An example of the former is a transaction such as a CCD transfer, an example of the latter are the rewards given out to, e.g., bakers.</p></dd>", "a[href=\"#term-Identity-Provider\"]": "<dt id=\"term-Identity-Provider\">Identity Provider</dt><dd><p>A person or organization that performs off-chain identification of users. Users are required to obtain an identity object from an identity provider in order to open an account on the Concordium Platform.</p></dd>", "a[href=\"#term-Statement\"]": "<dt id=\"term-Statement\">Statement</dt><dd><p>A list presented to a wallet by a dApp or service whose items are either attributes to reveal, or properties of attributes to prove.</p></dd>", "a[href=\"#term-Account-credential\"]": "<dt id=\"term-Account-credential\">Account credential</dt><dd><p>A certificate derived from the <a class=\"reference internal\" href=\"#term-Identity-Object\"><span class=\"xref std std-term\">identity object</span></a> that proves that the owner has been verified by an identity provider. The key feature of the credential is that it <strong>does not</strong> identify the owner to the identity provider, nor to any other single entity, however it contains enough information to allow anonymity revokers in concert with the identity provider to find the owner.</p></dd>", "a[href=\"#term-Finalization\"]": "<dt id=\"term-Finalization\">Finalization</dt><dd><p>The process by which a block is marked to be \u201cfinalized\u201d, i.e. part of the authoritative <a class=\"reference internal\" href=\"#term-Chain\"><span class=\"xref std std-term\">chain</span></a>. Transactions that are part of finalized blocks are considered authoritative. New blocks can be only added following the last finalized block. The finalization process is conducted by the bakers with a staked amount of at least 0.1% of the <a class=\"reference internal\" href=\"#term-Total-effective-stake\"><span class=\"xref std std-term\">total effective stake</span></a> in baker pools, known as the Finalization committee. Total effective stake in baker pools does not include passive delegation and any amount that exceeds the <a class=\"reference internal\" href=\"../concepts/concepts-delegation.html#delegation-caps\"><span class=\"std std-ref\">baker pool bounding caps</span></a>. Finalization has to happen for each round otherwise the blockchain cannot proceed to the next round.</p></dd>", "a[href=\"#term-Pay-day\"]": "<dt id=\"term-Pay-day\">Pay day</dt><dd><p>A pay day is the point at which new CCDs are minted and rewards to bakers and delegators are distributed. The stakes of bakers and delegators are updated each pay day (but the changes for each pay day are fixed one epoch before). Pay day is thus when new bakers begin baking and updates to delegation and baking take effect, such as increasing stake, restaking preferences, adding delegation. In the case of decreasing stake or removing delegation or baking, there is a longer cool-down period, after which the change is executed at the <strong>next pay day after the cool-down period ends</strong>. The cool-down period is 2 weeks for delegators and 3 weeks for bakers. Pay day is every 24 hours (i.e., 24 epochs) at approximately 09:00 UTC on Mainnet and approximately 12:00 UTC on Testnet. Bakers are finalized at the end of the epoch before that next epoch where they are eligible to bake.</p></dd>", "a[href=\"#term-Block\"]": "<dt id=\"term-Block\">Block</dt><dd><p>The basic unit of the blockchain, which is produced by a <a class=\"reference internal\" href=\"#term-Baker\"><span class=\"xref std std-term\">baker</span></a>. A block contains a (possibly empty) list of <a class=\"reference internal\" href=\"#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a>, and has a pointer to a previous block (with the exception of the <a class=\"reference internal\" href=\"#term-Genesis-Block\"><span class=\"xref std std-term\">genesis block</span></a>). A block and its predecessors form a chain, and the sequence of transactions they contain form a ledger. Each block has a <a class=\"reference internal\" href=\"#term-Slot\"><span class=\"xref std std-term\">slot time</span></a> that records when it was baked. A block also contains information relating to consensus, for instance establishing which baker created the block, and that the baker was entitled to do so.</p></dd>", "a[href=\"#term-Transaction-Sequence-Number\"]": "<dt id=\"term-Transaction-Sequence-Number\">Transaction Sequence Number</dt><dd><p>A sequence number that orders <a class=\"reference internal\" href=\"#term-Transaction\"><span class=\"xref std std-term\">transaction</span></a> on a given <a class=\"reference internal\" href=\"#term-Account\"><span class=\"xref std std-term\">account</span></a>. In a ledger, all transactions for an account must be ordered with consecutive transaction sequence numbers, starting from 1. Transaction sequence numbers ensure that a transaction cannot be repeated in the ledger, and that the transactions occur in the order intended by the sender account holder.</p></dd>", "a[href=\"#term-Wallet\"]": "<dt id=\"term-Wallet\">Wallet</dt><dd><p>A wallet is an app that allows cryptocurrency users to store and retrieve their digital assets, and manage identities and accounts. Concordium has four wallet types.</p></dd>", "a[href=\"#term-Challenge\"]": "<dt id=\"term-Challenge\">Challenge</dt><dd><p>To make sure that <a class=\"reference internal\" href=\"#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">zero-knowledge proofs</span></a> cannot be reused (e.g., if they are stolen), the verifier can and should specify a challenge string. This can be an arbitrary byte array which is used by the prover (wallet) when producing the proof. The proof will only validate with respect to the challenge that was used to produce it. The verifier server can thus use the challenge to make sure the proofs it is receiving are not reused, and to handle their lifetime (e.g., it can set the challenge it supplied to expire in 5 minutes).</p></dd>", "a[href=\"#term-Secret-recovery-phrase\"]": "<dt id=\"term-Secret-recovery-phrase\">Secret recovery phrase</dt><dd><p>Also known as a seed phrase, recovery phrase, mnemonic phrase, mnemonic seed, or backup phrase. A group of random words generated by the wallet that allows you to access the CCDs stored in it across devices or in case of non-functioning devices. Secret recovery phrase is supported by Concordium Wallet for Mobile.</p></dd>", "a[href=\"#term-Node\"]": "<dt id=\"term-Node\">Node</dt><dd><p>A participant in the Concordium network. Nodes receive blocks and transactions, and track the current state of the blockchain. A <a class=\"reference internal\" href=\"#term-Baker\"><span class=\"xref std std-term\">baker node</span></a> has cryptographic keys that enable it to take part in baking and <a class=\"reference internal\" href=\"#term-Finalization\"><span class=\"xref std std-term\">finalization</span></a>. A node without these keys is referred to as a <em>passive node</em>.</p></dd>", "a[href=\"#term-Deploy\"]": "<dt id=\"term-Deploy\">Deploy</dt><dd><p>Command that takes the built <a class=\"reference internal\" href=\"#term-WebAssembly\"><span class=\"xref std std-term\">Wasm</span></a> file for a smart contract module and deploys it on chain. This command is run from <a class=\"reference internal\" href=\"#term-Concordium-client\"><span class=\"xref std std-term\">Concordium client</span></a>.</p></dd>", "a[href=\"#term-Credential-registry-contract\"]": "<dt id=\"term-Credential-registry-contract\">Credential registry contract</dt><dd><p>A smart contract used by <a class=\"reference internal\" href=\"#term-Issuer\"><span class=\"xref std std-term\">issuers</span></a> of <a class=\"reference internal\" href=\"#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> to register credentials when they are issued. This contract will also be used to track the state of a credential, e.g., valid, revoked, expired.</p></dd>", "a[href=\"#term-Initialize\"]": "<dt id=\"term-Initialize\">Initialize</dt><dd><p>Action that creates a new smart contract instance with the initial state. The only way to update the instance state is by invoking the instance\u2019s entrypoints.</p></dd>", "a[href=\"#term-Total-effective-stake\"]": "<dt id=\"term-Total-effective-stake\">Total effective stake</dt><dd><p>The total amount of stake in baker pools excluding passive delegation and any amount that exceeds the <a class=\"reference internal\" href=\"../concepts/concepts-delegation.html#delegation-caps\"><span class=\"std std-ref\">baker pool bounding caps</span></a>.</p></dd>", "a[href=\"#term-CCDScan\"]": "<dt id=\"term-CCDScan\">CCDScan</dt><dd><p>CCDScan effectively serves as a search engine for data on the Concordium blockchain and enables users to search for, explore, and analyze relevant on-chain data. Often used to research bakers and pools before deciding to delegate funds to a particular pool.</p></dd>", "a[href=\"#term-Slot\"]": "<dt id=\"term-Slot\">Slot</dt><dd><p>See <a class=\"reference internal\" href=\"#term-Round\"><span class=\"xref std std-term\">round</span></a>.</p><p>In the blockchain, time is divided into equally sized units called <em>slots</em>. On the testnet the duration of slot is one second. In every slot, each baker checks locally whether they won the lottery, which entitles the winner to bake a block in that slot. Zero, one, or multiple bakers can win the lottery. The probability of these different events is controlled by the difficulty parameter <em>f</em>. For example, with difficulty 0.5 on average every second slot will have a lottery winner.</p></dd>", "a[href=\"#term-Concordium-Byzantine-Fault-Tolerance-BFT-protocol\"]": "<dt id=\"term-Concordium-Byzantine-Fault-Tolerance-BFT-protocol\">Concordium Byzantine Fault Tolerance (BFT) protocol</dt><dd><p>The consensus protocol for the blockchain. The protocol offers high transaction throughput and lower confirmation time because a block can be produced as soon as the previous block has been signed. The protocol proceeds by rounds. In each round, a predetermined leader among the bakers should produce a block. The members of the finalization committee then sign this block, and their collective signatures are aggregated to form a quorum certificate. This quorum certificate is then included in the next block. If the leader fails to produce a block in the round, or not enough signatures were gathered for a QC, then the finalizers will instead send timeout messages, which are aggregated to form a timeout certificate. Each block always contains a quorum certificate and may contain a timeout certificate for the previous round if and only if the previous round timed out. When blocks on a common chain in two consecutive rounds have quorum certificates, the block in the first of these rounds (together with its ancestors) is considered finalized. At this point, the protocol ensures that it cannot be rolled back. The two consecutive blocks must also be within the same epoch.</p></dd>", "a[href=\"#term-Epoch\"]": "<dt id=\"term-Epoch\">Epoch</dt><dd><p>A time period that is approximately one hour on testnet and mainnet. At the start of each epoch, a <a class=\"reference internal\" href=\"#term-Leader-Election\"><span class=\"xref std std-term\">leadership election nonce</span></a> is computed based on the block nonces of the previous epoch. The leadership election nonce is valid for the duration of the epoch. Each epoch has a nominal ending, and when a block is finalized after this nominal ending then epoch transition occurs.</p></dd>", "a[href=\"#term-Web3-ID\"]": "<dt id=\"term-Web3-ID\">Web3 ID</dt><dd><p>Web3 ID is an extension of the core protocol identity with other types of credentials that don\u2019t have stringent requirements on anonymity revocation, but can also witness a number of other attributes of the holder. Examples of this would be club membership credentials, reward programs, etc. There are no requirements imposed on who can be an issuer of these credentials, and in contrast to protocol identities, the Web3 ID credentials can be revoked according to the logic imposed by the issuer. This could be that the credential holder can revoke it, the credential expires, or the issuer or some other third party has rights to revoke it.</p></dd>", "a[href=\"#term-Delegator\"]": "<dt id=\"term-Delegator\">Delegator</dt><dd><p>An account that contributes stake to a baker pool, or to passive delegation. When an account becomes a delegator, the delegated amount of CCD is locked so that it cannot be spent or transferred while it is delegated. Delegators earn rewards, minus a commission to the baker, in proportion to their delegated stake.</p></dd>", "a[href=\"#term-Instance\"]": "<dt id=\"term-Instance\">Instance</dt><dd><p>A smart contract module together with a specific state and an amount of CCD tokens. Multiple smart contract instances can be created from the same module. Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract module</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the requested function in the smart contract module. This function can take a parameter. Its end result is the state of the smart contract instance.</p></dd>", "a[href=\"#term-Shielded-transfer\"]": "<dt id=\"term-Shielded-transfer\">Shielded transfer</dt><dd><p>Transfer from <a class=\"reference internal\" href=\"#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a> of an account to a shielded balance of another account. The amount that is transferred is only visible to the sender and the receiver.</p></dd>", "a[href=\"#term-Alias\"]": "<dt id=\"term-Alias\">Alias</dt><dd><p>A kind of sub-account structure that can be created. An account owner can create different aliases for different uses to keep track of transfers and assign them meaning. Each account has 16777216 addresses, namely a so-called canonical account address together with matching account aliases. The canonical account address is derived when an account is created on chain. The other 16 million addresses with matching initial 29 bytes are referred to as account aliases for the same account. Thus, accounts can be referred to by any address whose initial 29 bytes match.</p></dd>", "a[href=\"#term-Consensus\"]": "<dt id=\"term-Consensus\">Consensus</dt><dd><p>The process by which nodes agree which <a class=\"reference internal\" href=\"#term-Transaction\"><span class=\"xref std std-term\">transaction</span></a> have occurred and in what order. This consists of <a class=\"reference internal\" href=\"#term-Baker\"><span class=\"xref std std-term\">baking</span></a> and <a class=\"reference internal\" href=\"#term-Finalization\"><span class=\"xref std std-term\">finalization</span></a>.</p></dd>", "a[href=\"#term-Off-chain\"]": "<dt id=\"term-Off-chain\">Off-chain</dt><dd><p>Refers to activities outside of the Concordium blockchain. Some on-chain actions need preliminary actions off-chain, for example to create an account on the Concordium blockchain the user must first work with an identity provider, e.g., via their website or mobile application, to obtain a specific digital certificate. Concordium refers to this certificate as the <strong>identity</strong>.</p></dd>", "a[href=\"#term-Non-membership-proof\"]": "<dt id=\"term-Non-membership-proof\">Non-membership proof</dt><dd><p>A proof to determine that an attribute of a user\u2019s identity is <strong>not</strong> included in a set, for example, that they are <strong>not</strong> a resident of a country under trade sanctions.</p></dd>", "a[href=\"#term-Staked-Amount\"]": "<dt id=\"term-Staked-Amount\">Staked Amount</dt><dd><p><a class=\"reference internal\" href=\"#term-Baker\"><span class=\"xref std std-term\">Bakers</span></a> can have part of the balance of their account staked. The amount that is staked remains locked while staked and cannot be transferred or moved in any way. The staked amount is proportional to the <a class=\"reference internal\" href=\"#term-Lottery-Power\"><span class=\"xref std std-term\">lottery power</span></a> of a baker.</p><p><a class=\"reference internal\" href=\"#term-Delegator\"><span class=\"xref std std-term\">Delegators</span></a> can delegate stake to a baker pool or passive delegation. This affects the staked amount of the baker and thus their lottery power.</p></dd>", "a[href=\"#term-Credential\"]": "<dt id=\"term-Credential\">Credential</dt><dd><p>See <a class=\"reference internal\" href=\"#term-Account-credential\"><span class=\"xref std std-term\">account credential</span></a>.</p></dd>", "a[href=\"#term-Smart-contract\"]": "<dt id=\"term-Smart-contract\">Smart contract</dt><dd><p>A computer program or a transaction protocol that is intended to automatically execute, control or document events and actions according to the terms of a contract or an agreement. An example is a smart contract for selling NFTs on a marketplace; it may contain information about royalties, selling the NFT on to others, and so on.</p></dd>", "a[href=\"#term-Genesis-Block\"]": "<dt id=\"term-Genesis-Block\">Genesis Block</dt><dd><p>The first <a class=\"reference internal\" href=\"#term-Block\"><span class=\"xref std std-term\">block</span></a> in a <a class=\"reference internal\" href=\"#term-Chain\"><span class=\"xref std std-term\">chain</span></a>. The genesis block establishes the starting state of the chain, before any transactions have occurred.</p></dd>", "a[href=\"#term-Anonymity-revoker\"]": "<dt id=\"term-Anonymity-revoker\">Anonymity revoker</dt><dd><p>An authority who has power to know the identity of a participant. The anonymity revokers and <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> can work together to determine the owner of an account and determine which accounts belong to the same owner. (They should only do so when legally obliged to, such as by a court order.) Anonymity revocation is a two-stage process, requiring cooperation of multiple parties.</p></dd>", "a[href=\"#term-Invoke\"]": "<dt id=\"term-Invoke\">Invoke</dt><dd><p>Invoke means to call something into effect.</p><p>Invoke is also the act of triggering a receive function in a smart contract from <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and viewing its return value. Invoking an instance is not a transaction and it does not change the state of a contract. Invoking can be useful to either view information about the instance or to test a receive method before running an update. Because invoking is not a transaction, there is no fee to run invoke. Click <a class=\"reference internal\" href=\"../../smart-contracts/tutorials/nft-minting/mint-xfer.html#nft-view-fn\"><span class=\"std std-ref\">here to see examples of how to use invoke to view information about the instance</span></a>.</p></dd>", "a[href=\"#term-Encryption-key\"]": "<dt id=\"term-Encryption-key\">Encryption key</dt><dd><p>An <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ElGamal_encryption\">ElGamal</a> public key associated to an account which is used to encrypt all <a class=\"reference internal\" href=\"#term-Shielded-amount\"><span class=\"xref std std-term\">shielded amounts</span></a> on the account.</p></dd>", "a[href=\"#term-Quorum-certificate\"]": "<dt id=\"term-Quorum-certificate\">Quorum certificate</dt><dd><p>When the members of the finalization committee finalize the block, their collective signatures are aggregated to form a quorum certificate. This quorum certificate is then included in the next block. If the leader fails to produce a block in the <a class=\"reference internal\" href=\"#term-Round\"><span class=\"xref std std-term\">round</span></a>, or not enough signatures were gathered for a quorum certificate, then the finalizers will instead send timeout messages, which are aggregated to form a <a class=\"reference internal\" href=\"#term-Timeout-certificate\"><span class=\"xref std std-term\">timeout certificate</span></a>. Each block either contains a quorum certificate or a timeout certificate for the previous round. A block always contains a quorum certificate as it serves as a reference to the parent block. The block might contain a timeout certificate if the previous round timed out. A quorum certificate or a timeout certificate ensures that the protocol progresses. When a node sees a valid quorum certificate or timeout certificate it progresses to the next round.</p></dd>", "a[href=\"#term-Account\"]": "<dt id=\"term-Account\">Account</dt><dd><p>An addressable store of funds on the blockchain. An account is associated with one or more <em>account keys</em> that can be used to authorize transactions originating from the account, as well as with an <a class=\"reference internal\" href=\"#term-Encryption-key\"><span class=\"xref std std-term\">encryption key</span></a> that can be used to send shielded transfers to the account. An account is also associated with the account holder\u2019s <a class=\"reference internal\" href=\"#term-Identity\"><span class=\"xref std std-term\">identity</span></a>, although this association is encrypted for anonymity. This anonymity can only be revoked by <a class=\"reference internal\" href=\"#term-Anonymity-revoker\"><span class=\"xref std std-term\">anonymity revokers</span></a>, in cooperation with the account\u2019s <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>.</p></dd>", "a[href=\"#term-Verifiable-credential\"]": "<dt id=\"term-Verifiable-credential\">Verifiable credential</dt><dd><p>Issued to the individual by an <a class=\"reference internal\" href=\"#term-Issuer\"><span class=\"xref std std-term\">issuer</span></a> who has authority for the credential to be issued. A verifiable credential contains some information about the individual that does not necessitate <a class=\"reference internal\" href=\"#term-Anonymity-revoker\"><span class=\"xref std std-term\">anonymity revocation</span></a>, such as membership in a club or loyalty program, education, and more. Verifiable credentials can be checked by a <a class=\"reference internal\" href=\"#term-Verifier\"><span class=\"xref std std-term\">verifier</span></a> using <a class=\"reference internal\" href=\"#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">zero-knowledge proofs</span></a>. The issuer can choose to have the verifiable credential expire, or revoke it, if necessary. The issuer manages the verifiable credentials with a smart contract, a credential registry contract.</p></dd>", "a[href=\"#term-Unshielding\"]": "<dt id=\"term-Unshielding\">Unshielding</dt><dd><p>The action of transferring a part of the <a class=\"reference internal\" href=\"#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a> to the public balance.</p></dd>", "a[href=\"#term-Best-block\"]": "<dt id=\"term-Best-block\">Best block</dt><dd><p>Last block on the <a class=\"reference internal\" href=\"#term-Best-chain\"><span class=\"xref std std-term\">best chain</span></a>.</p></dd>", "a[href=\"#term-Build\"]": "<dt id=\"term-Build\">Build</dt><dd><p>Command to take a smart contract module written in Rust and create a Wasm module that can be deployed on chain. The command is run from <a class=\"reference internal\" href=\"#term-cargo-concordium\"><span class=\"xref std std-term\">cargo-concordium</span></a>.</p></dd>", "a[href=\"#term-Best-chain\"]": "<dt id=\"term-Best-chain\">Best chain</dt><dd><p>The chain a <a class=\"reference internal\" href=\"#term-Baker\"><span class=\"xref std std-term\">baker</span></a> will build upon when making a new block. The best chain selection procedure is determined by the consensus protocol. In particular, the best chain has the most <a class=\"reference internal\" href=\"#term-Finalization\"><span class=\"xref std std-term\">finalized</span></a> blocks, and the most blocks after the last finalized block.</p></dd>", "a[href=\"#term-Identity-Issuer\"]": "<dt id=\"term-Identity-Issuer\">Identity Issuer</dt><dd><p>See <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>.</p></dd>", "a[href=\"#term-WebAssembly\"]": "<dt id=\"term-WebAssembly\">WebAssembly</dt><dd><p>WebAssembly (Wasm) defines a portable binary-code format and a corresponding text format for executable programs as well as software interfaces for facilitating interactions between such programs and their host environment. Smart contracts are deployed on chain as Wasm files.</p></dd>", "a[href=\"#term-Verifiable-presentation\"]": "<dt id=\"term-Verifiable-presentation\">Verifiable presentation</dt><dd><p>Data derived from one or more verifiable credentials and/or account credentials, issued by one or more issuers or identity providers, that is shared with a specific verifier. A verifiable presentation is tamper-evident and encoded in such a way that authorship of the data can be trusted after a process of cryptographic verification. It contains a link that points to the contract and holder ID. A presentation that contains a <strong>zero-knowledge proof</strong> might contain data that confirms the truth of a statement from verifiable credentials or account credentials, but the presentation does not reveal the actual attributes of verifiable credentials.</p></dd>", "a[href=\"#term-Chain\"]": "<dt id=\"term-Chain\">Chain</dt><dd><p>A sequence of <a class=\"reference internal\" href=\"#term-Block\"><span class=\"xref std std-term\">blocks</span></a>, starting from the <a class=\"reference internal\" href=\"#term-Genesis-Block\"><span class=\"xref std std-term\">genesis block</span></a>, in which each successive block points to the predecessor. There may be multiple valid chains, and the <a class=\"reference internal\" href=\"#term-Consensus\"><span class=\"xref std std-term\">consensus</span></a> protocol establishes which chain is authoritative.</p></dd>", "a[href=\"#term-Lottery-Power\"]": "<dt id=\"term-Lottery-Power\">Lottery Power</dt><dd><p>A baker\u2019s lottery power is its relative stake and is therefore proportional to the <a class=\"reference internal\" href=\"#term-Staked-Amount\"><span class=\"xref std std-term\">staked amount</span></a> of that baker. The lottery power is updated each <a class=\"reference internal\" href=\"#term-Epoch\"><span class=\"xref std std-term\">epoch</span></a>, and is based on the stake distribution at the end of the epoch before last. (This delay ensures that the stake distribution is determined before the randomness that fixes the bakers for the epoch: otherwise, stakeholders might redistribute their stake to luckier bakers, which undermines the security of the system.) <a class=\"reference internal\" href=\"#term-Delegator\"><span class=\"xref std std-term\">Delegation</span></a> affects the lottery power of the baker by increasing their stake, thus increasing the odds of that baker being chosen to bake a block.</p></dd>", "a[href=\"#term-Initial-Account\"]": "<dt id=\"term-Initial-Account\">Initial Account</dt><dd><p>An intial account is an account submitted to the chain by the identity provider during the process of requesting a new identity. The initial account can perform all of the same actions as a regular account, however the real-life identity of the initial-account owner is known by the identity provider who submitted it to the chain. In contrast, the real-life identity of the owner of a regular account can only be ascertained by anonymity revokers working in concert with the identity provider.</p><p>Initial accounts are only relevant for Desktop Wallet and Concordium Legacy Wallet.</p></dd>", "a[href=\"#term-Entrypoint\"]": "<dt id=\"term-Entrypoint\">Entrypoint</dt><dd><p>An invocable function of the smart contract that usually takes arguments. Each entrypoint has specific arguments. Entrypoints can be invoked to update the state of the smart contract as well as to view information about different parts of contract state.</p></dd>", "a[href=\"#term-Rust\"]": "<dt id=\"term-Rust\">Rust</dt><dd><p>The multi-paradigm, general purpose programming language used by Concordium smart contracts.</p></dd>", "a[href=\"#term-Shielding\"]": "<dt id=\"term-Shielding\">Shielding</dt><dd><p>The action of transferring a part of the public balance to the <a class=\"reference internal\" href=\"#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a>.</p></dd>", "a[href=\"#term-Transfer-with-schedule\"]": "<dt id=\"term-Transfer-with-schedule\">Transfer with schedule</dt><dd><p>A special kind of transfer of CCD that makes the CCD amount available to the receiver only in a limited way until a specified point in time. The point in time is specified as part of a transfer. The CCD are immediately owned by the receiver account, and the transfer cannot be revoked, but the receiver cannot spend the CCD until the specified time.</p></dd>", "a[href=\"#term-Issuer\"]": "<dt id=\"term-Issuer\">Issuer</dt><dd><p>Party that issues Web3 ID credentials to users. May also revoke Web3 ID credentials.</p></dd>", "a[href=\"#term-Schema\"]": "<dt id=\"term-Schema\">Schema</dt><dd><p>Used for smart contracts. A description of how to represent bytes in a more structured representation. It can be used by external tools when displaying the return value of a receive function and for specifying parameters using a structured representation, such as JSON. This makes it more human readable.</p></dd>", "a[href=\"#term-Transaction\"]": "<dt id=\"term-Transaction\">Transaction</dt><dd><p>An atomic operation that defines a change of state in the ledger, such as transferring funds from one account to another. A transaction typically has a sender account and a <a class=\"reference internal\" href=\"#term-Transaction-Sequence-Number\"><span class=\"xref std std-term\">transaction sequence number</span></a>, and incurs a fee. The sender account must sign the transaction to authorize it. (The exception to this is a credential deployment transaction that creates a new account, which does not have a sender account.)</p></dd>", "a[href=\"#term-cargo-concordium\"]": "<dt id=\"term-cargo-concordium\">cargo-concordium</dt><dd><p>An extension of Rust\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span></code> tool. It can be used for compiling and testing smart contracts, and enables features such as building contract schemas.</p></dd>", "a[href=\"#term-Credential-holder\"]": "<dt id=\"term-Credential-holder\">Credential holder</dt><dd><p>The user holding a credential. An account is owned by one or more credential holders.</p></dd>", "a[href=\"#term-Transfer-Memo\"]": "<dt id=\"term-Transfer-Memo\">Transfer Memo</dt><dd><p>Additional data that a user can provide when making a transfer, a shielded transfer or a transfer with schedule. The data will appear on chain as a bytestring. It is expected to be CBOR encoded and can therefore represent strings, numbers and JSON values, but this is not enforced.</p></dd>", "a[href=\"#term-Private-keys\"]": "<dt id=\"term-Private-keys\">Private keys</dt><dd><p>A random, secret string that is used in cryptography and cryptocurrency to prove ownership of an account and sign transactions to send, spend, delegate, and stake CCDs. A wallet consists of a set of public addresses and private keys. Anyone can deposit cryptocurrency in a public address, but funds cannot be removed from an address without the corresponding private key.</p></dd>", "a[href=\"#term-Concordium-client\"]": "<dt id=\"term-Concordium-client\">Concordium client</dt><dd><p>A command-line tool that ships with the Concordium distribution. It is designed as a low-level interface to the Concordium blockchain. It cannot be used to create identities, but it can <a class=\"reference internal\" href=\"../references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import accounts</span></a> exported from the mobile wallets. Once an account has been imported, Concordium client can be used to do CCD transfers from the account and other <a class=\"reference internal\" href=\"../references/transactions.html#transactions\"><span class=\"std std-ref\">transaction</span></a> types supported by the Concordium blockchain.</p></dd>", "a[href=\"#term-CCD\"]": "<dt id=\"term-CCD\">CCD</dt><dd><p>CCD is the currency of the Concordium blockchain. CCD can be used for multiple purposes:</p><p>The smallest subdivision of CCD is the \u00b5CCD (micro CCD), with 1 CCD = 1,000,000 \u00b5CCD. This means that CCD amounts are given with up to six decimal places of precision.</p></dd>", "a[href=\"#term-Range-proofs\"]": "<dt id=\"term-Range-proofs\">Range proofs</dt><dd><p>A range proof asks a user to prove that they meet an attribute within a range of values. For example, when renting a car, you might need to prove that you are between 25 and 65 years old to the car rental company. This could be constructed as a range proof.</p></dd>", "a[href=\"#term-Reveal\"]": "<dt id=\"term-Reveal\">Reveal</dt><dd><p>To reveal an attribute. This can be used in identity verification proof. When you reveal an attribute, you give the dApp or service that requested it your exact information, such as date of birth, or nationality. You should only do this if you have <strong>absolute trust</strong> in them, and if you are familiar with their data usage and protection procedures.</p></dd>", "a[href=\"#term-Shielded-amount\"]": "<dt id=\"term-Shielded-amount\">Shielded amount</dt><dd><p>An amount of <a class=\"reference internal\" href=\"#term-CCD\"><span class=\"xref std std-term\">CCD</span></a> that is encrypted with the public key of an account. Only the owner of the secret key can determine how many CCDs are contained in the encryption.</p></dd>", "a[href=\"#term-Identity\"]": "<dt id=\"term-Identity\">Identity</dt><dd><p>Before opening an account on the Concordium Platform, one\u2019s real-world identity must be verified and recorded by an <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>. A user\u2019s identity is anonymous on-chain, however this anonymity can be revoked and their real-world identity revealed in response to a valid request from a government authority.</p></dd>", "a[href=\"#term-Zero-knowledge-proof\"]": "<dt id=\"term-Zero-knowledge-proof\">Zero-knowledge proof</dt><dd><p>A method by which a user (the prover) can prove to another party (the verifier) that the user meets a requirement without revealing anything beyond that. Zero knowledge proofs generated by the wallet are non-interactive. They are verifiable forever in the future without further prover interaction.</p></dd>", "a[href=\"#term-Shielded-balance\"]": "<dt id=\"term-Shielded-balance\">Shielded balance</dt><dd><p>The part of the balance of an <a class=\"reference internal\" href=\"#term-Account\"><span class=\"xref std std-term\">account</span></a> that only the owner of the account can see. This is achieved by encrypting transfers to an account with the account\u2019s <a class=\"reference internal\" href=\"#term-Encryption-key\"><span class=\"xref std std-term\">encryption key</span></a>. Every participant of the Concordium network can see the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Ciphertext\">ciphertexts</a> of all the transfers, however they provide no information on how many CCDs were transferred. The receiver of the transfer can use their secret key to decrypt the ciphertexts, and seeing how many CCDs they have received.</p><p>For technical reasons the shielded balance of the account consists of two parts, the \u201cself balance\u201d and the \u201cincoming shielded amounts\u201d.</p></dd>", "a[href=\"#term-Decryption-key\"]": "<dt id=\"term-Decryption-key\">Decryption key</dt><dd><p>Dual to <a class=\"reference internal\" href=\"#term-Encryption-key\"><span class=\"xref std std-term\">encryption key</span></a>. In contrast to the encryption key, which is public, this key is only known to the account holder.</p></dd>", "a[href=\"#term-Membership-proof\"]": "<dt id=\"term-Membership-proof\">Membership proof</dt><dd><p>A proof to determine if an attribute of a user\u2019s identity is included in a given set, for example, lives in the EU. Can also be a <a class=\"reference internal\" href=\"#term-Non-membership-proof\"><span class=\"xref std std-term\">non-membership proof</span></a>.</p></dd>", "a[href=\"#term-Timeout-certificate\"]": "<dt id=\"term-Timeout-certificate\">Timeout certificate</dt><dd><p>If the leader fails to produce a block in the round, or not enough signatures were gathered for a quorum certificate, then the finalizers will instead send timeout messages, which are aggregated to form a timeout certificate. A block always contains a quorum certificate as it serves as a reference to the parent block. The block might contain a timeout certificate if the previous round timed out. A quorum certificate or a timeout certificate ensures that the protocol progresses. When a node sees a valid quorum certificate or timeout certificate it progresses to the next round.</p></dd>", "a[href=\"#term-User-identity-certificate\"]": "<dt id=\"term-User-identity-certificate\">User identity certificate</dt><dd><p>Issued to the individual or entity once their real-world identity has been verified and recorded by an Identity Provider. You cannot use the Concordium Platform without a User Identity Certificate.\nThe user identity certificate includes attributes such as name, age, and nationality. When the Identity Provider has validated the attributes, it issues a user identity certificate, which is basically the Identity Provider\u2019s signature over some cryptographic keys of the user and the validated personal attributes. Unlike usual public key certificates such as X.509 certificates, the user identity certificate is private to the user; it is not submitted to the chain. Note that the Identity Provider also stores some information, but this is only used for a possible, subsequent investigation of the user\u2019s activities (i.e. anonymity revocation). The Identity Provider is not involved in any subsequent use of the user identity certificate. The user identity certificate is signed using the Pointcheval-Sanders signature scheme.</p></dd>", "a[href=\"#term-Catch-up\"]": "<dt id=\"term-Catch-up\">Catch-up</dt><dd><p>The mechanism by which a node receive messages that may have been missed, for instance because the node was offline when it was sent.</p></dd>", "a[href=\"#term-Identity-Object\"]": "<dt id=\"term-Identity-Object\">Identity Object</dt><dd><p>An object issued by the <a class=\"reference internal\" href=\"#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> to the user which allows the user to prove to third parties that their real life identity has been verified by a trusted third party.</p></dd>", "a[href=\"#term-Passive-delegation\"]": "<dt id=\"term-Passive-delegation\">Passive delegation</dt><dd><p>A form of delegation where a delegator\u2019s stake is effectively distributed among all baker pools. It is not associated with a specific baker. Delegators earn lower rewards when delegating to passive delegation than when delegating to a specific baker pool. However, passive delegation is not affected by poor performance of a single baker.</p></dd>", "a[href=\"#term-Testnet\"]": "<dt id=\"term-Testnet\">Testnet</dt><dd><p>A test network run by Concordium to test its protocols and software. There can be several test networks in existence at the same time. All the features are tested on the testnet before they are released on the <a class=\"reference internal\" href=\"#term-Mainnet\"><span class=\"xref std std-term\">mainnet</span></a>.</p></dd>", "a[href=\"#term-Cryptographic-proof\"]": "<dt id=\"term-Cryptographic-proof\">Cryptographic proof</dt><dd><p>A method by which one party (the prover) can prove to another party (the verifier) that a given statement is true while the prover avoids conveying any additional information apart from the fact that the statement is indeed true. This is known as a <a class=\"reference internal\" href=\"#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">zero-knowledge proof</span></a>.</p></dd>", "a[href=\"#term-Verifier\"]": "<dt id=\"term-Verifier\">Verifier</dt><dd><p>Party that checks users\u2019 <a class=\"reference internal\" href=\"#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a>.</p></dd>", "a[href=\"#term-Endpoint\"]": "<dt id=\"term-Endpoint\">Endpoint</dt><dd><p>A point at which an API \u2013 the code that allows two software programs to communicate with each other \u2013 connects with the software program. APIs work by sending requests for information from a web application or web server and receiving a response.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
