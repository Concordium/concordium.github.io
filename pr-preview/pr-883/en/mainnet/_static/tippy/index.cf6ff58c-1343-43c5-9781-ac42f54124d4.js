selector_to_html = {"a[href=\"smart-contracts/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p><p>It is a good idea to read the <a class=\"reference internal\" href=\"smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"smart-contracts/tutorials/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tutorials<a class=\"headerlink\" href=\"#tutorials\" title=\"Permalink to this headline\">#</a></h1><p>You can go through a number of different tutorials to sharpen your skills as\na dApp (decentralized application) developer on the Concordium blockchain.</p><p>In <a class=\"reference internal\" href=\"smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the developer enviroment</span></a> you learn how to set up the development enviroment for working with smart contracts.</p>", "a[href=\"smart-contracts-v0/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"smart-contracts/onboarding-guide-solana-developers/overview.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">#</a></h1><p>This overview outlines the main differences of account models and smart contract functionality between Solana and Concordium.</p>", "a[href=\"smart-contracts-v0/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"net/installation/verification-instructions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Verification instructions<a class=\"headerlink\" href=\"#verification-instructions\" title=\"Permalink to this headline\">#</a></h1><p>To find instructions on how to verify the integrity of the file you have downloaded, navigate to the respective section that outlines the steps needed for that specific file.</p>", "a[href=\"net/guides/overview-shared-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shared accounts with multiple credentials in Desktop Wallet<a class=\"headerlink\" href=\"#shared-accounts-with-multiple-credentials-in-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>In the Desktop Wallet, you have the option of creating shared accounts, also known as multi-signature accounts. This is useful, for example, if your organization wants to allow multiple people to manage an account, or if you\u2019re part of a group of people who want to share an account. In these cases, more credentials must be added to an account.</p>", "a[href=\"smart-contracts-v0/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Permalink to this headline\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p>", "a[href=\"net/guides/address-book.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Manage address book<a class=\"headerlink\" href=\"#manage-address-book\" title=\"Permalink to this headline\">#</a></h1><p>The address book helps you select a recipient quickly for transactions.</p>", "a[href=\"net/guides/deciding-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deciding between the wallets<a class=\"headerlink\" href=\"#deciding-between-the-wallets\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"smart-contracts/tutorials/smartContractUpgrade/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrading smart contracts on Concordium<a class=\"headerlink\" href=\"#upgrading-smart-contracts-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to upgrade a smart contract natively. You will explore how to\nmigrate the smart contract state from your old contract to the upgraded contract.</p><p>An important desired feature of blockchains is that smart contracts, once deployed, are immutable by default.\nHistory has shown that development teams are looking for mutable smart contract options as well if they want to have\nthe capabilities to fix bugs, or to have the option to add additional\nfeatures to their smart contract protocol in the future.\nOther blockchain require complex <code class=\"docutils literal notranslate\"><span class=\"pre\">proxy-implementation</span></code> patterns to achieve upgradability on the by default immutable smart contracts.\nConcordium makes this process easier by exposing an upgrade mechanism to natively upgrade the smart contract.\nUpgradability is an opt-in on Concordium, meaning you can continue to write immutable contracts on Concordium if you prefer to do so.</p>", "a[href=\"smart-contracts/best-practices/development.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Development best practices<a class=\"headerlink\" href=\"#development-best-practices\" title=\"Permalink to this headline\">#</a></h1><p>This document provides guidelines for developing smart contracts.\nIt starts with some general thoughts about smart contract development and then gives more details about writing smart contracts in Rust for Concordium.</p>", "a[href=\"smart-contracts/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"net/guides/recovery.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Backup and recovery<a class=\"headerlink\" href=\"#backup-and-recovery\" title=\"Permalink to this headline\">#</a></h1><p>It can be necessary to recover your wallet, for example if you get a new computer or mobile device. It is important to know how you can recover your wallet on a device if necessary. There are differences between what the wallets require for recovery.</p>", "a[href=\"net/mobile-wallet-gen2/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile FAQ<a class=\"headerlink\" href=\"#mw-gen2-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"net/resources/bw-licenses.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web Third Party Licenses<a class=\"headerlink\" href=\"#bw-third-party-licenses\" title=\"Permalink to this headline\">#</a></h1><p>The following sets forth attribution notices for third party software that may be contained in portions of the Concordium Browser Wallet product.</p>", "a[href=\"net/guides/low-code-nft-marketplace/marketplace.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low code NFT marketplace<a class=\"headerlink\" href=\"#low-code-nft-marketplace\" title=\"Permalink to this headline\">#</a></h1><p>To make it quicker and easier to develop and run an NFT marketplace, the Low-Code NFT Minting tool and marketplace have been created. It includes built-in smart contracts, a template user interface, and various functionalities, including the following:</p>", "a[href=\"smart-contracts-v0/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"net/guides/transaction-report.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a transaction report<a class=\"headerlink\" href=\"#create-a-transaction-report\" title=\"Permalink to this headline\">#</a></h1><p>A transaction report can be useful when you need to know transaction details, such as for tax reporting purposes.</p>", "a[href=\"smart-contracts/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p>", "a[href=\"smart-contracts/guides/local-simulate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Permalink to this headline\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"smart-contracts/tutorials/nft-marketplace/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">NFT marketplace smart contract tutorial<a class=\"headerlink\" href=\"#nft-marketplace-smart-contract-tutorial\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial you will create an NFT Marketplace. The <a class=\"reference external\" href=\"https://github.com/chainorders/concordium-nft-tutorials\">contract</a> provides some functionalities, such as minting semi-fungible, and non-fungible tokens, buying and selling NFTs with fixed prices, setting commissions for your marketplace, and setting royalties for your NFTs to get some fees from secondary sales in this marketplace. Before you start, it is important to note that this is not a beginner-level tutorial; it does not cover the basics like downloads, node configurations, wallet setup and export, and so on.</p><p>This tutorial will be the first part of the Marketplace. There will be no UI interaction. You will invoke the functions with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. In the end, while implementing a dApp, what you have to do is implement a client that connects your backend with the blockchain. <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is that client and does that. In the second part which will be released soon, you will implement this marketplace from scratch with an empty React template.</p>", "a[href=\"smart-contracts/tutorials/eSealing/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">An eSealing dApp<a class=\"headerlink\" href=\"#an-esealing-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed eSealing smart contract on testnet and explore the associated website.</p>", "a[href=\"net/browser-wallet/connect-app.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Connect dApps to wallets<a class=\"headerlink\" href=\"#connect-dapps-to-wallets\" title=\"Permalink to this headline\">#</a></h1><p>You can connect the Concordium Wallet for Web and Concordium Wallet for Mobile to a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Decentralized_application\">dApp</a> that has a front end interface so that you can pay for services. You can initiate the request from within the Concordium Wallet for Web or Concordium Wallet for Mobile, or the dApp can initiate a connection request that you must confirm. Connection can be made by either scanning a QR code or from a link to the dApp service.</p>", "a[href=\"net/guides/tokens.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tokens in the wallet<a class=\"headerlink\" href=\"#tokens-in-the-wallet\" title=\"Permalink to this headline\">#</a></h1><p>You can add, inspect, and send tokens in the Concordium Wallet for Web and Concordium Wallet for Mobile for Android devices.</p>", "a[href=\"net/installation/downloads-testnet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads - Testnet<a class=\"headerlink\" href=\"#downloads-testnet\" title=\"Permalink to this headline\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Testnet. You can also find out about the hardware requirements for running a node.</p>", "a[href=\"net/resources/ccd-scan.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan<a class=\"headerlink\" href=\"#ccdscan\" title=\"Permalink to this headline\">#</a></h1><p><a class=\"reference external\" href=\"https://ccdscan.io\">CCDScan</a> is a Concordium blockchain explorer. CCDScan effectively serves as a search engine for data on the Concordium blockchain and enables users to search for, explore, and analyze relevant on-chain data. CCDScan includes functionality to scan and gain insights into Concordium blockchain data, such as:</p>", "a[href=\"net/guides/learn-about-concordium.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Learn about Concordium<a class=\"headerlink\" href=\"#learn-about-concordium\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium blockchain is a compliance ready blockchain backed by science that enables private and public transactions. It offers high throughput, fast transactions, and predictable fees, allowing businesses, developers, and traders to harness blockchain\u2019s true power and potential.</p><p>Before you start using the Concordium blockchain, it\u2019s a good idea to understand some basic concepts about our unique blockchain.</p>", "a[href=\"smart-contracts-v0/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"smart-contracts/guides/integration-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.\nThe library allows you to test individual contracts in isolation, but, notably, also interactions between multiple contracts.\nWhen running the tests, they are executed locally on the exact contract code that is deployed on the chain, and using the same execution engine that the nodes use.\nV0 smart contracts are not supported, but all V1 smart contract features are, including upgrades, and it is also possible to see the energy usage of your contracts.\nThis allows you to refactor and optimize your contracts for speed and efficiency with greater ease and confidence.</p><p>The high-level process of adding integration tests to your existing smart contract project is as follows:</p>", "a[href=\"net/desktop-wallet/transaction-log-filter.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Apply a transaction log filter in the Desktop Wallet<a class=\"headerlink\" href=\"#apply-a-transaction-log-filter-in-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>You can specify which transactions to show in the transaction log.</p>", "a[href=\"smart-contracts-v0/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p>", "a[href=\"net/web3-id/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identity on Concordium<a class=\"headerlink\" href=\"#identity-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>Concordium\u2019s identity layer is built into the protocol. Every account on the chain has one or more credentials issued by specially sanctioned identity providers who are expected to be able to provide full anonymity revocation. ID 2.0 made it possible to use these identities off-chain: wallets allow using identities to prove properties about the holder, such as their nationality or age. These are known as <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a>.</p>", "a[href=\"smart-contracts-v0/guides/unit-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to write unit tests for a smart contract written in\nRust.\nFor testing a smart contract Wasm module, see <a class=\"reference internal\" href=\"smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"smart-contracts/guides/contract-testing-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract testing guides<a class=\"headerlink\" href=\"#contract-testing-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract testing guides help you get started testing smart contracts. Here you have guides to help you set up and write unit and integrations tests.</p>", "a[href=\"net/guides/shield-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shield and unshield CCD on an account<a class=\"headerlink\" href=\"#shield-and-unshield-ccd-on-an-account\" title=\"Permalink to this headline\">#</a></h1><p>Accounts on the Concordium blockchain have two balances, the <strong>Balance</strong> and the <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a>. You can move funds between these\ntwo balances using either a <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shield CCD transaction</span></a> or an <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshield CCD transaction</span></a>.</p><p>When you shield an amount on an account, only the account\u2019s credential holder can see the shielded amounts. Other participants in the network will be able to see the shielding transaction, but can\u2019t see the shielded balance or any shielded transfers going in or out of the account. You can\u2019t make shielded transfers on multi-signature accounts, only on accounts with a single credential.</p>", "a[href=\"smart-contracts/tutorials/nft-minting/upload-nft.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upload the NFT<a class=\"headerlink\" href=\"#upload-the-nft\" title=\"Permalink to this headline\">#</a></h1><p>Now you need to upload your asset and give it metadata. For this tutorial you will use the InterPlanetary File System (IPFS).</p>", "a[href=\"net/nodes/node-requirements.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on Concordium<a class=\"headerlink\" href=\"#run-a-node-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>When you run a node on the Concordium blockchain, you are participating in the Concordium blockchain by validating transactions.</p><p>Nodes are required for most things, from using a Concordium wallet to baking. You can choose to run a node yourself or you can have a third-party provider run a node for you. If you choose to run the node yourself, you can\nchoose from four different platforms to run your node: Ubuntu, Windows, MacOS, or Docker/Linux.</p>", "a[href=\"smart-contracts/onboarding-guide-solana-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQs<a class=\"headerlink\" href=\"#faqs\" title=\"Permalink to this headline\">#</a></h1><p>The following Frequently Asked Questions about Concordium focuses on helping developers with a Solana background to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"smart-contracts/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"smart-contracts/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"net/desktop-wallet/single-sign-schedule.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer CCD with a schedule in Desktop Wallet<a class=\"headerlink\" href=\"#transfer-ccd-with-a-schedule-in-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes how you can send CCD from an account with only one signer with a schedule. If you want to learn about sending CCD with a schedule when more co-signers are required, see <a class=\"reference internal\" href=\"net/guides/multisig-transfer.html#create-multisig-scheduled\"><span class=\"std std-ref\">Create a scheduled multi-signature CCD transfer in the Desktop Wallet</span></a>.</p><p>You can create two types of release schedules: a regular interval\nschedule and an explicit schedule.</p>", "a[href=\"smart-contracts-v0/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"smart-contracts-v0/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p>", "a[href=\"smart-contracts/guides/json-params.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Work with the JSON parameters<a class=\"headerlink\" href=\"#work-with-the-json-parameters\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to interact with the CIS-2 smart contract functions by providing input JSON parameters. This guide uses the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi smart contract</a> as a starting point, and then continues with a couple of custom input types.</p><p>A smart contract implementing CIS-2 must export the following functions: <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code>. This topic briefly describes what the required functions do and how to interact with them using JSON parameters one by one.</p>", "a[href=\"net/installation/downloads.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads<a class=\"headerlink\" href=\"#downloads\" title=\"Permalink to this headline\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Mainnet.</p>", "a[href=\"smart-contracts-v0/sc-v0-rollup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">V0 Smart Contracts<a class=\"headerlink\" href=\"#v0-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>V0 smart contracts can still be used on the Concordium blockchain, however, there is no development on tooling for v0 smart contracts and the smart contract libraries Concordium provides do not support v0 smart contracts.</p>", "a[href=\"smart-contracts-v0/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Permalink to this headline\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"smart-contracts/guides/upgradeable-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a contract upgradeable<a class=\"headerlink\" href=\"#make-a-contract-upgradeable\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to make a Rust smart contract upgradeable.</p><p>Immutable smart contracts come with the drawback that bugs cannot be fixed, new features and cost optimizations cannot be implemented.\nFor some decentralized applications this is a problem and these need some way to upgrade the smart contract code.</p>", "a[href=\"net/release-notes/release-notes-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Release notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"net/guides/export-key.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Export a private key<a class=\"headerlink\" href=\"#export-a-private-key\" title=\"Permalink to this headline\">#</a></h1><p>In certain situations, such as testing interaction with smart contracts, you may need to export your private key for an account in your wallet. The file format of the key export is specifically for <a class=\"reference internal\" href=\"net/references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import</span></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. If you just copy the key to the clipboard, it\u2019s just the key itself and can be used for other purposes.</p>", "a[href=\"smart-contracts/tutorials/sft-minting/setup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Permalink to this headline\">#</a></h1><p>If you have done the NFT minting tutorial, you will already have most of the necessary setup, including the Concordium Wallet for Web and necessary tools for authoring smart contracts. Otherwise, see <a class=\"reference internal\" href=\"smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Set up the development environment</span></a>. You need the following tools:</p>", "a[href=\"smart-contracts-v0/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to inspect a smart contract instance.\nInspecting an instance will show you its name, owner, module reference, balance,\nstate and receive-functions:</p>", "a[href=\"net/resources/dw-licenses.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Desktop Wallet Third Party Licenses<a class=\"headerlink\" href=\"#concordium-desktop-wallet-third-party-licenses\" title=\"Permalink to this headline\">#</a></h1><p>The following sets forth attribution notices for third party software that may be contained in portions of the Concordium Desktop Wallet product.</p>", "a[href=\"smart-contracts-v0/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"smart-contracts-v0/guides/local-simulate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Permalink to this headline\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"net/references/concordium-client.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium distribution ships with a CLI tool named <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>.</p><p>By default <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> performs its queries and sends transactions\nthrough a <a class=\"reference internal\" href=\"net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">local node</span></a>. If the node runs on a different machine\nor in a custom setup, the options <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-ip</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-port</span></code> can be used\nto set the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IP_address\">IP address</a> and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> where the node is accessible. These\nflags are supported by all <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> commands. Note that as of version\n5.1.1, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> must be the port where the GRPC V2 interface is enabled, in contrast to previous versions which required the port number of the V1 API of the Concordium node.</p>", "a[href=\"smart-contracts/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"smart-contracts-v0/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Permalink to this headline\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p>", "a[href=\"net/guides/gallery/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The gallery with ID authentication<a class=\"headerlink\" href=\"#the-gallery-with-id-authentication\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you will learn how to write a gallery which requires the user to prove something using their identity to access the images on the site.\nThe gallery consists of a basic React web front end example that displays the images and communicates with a wallet and a Rust backend that can verify the proofs given by the wallet.</p><p>In the <a class=\"reference internal\" href=\"net/guides/gallery/gallery-backend.html#gallery-backend\"><span class=\"std std-ref\">first part</span></a>, you will learn how the backend works.</p>", "a[href=\"smart-contracts-v0/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"smart-contracts/best-practices/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Best practices<a class=\"headerlink\" href=\"#best-practices\" title=\"Permalink to this headline\">#</a></h1><p>Here, you can find best practices for smart contract development, audit, information about common pitfalls and security vulnerabilities, and how to avoid them.</p>", "a[href=\"net/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">index<a class=\"headerlink\" href=\"#index\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"smart-contracts-v0/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"smart-contracts/tutorials/nft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint an NFT<a class=\"headerlink\" href=\"#mint-an-nft\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint an NFT on Concordium blockchain. First you will learn the basics to set up your development environment. Note that in this tutorial most of the commands are for UNIX-like systems and will not work on Windows.</p><p>All development is completed using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and includes the following examples:</p>", "a[href=\"net/resources/terms-and-conditions-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Terms and Conditions for Concordium Legacy Wallet (previously Concordium Mobile Wallet)<a class=\"headerlink\" href=\"#terms-and-conditions-for-mw-gen1-previously-concordium-mobile-wallet\" title=\"Permalink to this headline\">#</a></h1><p>Effective from September 2, 2022</p>", "a[href=\"smart-contracts/references/crypto-primitives.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Cryptographic primitives<a class=\"headerlink\" href=\"#cryptographic-primitives\" title=\"Permalink to this headline\">#</a></h1><p>V1 smart contracts natively support a number of common cryptographic primitives.\nCompared to implementing the same functionality in the smart contract, using primitives is substantially cheaper.\nAt the same time, smart contract developers benefit from using a single, high-quality implementation of the primitives provided by the chain.</p><p>Since all contract inputs, as well as the contract state, on the Concordium blockchain are public, it is only reasonable to have primitives that take public inputs.\nThe currently supported primitives are:</p>", "a[href=\"net/browser-wallet/browser-wallet-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web FAQ<a class=\"headerlink\" href=\"#bw-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"net/resources/terms-and-conditions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Terms and conditions<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"smart-contracts-v0/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"net/guides/wallet-faqs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Wallet FAQs<a class=\"headerlink\" href=\"#wallet-faqs\" title=\"Permalink to this headline\">#</a></h1><p>The following wallet FAQs can help you decide which wallet is best for you.</p>", "a[href=\"smart-contracts/guides/unit-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Permalink to this headline\">#</a></h1><p>This guide describes how to write unit tests for a smart contract written in\nRust.\nFor information about how to test a smart contract Wasm module, see <a class=\"reference internal\" href=\"smart-contracts/guides/local-simulate.html#local-simulate\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"smart-contracts/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"smart-contracts/onboarding-guide-ethereum-developers/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Onboarding<a class=\"headerlink\" href=\"#onboarding\" title=\"Permalink to this headline\">#</a></h1><p>A number of guides exist to help Ethereum developers to get started on the Concordium chain.</p>", "a[href=\"smart-contracts/tutorials/nft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Permalink to this headline\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>", "a[href=\"smart-contracts-v0/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"smart-contracts/onboarding-guide-ethereum-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQs<a class=\"headerlink\" href=\"#faqs\" title=\"Permalink to this headline\">#</a></h1><p>The following Frequently Asked Questions about Concordium\nfocuses on helping developers with an Ethereum/solidity\nbackground to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"net/guides/run-local-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a local chain<a class=\"headerlink\" href=\"#run-a-local-chain\" title=\"Permalink to this headline\">#</a></h1><p>This guide details how to run your own instance of the Concordium blockchain. This is useful when developing and testing smart contracts. Running your own chain also lets you control various aspects, such as the genesis parameters, anonymity revokers, identity providers, and foundation accounts.</p><p>The chain is run by a network of baker nodes that bake and finalize blocks. In the following minimal example you will set up a network comprised of a single baker node that runs <em>locally</em> on your system and <em>does not connect to mainnet or testnet</em>. Note, however, that the concepts demonstrated here equally apply to any number of baker nodes configured in a LAN or WAN setting.</p>", "a[href=\"smart-contracts-v0/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"net/resources/terms-and-conditions-concordia.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">About Concordia<a class=\"headerlink\" href=\"#about-concordia\" title=\"Permalink to this headline\">#</a></h1><p>Concordia is a chat bot, currently available for Discord and Telegram, with extensions for other platforms in the future.</p><p>Concordia is able to talk to an issuer service that is able to issue proof of ownerships of your Telegram and Discord profiles. These proofs are then sent to your Con\u00f1cordium Wallet as Verified Credentials.</p>", "a[href=\"net/mobile-wallet/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Legacy Wallet<a class=\"headerlink\" href=\"#set-up-the-mw-gen1\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Legacy Wallet is a digital <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"net/concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"net/references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"smart-contracts/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a smart contract project<a class=\"headerlink\" href=\"#setting-up-a-smart-contract-project\" title=\"Permalink to this headline\">#</a></h1><p>This guide documents two different options (<em>from a template</em> or <em>from scratch</em>) to create a new Concordium smart contract project.\nThe <em>from a template</em> option is available for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> version 2.2.0 or greater. It provides you with some\nsmart contract templates. Choose the template that best fits your project scope.\nThe <em>from scratch</em> option guides you through the process when you want to start a new project without any boilerplate code.</p>", "a[href=\"smart-contracts/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Permalink to this headline\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"smart-contracts/tutorials/voting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The Voting dApp<a class=\"headerlink\" href=\"#the-voting-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed voting dApp on testnet. The voting dApp example is intended to show how you can use Concordium to conduct an election using the Concordium Wallet for Web to enable users to cast their vote in your election.\nYou are going to write a basic web front-end example that can read from and write to the deployed smart contract on testnet.</p><p>If you want to try this example before starting the tutorial:</p>", "a[href=\"smart-contracts/tutorials/fungible-tokens/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint fungible tokens<a class=\"headerlink\" href=\"#mint-fungible-tokens\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint and burn fungible tokens on the Concordium blockchain, send them to multiple accounts, and test the balances. Before starting, you need to understand the <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html\">CIS-2</a> standard.</p>", "a[href=\"smart-contracts/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"smart-contracts/tutorials/sft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modifications<a class=\"headerlink\" href=\"#smart-contract-modifications\" title=\"Permalink to this headline\">#</a></h1><p>You are using the example contract from Concordium\u2019s examples and it\u2019s ready to use. If you want to use it as is you can do it for your project. But in this tutorial you will add a couple of things and update some functions to give more flexibility.</p><p>First, you will add a new struct called <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadata</span></code>. It needs to implement the <code class=\"docutils literal notranslate\"><span class=\"pre\">Serialize</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code> traits for the sake of deserialization of the contract you need it. For those who are familiar with the Ethereum ecosystem it\u2019s like the ABI.</p>", "a[href=\"smart-contracts/guides/fallback-entrypoints.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Fallback entrypoints<a class=\"headerlink\" href=\"#fallback-entrypoints\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to use fallback entrypoints, which can be useful\nwhen creating a proxy for your smart contract.</p>", "a[href=\"smart-contracts/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to inspect a smart contract instance.\nInspecting an instance shows you its name, owner, module reference, balance,\nand receive-functions:</p>", "a[href=\"smart-contracts/guides/invoke-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke a smart contract instance<a class=\"headerlink\" href=\"#invoke-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide explains how to invoke a smart contract instance, which\nmeans triggering a receive function and viewing its return value. Invoking an\ninstance is <em>not a transaction</em> and it <em>does not change the state of a contract</em>.\nInvoking can be useful to either view information about the instance or to test\na receive method before running an update. Because invoking is not a transaction, there is no fee to run <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.\nThe view functions are regular receive functions that return information about\nthe contract, ideally with schemas on the return values.</p><p>There is no limit to the number of logs per invocation (apart from energy).</p>", "a[href=\"net/guides/low-code-nft-marketplace/minting-tool.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low-code NFT minting tool<a class=\"headerlink\" href=\"#low-code-nft-minting-tool\" title=\"Permalink to this headline\">#</a></h1><p>For non-developers, Concordium has developed a minting tool to mint your NFT collections without minimal development effort. With this super simple dApp you will be able to:</p>", "a[href=\"smart-contracts/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Permalink to this headline\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"smart-contracts/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Permalink to this headline\">#</a></h1><p>A <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Smart-contract\"><span class=\"xref std std-term\">smart contract</span></a> is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"smart-contracts/tutorials/nft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Intialize, build, and deploy the smart contract<a class=\"headerlink\" href=\"#intialize-build-and-deploy-the-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>Now you are ready to build your smart contract. You\u2019ll be using the <code class=\"docutils literal notranslate\"><span class=\"pre\">cis2-nft</span></code> contract template provided by Concordium.</p>", "a[href=\"smart-contracts/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"smart-contracts/guides/local-simulate.html#local-simulate\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"net/resources/third-party-licenses.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Third Party Licenses<a class=\"headerlink\" href=\"#third-party-licenses\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium software includes third-party components that are distributed in accordance with their licenses, set out below.</p>", "a[href=\"net/resources/ar-idp-contact.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contact Anonymity Revokers and Identity Providers<a class=\"headerlink\" href=\"#contact-anonymity-revokers-and-identity-providers\" title=\"Permalink to this headline\">#</a></h1><p>To begin the process of anonymity revocation, you must contact the anonymity revoker and identity provider associated with the account with appropriate documentation. To learn about this process, see <a class=\"reference internal\" href=\"net/concepts/id-accounts.html#revoke-anomity\"><span class=\"std std-ref\">anonymity revocation</span></a>.</p>", "a[href=\"net/guides/send-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Send CCD<a class=\"headerlink\" href=\"#send-ccd\" title=\"Permalink to this headline\">#</a></h1><p>This topic describes how you can send CCD from an account when only one participant is required to sign the transfer.</p>", "a[href=\"smart-contracts/guides/quick-start.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts quick start guide<a class=\"headerlink\" href=\"#concordium-smart-contracts-quick-start-guide\" title=\"Permalink to this headline\">#</a></h1><p>This guide is intended to be used by experienced developers who want to get up and running quickly with a smart contract deployed on chain with which they can interact.</p><p>Before starting, it is a good idea to read the <a class=\"reference internal\" href=\"smart-contracts/best-practices/index.html#sc-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"smart-contracts/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"smart-contracts-v0/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Permalink to this headline\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"net/guides/low-code-nft-marketplace/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium low-code NFT framework<a class=\"headerlink\" href=\"#concordium-low-code-nft-framework\" title=\"Permalink to this headline\">#</a></h1><p>Concordium provides developer tools to its community for developing high-level dApps. In order to help our community, Concordium has implemented this Low-Code Minting Tool and Marketplace to lower the bar for getting started on Concordium.</p><p>Concordium has collected feedback and done lots of market research and product experiments to understand the real pains when developing on Concordium. One outcome of those findings is the low-code NFT framework. The Low-Code NFT Minting tool provides a public resource to follow as an example and a white labeling solution for NFT project owners.</p>", "a[href=\"smart-contracts/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"net/mobile-wallet/change-passcode-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update your passcode and biometric settings<a class=\"headerlink\" href=\"#update-your-passcode-and-biometric-settings\" title=\"Permalink to this headline\">#</a></h1><p>If you want to change your passcode or enable/disable your biometrics (on a mobile device), following the directions below for your wallet.</p>", "a[href=\"net/mobile-wallet-gen2/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#set-up-the-mw-gen2\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Wallet for Mobile is a digital <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"net/concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"net/references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"smart-contracts/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"net/guides/create-account.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an account<a class=\"headerlink\" href=\"#create-an-account\" title=\"Permalink to this headline\">#</a></h1><p>If you are using Concordium Legacy Wallet or Desktop Wallet, when you created your <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>, it came with an <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Initial-Account\"><span class=\"xref std std-term\">initial account</span></a>. The initial account is a special account that the <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> submits\nto the chain. When you already have an identity, you can create more <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> with that identity yourself.</p><p>If you are using Concordium Wallet for Web or Concordium Wallet for Mobile, no initial account was created when you created your <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>. You create all <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> related to your identities.</p>", "a[href=\"net/guides/developer-page.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developer resources<a class=\"headerlink\" href=\"#developer-resources\" title=\"Permalink to this headline\">#</a></h1><p>The following developer resources help you get started developing on the Concordium network.</p>", "a[href=\"smart-contracts/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"smart-contracts/tutorials/sft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer semi-fungible token<a class=\"headerlink\" href=\"#mint-and-transfer-semi-fungible-token\" title=\"Permalink to this headline\">#</a></h1><p>You have a contract instance which means you have an empty state and are ready to mint some tokens! You will be using <a class=\"reference external\" href=\"https://gateway.pinata.cloud/ipfs/QmZ3939dLLFzvYZjFnkdqACe2n9TQA8Rx4efbjaYTXteeu\">this metadata</a> and minting 100 of <a class=\"reference external\" href=\"https://ipfs.io/ipfs/QmNqv1QnZw6j6N3ueqCA6VotciHUopRAvZqY8JBnheoLk6\">this cool image</a>.</p><p>Create a folder called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-artifacts</span></code> and create a JSON file called <code class=\"docutils literal notranslate\"><span class=\"pre\">mint-params.json</span></code> in the folder to execute these steps properly. In the JSON file, you are going to give the minting parameters to the MintParams which you worked on a little in the beginning.</p>", "a[href=\"net/resources/third-party-notices.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Third-party Software and Hardware Notices<a class=\"headerlink\" href=\"#third-party-software-and-hardware-notices\" title=\"Permalink to this headline\">#</a></h1><p>Required notices for open source or other separately licensed software and hardware products or components referenced by or distributed in this product are identified in the non-exhaustive list below.</p>", "a[href=\"net/browser-wallet/setup-browser-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Web<a class=\"headerlink\" href=\"#set-up-the-bw\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Wallet for Web is a digital wallet that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions, such as sending CCD.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"net/concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"net/references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"smart-contracts-v0/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"smart-contracts/tutorials/sponsoredTransactions/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">A Sponsored Transactions dApp<a class=\"headerlink\" href=\"#a-sponsored-transactions-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to implement a sponsored transaction mechanism in a smart contract, how to sign messages in a wallet and verify the signature in the smart contract,\nhow to send a transaction from a back-end server to the blockchain, and how to connect your Concordium Wallet for Mobile via walletConnect to the frontend.</p><p>The dApp consists of three components that you will explore as part of this tutorial:</p>", "a[href=\"net/guides/how-to-earn.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">How to earn with Concordium<a class=\"headerlink\" href=\"#how-to-earn-with-concordium\" title=\"Permalink to this headline\">#</a></h1><p>To earn more CCDs, you can either delegate or bake. There are advantages and disadvantages to both options.</p>", "a[href=\"net/guides/create-identity.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an identity<a class=\"headerlink\" href=\"#create-an-identity\" title=\"Permalink to this headline\">#</a></h1><p>Before you can start using a Wallet and submit transactions to the blockchain, you need an identity issued by an identity provider, and, in the case of Concordium Legacy Wallet and Desktop Wallet, an initial account issued by the identity provider. The identity provider submits the initial account to the chain and knows the identity of the owner of the initial account, but not of any other accounts that you create. For Concordium Wallet for Web and Concordium Wallet for Mobile, an initial account is not submitted by the identity provider.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"net/concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities</span></a> and <a class=\"reference internal\" href=\"net/references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">Accounts</span></a>.</p>", "a[href=\"smart-contracts/tutorials/wCCD/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The wCCD smart contract<a class=\"headerlink\" href=\"#the-wccd-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed wCCD token on testnet.\nYou are going to write a basic web front end example that can read from and write to the deployed wCCD smart contract on testnet.</p><p>In the <a class=\"reference internal\" href=\"smart-contracts/tutorials/wCCD/wCCD-introduction.html#wccd-introduction\"><span class=\"std std-ref\">first part</span></a>, you will learn more about the wCCD token protocol.</p>", "a[href=\"net/guides/overview-desktop.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Desktop Wallet<a class=\"headerlink\" href=\"#set-up-the-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>The Concordium Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts, and to create transactions such as sending CCD, adding a baker, and exporting and importing account information.</p><p>The Desktop Wallet also supports storing of your private keys on a hardware device. Currently, the LEDGER NANO S, LEDGER NANO S Plus, and LEDGER Nano X are supported.</p>", "a[href=\"net/resources/legal.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Legal<a class=\"headerlink\" href=\"#legal\" title=\"Permalink to this headline\">#</a></h1><p>The following topics relate to terms and conditions of use as well as notices and licenses for referenced hardware and software.</p>", "a[href=\"smart-contracts/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Permalink to this headline\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"net/resources/terms-and-conditions-dw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Terms and Conditions for Concordium Desktop Wallet<a class=\"headerlink\" href=\"#terms-and-conditions-for-concordium-desktop-wallet\" title=\"Permalink to this headline\">#</a></h1><p>Effective from August 4, 2022</p>", "a[href=\"smart-contracts/onboarding-guide-solana-developers/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Onboarding<a class=\"headerlink\" href=\"#onboarding\" title=\"Permalink to this headline\">#</a></h1><p>A number of guides exist to help Solana developers to get started on the Concordium chain.</p>", "a[href=\"net/mobile-wallet/inspect-release-schedule-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a release schedule<a class=\"headerlink\" href=\"#inspect-a-release-schedule\" title=\"Permalink to this headline\">#</a></h1><p>By inspecting the release schedule, you can see when the releases are unlocked.</p>", "a[href=\"smart-contracts/tutorials/counter/counter-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium counter smart contract<a class=\"headerlink\" href=\"#concordium-counter-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This tutorial guides you through creating a smart contract using the Concordium a default contract template that simply keeps a counter value in its state. It is a super simple, fundamental example contract that touches on the following points:</p>", "a[href=\"smart-contracts/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Permalink to this headline\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"net/guides/scheduled-release.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scheduled releases<a class=\"headerlink\" href=\"#scheduled-releases\" title=\"Permalink to this headline\">#</a></h1><p>Some transfers contain a release schedule. This means that the CCD in the transfer can be seen on the account, but they are locked until one or more specific points in time. While the funds are locked, they cannot be transferred, but they will be part of the total amount on the account. Scheduled releases can only be created in the Desktop Wallet. You can inspect when funds will be released in Desktop Wallet, Concordium Wallet for Mobile, and Concordium Legacy Wallet.</p>", "a[href=\"smart-contracts/tutorials/sft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint a semi-fungible token<a class=\"headerlink\" href=\"#mint-a-semi-fungible-token\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you will learn how to mint semi-fungible tokens on Concordium testnet with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, the Concordium command line interface tool.  In the <a class=\"reference internal\" href=\"smart-contracts/tutorials/nft-minting/index.html#nft-index\"><span class=\"std std-ref\">NFT minting tutorial</span></a>, you learned many things, including how you can mint an NFT on Concordium and set up your development environment with node configurations, wallet and key exports, build, deploy, initialize, mint and transfer. The process in this tutorial will be the same as the first tutorial: first is the wallet setup and key exports, then the storage solutions and preparation of metadata, and finally the development part including minting, transferring and querying balances.</p><p>Before you start this tutorial, if you have not completed your development environment setup, see <a class=\"reference internal\" href=\"smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a>. This tutorial assumes you\u2019ve already configured your environment, have a node running, and installed your web wallet and exported its key.</p>", "a[href=\"smart-contracts-v0/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a smart contract project<a class=\"headerlink\" href=\"#setting-up-a-smart-contract-project\" title=\"Permalink to this headline\">#</a></h1><p>A smart contract in Rust is written as an ordinary Rust library crate.\nThe library is then compiled to Wasm using the Rust target\n<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code> and, since it is just a Rust library, you can use\n<a class=\"reference external\" href=\"https://doc.rust-lang.org/cargo/\">Cargo</a> for dependency management.</p><p>To set up a new smart contract project, first create a project directory. Inside\nthe project directory run the following in a terminal:</p>", "a[href=\"smart-contracts/tutorials/setup-env.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Permalink to this headline\">#</a></h1><p>First, you need to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> which installs Rust and Cargo to your computer. Go to <a class=\"reference external\" href=\"https://rustup.rs/\">Rustup</a> to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> for your platform.</p><p>Due to a change in the behavior of the rust compiler, you must install the compiler version 1.69 or earlier. To do that, run:</p>", "a[href=\"net/mobile-wallet/share-address-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Find and share your account address<a class=\"headerlink\" href=\"#find-and-share-your-account-address\" title=\"Permalink to this headline\">#</a></h1><p>If you need to share your account address with someone, you can find the address on the account page.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
