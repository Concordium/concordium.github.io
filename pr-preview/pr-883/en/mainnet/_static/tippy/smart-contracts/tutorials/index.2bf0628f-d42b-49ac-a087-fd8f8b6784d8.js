selector_to_html = {"a[href=\"piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"sft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint a semi-fungible token<a class=\"headerlink\" href=\"#mint-a-semi-fungible-token\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you will learn how to mint semi-fungible tokens on Concordium testnet with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, the Concordium command line interface tool.  In the <a class=\"reference internal\" href=\"nft-minting/index.html#nft-index\"><span class=\"std std-ref\">NFT minting tutorial</span></a>, you learned many things, including how you can mint an NFT on Concordium and set up your development environment with node configurations, wallet and key exports, build, deploy, initialize, mint and transfer. The process in this tutorial will be the same as the first tutorial: first is the wallet setup and key exports, then the storage solutions and preparation of metadata, and finally the development part including minting, transferring and querying balances.</p><p>Before you start this tutorial, if you have not completed your development environment setup, see <a class=\"reference internal\" href=\"setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a>. This tutorial assumes you\u2019ve already configured your environment, have a node running, and installed your web wallet and exported its key.</p>", "a[href=\"counter/counter-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium counter smart contract<a class=\"headerlink\" href=\"#concordium-counter-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>This tutorial guides you through creating a smart contract using the Concordium a default contract template that simply keeps a counter value in its state. It is a super simple, fundamental example contract that touches on the following points:</p>", "a[href=\"smartContractUpgrade/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrading smart contracts on Concordium<a class=\"headerlink\" href=\"#upgrading-smart-contracts-on-concordium\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to upgrade a smart contract natively. You will explore how to\nmigrate the smart contract state from your old contract to the upgraded contract.</p><p>An important desired feature of blockchains is that smart contracts, once deployed, are immutable by default.\nHistory has shown that development teams are looking for mutable smart contract options as well if they want to have\nthe capabilities to fix bugs, or to have the option to add additional\nfeatures to their smart contract protocol in the future.\nOther blockchain require complex <code class=\"docutils literal notranslate\"><span class=\"pre\">proxy-implementation</span></code> patterns to achieve upgradability on the by default immutable smart contracts.\nConcordium makes this process easier by exposing an upgrade mechanism to natively upgrade the smart contract.\nUpgradability is an opt-in on Concordium, meaning you can continue to write immutable contracts on Concordium if you prefer to do so.</p>", "a[href=\"fungible-tokens/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint fungible tokens<a class=\"headerlink\" href=\"#mint-fungible-tokens\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint and burn fungible tokens on the Concordium blockchain, send them to multiple accounts, and test the balances. Before starting, you need to understand the <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html\">CIS-2</a> standard.</p>", "a[href=\"nft-marketplace/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">NFT marketplace smart contract tutorial<a class=\"headerlink\" href=\"#nft-marketplace-smart-contract-tutorial\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial you will create an NFT Marketplace. The <a class=\"reference external\" href=\"https://github.com/chainorders/concordium-nft-tutorials\">contract</a> provides some functionalities, such as minting semi-fungible, and non-fungible tokens, buying and selling NFTs with fixed prices, setting commissions for your marketplace, and setting royalties for your NFTs to get some fees from secondary sales in this marketplace. Before you start, it is important to note that this is not a beginner-level tutorial; it does not cover the basics like downloads, node configurations, wallet setup and export, and so on.</p><p>This tutorial will be the first part of the Marketplace. There will be no UI interaction. You will invoke the functions with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. In the end, while implementing a dApp, what you have to do is implement a client that connects your backend with the blockchain. <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is that client and does that. In the second part which will be released soon, you will implement this marketplace from scratch with an empty React template.</p>", "a[href=\"sponsoredTransactions/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">A Sponsored Transactions dApp<a class=\"headerlink\" href=\"#a-sponsored-transactions-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with how to implement a sponsored transaction mechanism in a smart contract, how to sign messages in a wallet and verify the signature in the smart contract,\nhow to send a transaction from a back-end server to the blockchain, and how to connect your Concordium Wallet for Mobile via walletConnect to the frontend.</p><p>The dApp consists of three components that you will explore as part of this tutorial:</p>", "a[href=\"wCCD/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The wCCD smart contract<a class=\"headerlink\" href=\"#the-wccd-smart-contract\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed wCCD token on testnet.\nYou are going to write a basic web front end example that can read from and write to the deployed wCCD smart contract on testnet.</p><p>In the <a class=\"reference internal\" href=\"wCCD/wCCD-introduction.html#wccd-introduction\"><span class=\"std std-ref\">first part</span></a>, you will learn more about the wCCD token protocol.</p>", "a[href=\"nft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint an NFT<a class=\"headerlink\" href=\"#mint-an-nft\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to mint an NFT on Concordium blockchain. First you will learn the basics to set up your development environment. Note that in this tutorial most of the commands are for UNIX-like systems and will not work on Windows.</p><p>All development is completed using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and includes the following examples:</p>", "a[href=\"eSealing/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">An eSealing dApp<a class=\"headerlink\" href=\"#an-esealing-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed eSealing smart contract on testnet and explore the associated website.</p>", "a[href=\"setup-env.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Permalink to this headline\">#</a></h1><p>First, you need to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> which installs Rust and Cargo to your computer. Go to <a class=\"reference external\" href=\"https://rustup.rs/\">Rustup</a> to install <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> for your platform.</p><p>Due to a change in the behavior of the rust compiler, you must install the compiler version 1.69 or earlier. To do that, run:</p>", "a[href=\"voting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The Voting dApp<a class=\"headerlink\" href=\"#the-voting-dapp\" title=\"Permalink to this headline\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed voting dApp on testnet. The voting dApp example is intended to show how you can use Concordium to conduct an election using the Concordium Wallet for Web to enable users to cast their vote in your election.\nYou are going to write a basic web front-end example that can read from and write to the deployed smart contract on testnet.</p><p>If you want to try this example before starting the tutorial:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
