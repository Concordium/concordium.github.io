selector_to_html = {"a[href=\"../snippets/delegation-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation and validation FAQ<a class=\"headerlink\" href=\"#delegation-and-validation-faq\" title=\"Permalink to this headline\">#</a></h1>", "a[href=\"../concepts/concepts-baker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validators<a class=\"headerlink\" href=\"#validators\" title=\"Permalink to this headline\">#</a></h1><p>Validation is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> is a validator node when it participates actively in the network by creating new <a class=\"reference internal\" href=\"../resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> nodes. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> collects, orders, and validates the <a class=\"reference internal\" href=\"../resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a> that are included in a block to maintain the integrity of the blockchain. The validators sign each block that they produce so that the block can be verified and executed by the other validators in the network.</p>", "a[href=\"../concepts/concepts-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation<a class=\"headerlink\" href=\"#delegation\" title=\"Permalink to this headline\">#</a></h1><p>On the Concordium blockchain, <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validators</span></a> run the protocol that generates blocks, and the action of creating and verifying blocks is an important part of what validators do. Validators are rewarded for every block that they create with a payment of some <a class=\"reference internal\" href=\"../resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a>. Because Concordium runs a proof-of-stake protocol, each validator needs to <a class=\"reference internal\" href=\"../resources/glossary.html#term-Staked-Amount\"><span class=\"xref std std-term\">stake an amount to produce blocks</span></a>, and the <a class=\"reference internal\" href=\"../resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">probability of being selected to create the next block</span></a> is proportional to each validator\u2019s stake. So the payment may be seen as an interest on the validator\u2019s capital.</p><p>Not everyone with CCD has the resources needed to run a validator. <a class=\"reference internal\" href=\"../resources/glossary.html#term-Delegator\"><span class=\"xref std std-term\">Delegation</span></a> enables everyone to earn rewards for delegating some stake without the need to run a node or become a validator. Any party with CCD may delegate some of their capital to a validator. This increases the validator\u2019s chance of producing the next block and getting rewards, which are then shared with the delegators. This is a non-custodial solution: when a party delegates an amount of CCD to a validator, the CCDs are not transferred to the validator and remain under the party\u2019s control; they are just considered part of the validator\u2019s stake for the proof-of-stake protocol. Staked CCDs, both for delegators and validators, cannot be spent while staked. Unstaking CCDs is subject to a <a class=\"reference internal\" href=\"../resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
