selector_to_html = {"a[href=\"#build-the-tool\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Build the tool<a class=\"headerlink\" href=\"#build-the-tool\" title=\"Link to this heading\">#</a></h4><p>To build the tool you need a working <a class=\"reference external\" href=\"https://www.rust-lang.org/tools/install\">Rust compiler</a> with version 1.65 or higher. After installing it, verify that <code class=\"docutils literal notranslate\"><span class=\"pre\">rustc</span></code> exists in your path at the required version:</p>", "a[href=\"sdks-apis.html#sdks-apis\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">SDKs and APIs<a class=\"headerlink\" href=\"#sdks-and-apis\" title=\"Link to this heading\">#</a></h1><p>The following SDKs and APIs exist for developing on the Concordium network.</p>", "a[href=\"#interact-with-the-local-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with the local chain<a class=\"headerlink\" href=\"#interact-with-the-local-chain\" title=\"Link to this heading\">#</a></h2><p>You can now interact with your local chain through the node via the <a class=\"reference internal\" href=\"../references/grpc2.html#grpc2-documentation\"><span class=\"std std-ref\">Concordium Node gRPC API V2</span></a> exposed on port 20100 as you would with <a class=\"reference internal\" href=\"../resources/glossary.html#term-Mainnet\"><span class=\"xref std std-term\">Mainnet</span></a> or <a class=\"reference internal\" href=\"../resources/glossary.html#term-Testnet\"><span class=\"xref std std-term\">Testnet</span></a> nodes. Concordium provides various <a class=\"reference internal\" href=\"sdks-apis.html#sdks-apis\"><span class=\"std std-ref\">SDKs and APIs</span></a> that facilitate this as well as the <a class=\"reference external\" href=\"concordium-client\">Concordium Client</a> command-line tool. Assuming you have the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> binary version 5.1.1 or higher in your path, list the accounts using the <code class=\"docutils literal notranslate\"><span class=\"pre\">account</span> <span class=\"pre\">list</span></code> command:</p>", "a[href=\"../nodes/node-requirements.html#node-requirements\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on Concordium<a class=\"headerlink\" href=\"#run-a-node-on-concordium\" title=\"Link to this heading\">#</a></h1><p>When you run a node on the Concordium blockchain, you are participating in the Concordium blockchain by validating transactions.</p><p>Nodes are required for most things, from using a Concordium wallet to validation. You can choose to run a node yourself or you can have a third-party provider run a node for you. If you choose to run the node yourself, you can\nchoose from four different platforms to run your node: Ubuntu, Windows, MacOS, or Docker/Linux.</p>", "a[href=\"../installation/downloads.html#node-downloads\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium node distributions<a class=\"headerlink\" href=\"#concordium-node-distributions\" title=\"Link to this heading\">#</a></h2><p>For the system requirements to run a node, see <a class=\"reference internal\" href=\"../nodes/node-requirements.html#node-requirements\"><span class=\"std std-ref\">System requirements to run a node</span></a>.</p>", "a[href=\"#run-the-local-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run the local chain<a class=\"headerlink\" href=\"#run-the-local-chain\" title=\"Link to this heading\">#</a></h2><p>Your local chain will be run as a single validator node. The node uses a data and configuration directory to store its local state and configuration. In the following you will use the same directory for both. Create it and copy <code class=\"docutils literal notranslate\"><span class=\"pre\">genesis.dat</span></code> to it:</p>", "a[href=\"../resources/glossary.html#term-Genesis-Block\"]": "<dt id=\"term-Genesis-Block\">Genesis Block</dt><dd><p>The first <a class=\"reference internal\" href=\"#term-Block\"><span class=\"xref std std-term\">block</span></a> in a <a class=\"reference internal\" href=\"#term-Chain\"><span class=\"xref std std-term\">chain</span></a>. The genesis block establishes the starting state of the chain, before any transactions have occurred.</p></dd>", "a[href=\"#run-the-chain-from-a-distribution-binary\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Run the chain from a distribution binary<a class=\"headerlink\" href=\"#run-the-chain-from-a-distribution-binary\" title=\"Link to this heading\">#</a></h3><p>If you wish to run the validator node as a Docker instance, skip to the next section. Otherwise, the validator can be run from the appropriate node distribution binary directly on your host system:</p>", "a[href=\"#run-a-local-chain\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a local chain<a class=\"headerlink\" href=\"#run-a-local-chain\" title=\"Link to this heading\">#</a></h1><p>This guide details how to run your own instance of the Concordium blockchain. This is useful when developing and testing smart contracts. Running your own chain also lets you control various aspects, such as the genesis parameters, anonymity revokers, identity providers, and foundation accounts.</p><p>The chain is run by a network of validator nodes that produce blocks. In the following minimal example you will set up a network comprised of a single validator node that runs <em>locally</em> on your system and <em>does not connect to mainnet or testnet</em>. Note, however, that the concepts demonstrated here equally apply to any number of validator nodes configured in a LAN or WAN setting.</p>", "a[href=\"#install-the-node-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Install the node distribution<a class=\"headerlink\" href=\"#install-the-node-distribution\" title=\"Link to this heading\">#</a></h3><p>Concordium Node releases exist for Ubuntu, MacOS, Windows and Docker. See the <a class=\"reference internal\" href=\"../nodes/node-requirements.html#node-requirements\"><span class=\"std std-ref\">Node Requirements</span></a> section for information on system requirements and detailed instructions on how to obtain, run, and manage a node. To run a validator, you either need a Concordium node binary supplied with your appropriate distribution in your path or a working Docker installation. This depends on whether you want to run the Node binary directly on your host or as a Docker instance. The details below assume the former, but if you want to run a Docker instance, you can skip to the next section.</p><p>The name of the binary has <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-</span></code> as its prefix but depends on the distribution, so you may have to confer with the installation instructions to figure out the exact name. Upon successful installation of the distribution, verify that the binary exists in your path at the required version:</p>", "a[href=\"#generate-genesis-data-and-account-credentials\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate genesis data and account credentials<a class=\"headerlink\" href=\"#generate-genesis-data-and-account-credentials\" title=\"Link to this heading\">#</a></h3><p>Use the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-misc-tools/tree/main/genesis-creator\">genesis-creator</a> tool to generate genesis block data and credentials for the foundation and (initial) validator accounts.</p>", "a[href=\"../references/grpc2.html#grpc2-documentation\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">gRPC V2 documentation<a class=\"headerlink\" href=\"#grpc-v2-documentation\" title=\"Link to this heading\">#</a></h1><p>The gRPC v2 API has a much more detailed schema definition, and does not rely on JSON responses as the now deprecated gRPC v1 API did. It also supports streaming responses in cases where there is a lot of data, and supports subscribing to new blocks.</p><p>The V2 interface enables access to the same data as the now deprecated V1 interface, but in addition supports new endpoints, such as the ability to retrieve the entire smart contract state.</p>", "a[href=\"#run-the-chain-as-a-docker-instance\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Run the chain as a Docker instance<a class=\"headerlink\" href=\"#run-the-chain-as-a-docker-instance\" title=\"Link to this heading\">#</a></h3><p>If you ran the validator node by invoking the node binary directly on your host, skip this section. To run the validator node as a Docker instance, first save the following <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose.yml</span></code> file to the working directory:</p>", "a[href=\"#run-the-tool\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Run the tool<a class=\"headerlink\" href=\"#run-the-tool\" title=\"Link to this heading\">#</a></h4><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">genesis-creator</span></code> tool uses a TOML configuration file format for specifying parameters from which the genesis data is generated. The TOML file specifies:</p>", "a[href=\"../resources/glossary.html#term-Mainnet\"]": "<dt id=\"term-Mainnet\">Mainnet</dt><dd><p>The main Concordium network which launched in June 2021. The mainnet will receive periodic upgrades, but in contrast to the <a class=\"reference internal\" href=\"#term-Testnet\"><span class=\"xref std std-term\">testnet</span></a>, it will never be reset, and accounts created on the mainnet will remain indefinitely.</p></dd>", "a[href=\"../resources/glossary.html#term-Testnet\"]": "<dt id=\"term-Testnet\">Testnet</dt><dd><p>A test network run by Concordium to test its protocols and software. There can be several test networks in existence at the same time. All the features are tested on the testnet before they are released on the <a class=\"reference internal\" href=\"#term-Mainnet\"><span class=\"xref std std-term\">mainnet</span></a>.</p></dd>", "a[href=\"#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>You will either need a working installation of the <a class=\"reference internal\" href=\"../installation/downloads.html#node-downloads\"><span class=\"std std-ref\">Concordium Node distribution</span></a> or <a class=\"reference external\" href=\"https://www.docker.com/\">Docker</a>, instances of which will be used to run the validator node(s). You will need <a class=\"reference internal\" href=\"../resources/glossary.html#term-Genesis-Block\"><span class=\"xref std std-term\">genesis block</span></a> data, which defines your local chain and sets of credentials for validator accounts of the chain. The number of sets of validator credentials needed thus depends on the desired number of validators in the network, which in this example is one.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
