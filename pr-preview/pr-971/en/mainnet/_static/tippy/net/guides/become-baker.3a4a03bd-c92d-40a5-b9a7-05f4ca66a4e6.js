selector_to_html = {"a[href=\"export-key.html#export-key\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Export a private key<a class=\"headerlink\" href=\"#export-a-private-key\" title=\"Link to this heading\">#</a></h1><p>In certain situations, such as testing interaction with smart contracts, you may need to export your private key for an account in your wallet. The file format of the key export is specifically for <a class=\"reference internal\" href=\"../references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import</span></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. If you just copy the key to the clipboard, it\u2019s just the key itself and can be used for other purposes.</p>", "a[href=\"export-import.html#export-import\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a backup of identities, accounts, and addresses<a class=\"headerlink\" href=\"#make-a-backup-of-identities-accounts-and-addresses\" title=\"Link to this heading\">#</a></h1><p>To make sure that you have a backup of your accounts, identities, and addresses, Concordium strongly recommends that if you are using Concordium Legacy Wallet or Desktop Wallet, you export the data to a file you can store in a safe location. The backup will ensure that you can recover your accounts, identities, and addresses if your Wallet database becomes damaged or if, for some reason, you can\u2019t access the Wallet.</p>", "a[href=\"#become-a-validator-using-the-concordium-client\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Become a validator using the Concordium Client<a class=\"headerlink\" href=\"#become-a-validator-using-the-concordium-client\" title=\"Link to this heading\">#</a></h1><p>This guide takes you through the steps involved in upgrading your node to a validator node and managing the node using the Concordium Client.</p><p>The process of becoming a validator involves the following:</p>", "a[href=\"#remove-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Remove a validator<a class=\"headerlink\" href=\"#remove-a-validator\" title=\"Link to this heading\">#</a></h2><p>The controlling account can choose to de-register its validator on the chain. To do\nso you have to execute:</p>", "a[href=\"../resources/glossary.html#term-Pay-day\"]": "<dt id=\"term-Pay-day\">Pay day</dt><dd><p>A pay day is the point at which new CCDs are minted and rewards to validators and delegators are distributed. The stakes of validators and delegators are updated each pay day (but the changes for each pay day are fixed one epoch before). Pay day is thus when new validators begin validation and updates to delegation and validation take effect, such as increasing stake, restaking preferences, adding delegation. In the case of decreasing stake or removing delegation or validation, there is a longer cool-down period, after which the change is executed at the <strong>next pay day after the cool-down period ends</strong>. The cool-down period is 3 weeks. Pay day is every 24 hours (i.e., 24 epochs) at approximately 09:00 UTC on Mainnet and approximately 12:00 UTC on Testnet. The list of lottery winners that are elected to be the leader for every round in that epoch is established at the beginning of the epoch.</p></dd>", "a[href=\"#update-validator-keys\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Update validator keys<a class=\"headerlink\" href=\"#update-validator-keys\" title=\"Link to this heading\">#</a></h3><p>If it is necessary to update your validator keys, you need to first generate new validator keys. To create a fresh set of keys run:</p>", "a[href=\"#configure-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a validator<a class=\"headerlink\" href=\"#configure-a-validator\" title=\"Link to this heading\">#</a></h2><p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">validator</span> <span class=\"pre\">configure</span></code> to configure a validator and open a staking pool. The following is an example of how <code class=\"docutils literal notranslate\"><span class=\"pre\">configure</span> <span class=\"pre\">validator</span></code> might be used:</p>", "a[href=\"#restake-earnings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Restake the earnings<a class=\"headerlink\" href=\"#restake-the-earnings\" title=\"Link to this heading\">#</a></h3><p>When participating as a validator in the network and producing blocks, the account receives rewards for each produced block. These rewards are automatically added to the staked amount by default.</p><p>You can choose to modify this behavior and instead receive the rewards in the account balance without staking them automatically. You can change this switch through <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>:</p>", "a[href=\"../references/transactions.html#consensus-show-chain-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Show chain parameters<a class=\"headerlink\" href=\"#show-chain-parameters\" title=\"Link to this heading\">#</a></h3><p>Use the consensus command <code class=\"docutils literal notranslate\"><span class=\"pre\">show-chain-parameters</span></code> to show a number of parameters for the last known block or a specific block.</p>", "a[href=\"run-node-ubuntu.html#run-node-ubuntu\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on a server with Ubuntu on Mainnet<a class=\"headerlink\" href=\"#run-a-node-on-a-server-with-ubuntu-on-mainnet\" title=\"Link to this heading\">#</a></h1><p>This guide describes how organizations can run a node on the Concordium network from a server and how to set up the node to run as a <a class=\"reference internal\" href=\"#baker-node-ubuntu\"><span class=\"std std-ref\">validator node</span></a>.</p><p>You can also watch the video to learn how to run a node with Ubuntu.</p>", "a[href=\"#manage-the-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Manage the validator<a class=\"headerlink\" href=\"#manage-the-validator\" title=\"Link to this heading\">#</a></h2><h3>Check the status of the validator and its lottery power<a class=\"headerlink\" href=\"#check-the-status-of-the-validator-and-its-lottery-power\" title=\"Link to this heading\">#</a></h3><p>To see if the node is producing blocks, you can check various sources that offer different degrees of precision in the information displayed.</p>", "a[href=\"#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>For general information about validation concepts, see <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">Validators</span></a>.</p>", "a[href=\"#import-the-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Import the account<a class=\"headerlink\" href=\"#import-the-account\" title=\"Link to this heading\">#</a></h3><p>This section provides a brief description of how to import an account using the Concordium Client.</p>", "a[href=\"../nodes/baker-docker.html#baking-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Docker<a class=\"headerlink\" href=\"#run-a-validator-node-on-docker\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a Docker/Linux node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"../nodes/baker-ubuntu.html#baker-ubuntu\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Ubuntu<a class=\"headerlink\" href=\"#run-a-validator-node-on-ubuntu\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a server that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"#create-and-register-validator-keys\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Create and register validator keys<a class=\"headerlink\" href=\"#create-and-register-validator-keys\" title=\"Link to this heading\">#</a></h3><p>Each account has a unique validator ID that is used when registering its validator. This ID has to be provided by the network and currently cannot be precomputed. This ID must be given inside the validator keys file to the node so that it can use the validator keys to create blocks. The <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> will automatically fill this field when performing the following operations.</p><p>To create a fresh set of keys run:</p>", "a[href=\"#start-validation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Start validation<a class=\"headerlink\" href=\"#start-validation\" title=\"Link to this heading\">#</a></h2><h3>Import the account<a class=\"headerlink\" href=\"#import-the-account\" title=\"Link to this heading\">#</a></h3><p>This section provides a brief description of how to import an account using the Concordium Client.</p>", "a[href=\"#check-the-status-of-the-validator-and-its-lottery-power\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Check the status of the validator and its lottery power<a class=\"headerlink\" href=\"#check-the-status-of-the-validator-and-its-lottery-power\" title=\"Link to this heading\">#</a></h3><p>To see if the node is producing blocks, you can check various sources that offer different degrees of precision in the information displayed.</p>", "a[href=\"../references/concordium-client.html#concordium-client-import-accounts-keys\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Import accounts and keys from the Wallet apps<a class=\"headerlink\" href=\"#import-accounts-and-keys-from-the-wallet-apps\" title=\"Link to this heading\">#</a></h4><p>Import the keys of one or more accounts from a JSON file exported from the\nConcordium Legacy Wallet.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--name</span></code> option selects which account to import and imports it with this\nname. If it\u2019s omitted, all accounts in the file are imported under their\nexisting names.</p>", "a[href=\"../installation/downloads.html#concordium-node-and-client-download\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client 6.2.1-0<a class=\"headerlink\" href=\"#concordium-client-client-version\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../concepts/concepts-baker.html#baker-concept\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validators<a class=\"headerlink\" href=\"#validators\" title=\"Link to this heading\">#</a></h1><p>Validation is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> is a validator node when it participates actively in the network by creating new <a class=\"reference internal\" href=\"../resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> nodes. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> collects, orders, and validates the <a class=\"reference internal\" href=\"../resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a> that are included in a block to maintain the integrity of the blockchain. The validators sign each block that they produce so that the block can be verified and executed by the other validators in the network.</p>", "a[href=\"baker-windows.html#configure-baker-windows\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a validator node on Windows<a class=\"headerlink\" href=\"#configure-a-validator-node-on-windows\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../nodes/baker-macos.html#baker-macos\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on macOS<a class=\"headerlink\" href=\"#run-a-validator-node-on-macos\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a macOS node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"#update-the-staked-amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Update the staked amount<a class=\"headerlink\" href=\"#update-the-staked-amount\" title=\"Link to this heading\">#</a></h3><p>To update the validator stake run</p>", "a[href=\"#restake-the-earnings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Restake the earnings<a class=\"headerlink\" href=\"#restake-the-earnings\" title=\"Link to this heading\">#</a></h3><p>When participating as a validator in the network and producing blocks, the account receives rewards for each produced block. These rewards are automatically added to the staked amount by default.</p><p>You can choose to modify this behavior and instead receive the rewards in the account balance without staking them automatically. You can change this switch through <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>:</p>", "a[href=\"run-node.html#running-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running/upgrading a node<a class=\"headerlink\" href=\"#running-upgrading-a-node\" title=\"Link to this heading\">#</a></h2><p>Concordium provides two Docker images, a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/mainnet-node\">mainnet</a> one and a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/testnet-node\">testnet</a> one.\nThese images are designed to be used together with docker-compose, or a similar driver. This guide provides a sample configuration using <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose</span></code>.</p><p>The node requires a database which must be stored on the host system so that it persists when the docker container is stopped. It is up to the user to select the location of the database on their host system. In the guide the location used is <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-mainnet</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-testent</span></code> but any location to which the user that runs the Docker command has access to will do.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
