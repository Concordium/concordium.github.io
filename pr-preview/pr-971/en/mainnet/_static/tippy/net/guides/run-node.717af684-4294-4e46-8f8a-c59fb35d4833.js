selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/SELinux_logo.svg/320px-SELinux_logo.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p><b>Security-Enhanced Linux</b> (<b>SELinux</b>) is a Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC).</p>", "a[href^=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/SELinux_logo.svg/320px-SELinux_logo.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p><b>Security-Enhanced Linux</b> (<b>SELinux</b>) is a Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC).</p>", "a[href=\"#letting-the-node-container-access-the-internet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Letting the node container access the internet<a class=\"headerlink\" href=\"#letting-the-node-container-access-the-internet\" title=\"Link to this heading\">#</a></h3><p>Some Linux distributions whose firewall is not based on iptables, Fedora and\nCentOS among them, require additional steps to allow docker containers to access\nexternal networks, e.g., the internet.</p><p>On Fedora run the following command to allow docker containers to access external networks.</p>", "a[href=\"#migration-docker-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Migration from the previous Docker distribution<a class=\"headerlink\" href=\"#migration-docker-distribution\" title=\"Link to this heading\">#</a></h3><p>In the past Concordium provided a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-software</span></code> package which\ncontained a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> binary which orchestrated downloading a Docker\nimage and running the node. To migrate from that setup:</p>", "a[href=\"#running-upgrading-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running/upgrading a node<a class=\"headerlink\" href=\"#running-upgrading-a-node\" title=\"Link to this heading\">#</a></h2><p>Concordium provides two Docker images, a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/mainnet-node\">mainnet</a> one and a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/testnet-node\">testnet</a> one.\nThese images are designed to be used together with docker-compose, or a similar driver. This guide provides a sample configuration using <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose</span></code>.</p><p>The node requires a database which must be stored on the host system so that it persists when the docker container is stopped. It is up to the user to select the location of the database on their host system. In the guide the location used is <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-mainnet</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-testent</span></code> but any location to which the user that runs the Docker command has access to will do.</p>", "a[href=\"become-baker.html#become-a-baker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Become a validator using the Concordium Client<a class=\"headerlink\" href=\"#become-a-validator-using-the-concordium-client\" title=\"Link to this heading\">#</a></h1><p>This guide takes you through the steps involved in upgrading your node to a validator node and managing the node using the Concordium Client.</p><p>The process of becoming a validator involves the following:</p>", "a[href=\"#retrieve-node-logs\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Retrieve node logs<a class=\"headerlink\" href=\"#retrieve-node-logs\" title=\"Link to this heading\">#</a></h4><p>The sample configuration presented above logs data using Docker\u2019s default\nlogging infrastructure. To retrieve the logs for the node run:</p>", "a[href=\"#before-you-begin\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Before you begin<a class=\"headerlink\" href=\"#before-you-begin\" title=\"Link to this heading\">#</a></h2><p>Before running a Concordium node you will need to</p>", "a[href=\"#run-a-mainnet-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a mainnet node<a class=\"headerlink\" href=\"#run-a-mainnet-node\" title=\"Link to this heading\">#</a></h2><p>The same steps apply as for the testnet node, except the following sample\nconfiguration file should be used.</p><p>The main differences from the testnet configuration are:</p>", "a[href=\"#id3\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Retrieve node logs<a class=\"headerlink\" href=\"#id3\" title=\"Link to this heading\">#</a></h4><p>The sample configuration presented above logs data using Docker\u2019s default\nlogging infrastructure. To retrieve the logs for the node run:</p>", "a[href=\"#run-a-node-with-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node with Docker<a class=\"headerlink\" href=\"#run-a-node-with-docker\" title=\"Link to this heading\">#</a></h1><p>In this guide, you learn how to run a node on your Linux computer that\nparticipates in the Concordium network. This means that you receive\nblocks and transactions from other nodes, as well as propagate\ninformation about blocks and transactions to the nodes in the Concordium\nnetwork. After following this guide, you will be able to:</p>", "a[href=\"#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant by\nenabling inbound connections. The sample configuration above makes the node\nlisten on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> for inbound connections. Depending on your network and\nplatform configuration you will either need to forward an external port to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> on your router, open it in your firewall, or both. The details of how\nthis is done will depend on your configuration.</p>", "a[href=\"#run-a-validator-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node<a class=\"headerlink\" href=\"#run-a-validator-node\" title=\"Link to this heading\">#</a></h2><p>For information about how to run a validator node for Linux/Docker, see <a class=\"reference internal\" href=\"../nodes/baker-docker.html#baking-docker\"><span class=\"std std-ref\">Run a validator node on Docker</span></a>.</p>", "a[href=\"../nodes/baker-docker.html#baking-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Docker<a class=\"headerlink\" href=\"#run-a-validator-node-on-docker\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a Docker/Linux node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"#run-a-testnet-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a testnet node<a class=\"headerlink\" href=\"#run-a-testnet-node\" title=\"Link to this heading\">#</a></h2><p>To run a node on testnet use the following configuration file and follow the steps below.</p>", "a[href=\"#troubleshooting\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Link to this heading\">#</a></h2><p>The above configuration describes a basic configuration and has been tested on\nUbuntu 20.04. Other Linux distributions might require some modifications. Below\nare some common issues.</p>", "a[href=\"#mounting-host-directories-under-selinux\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Mounting host directories under SELinux<a class=\"headerlink\" href=\"#mounting-host-directories-under-selinux\" title=\"Link to this heading\">#</a></h3><p>When mounting host directories on distributions running <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux\">SELinux</a> special considerations apply.\nIn particular, this includes Fedora and its derivatives. See <a class=\"reference external\" href=\"https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label\">the Docker documentation</a> for details on how to proceed.</p>", "a[href=\"#enable-inbound-connections\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h3><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant by\nenabling inbound connections. The sample configuration above makes the node\nlisten on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> for inbound connections. Depending on your network and\nplatform configuration you will either need to forward an external port to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> on your router, open it in your firewall, or both. The details of how\nthis is done will depend on your configuration.</p>", "a[href=\"#migration-from-the-previous-docker-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Migration from the previous Docker distribution<a class=\"headerlink\" href=\"#migration-from-the-previous-docker-distribution\" title=\"Link to this heading\">#</a></h3><p>In the past Concordium provided a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-software</span></code> package which\ncontained a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> binary which orchestrated downloading a Docker\nimage and running the node. To migrate from that setup:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
