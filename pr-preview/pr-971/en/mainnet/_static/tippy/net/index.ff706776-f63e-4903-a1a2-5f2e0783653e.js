selector_to_html = {"a[href=\"guides/recover-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Recover your Wallet<a class=\"headerlink\" href=\"#recover-your-wallet\" title=\"Link to this heading\">#</a></h1><p>In case you get a new device or need to restore your existing device, you can recover your identities, accounts, and keys with the secret recovery phrase you wrote down during wallet setup.</p>", "a[href=\"../smart-contracts/references/schema-json.html#duration\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Duration</span></code><a class=\"headerlink\" href=\"#duration\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string as a list of time measures separated by whitespace.\nA measure is a number followed by the unit and no whitespace between is allowed.\nEvery measure is accumulated into the total duration. The string is allowed to\ncontain any number of measures with the same unit in no particular order.</p>", "a[href=\"concepts/id-accounts.html#attributes\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Link to this heading\">#</a></h3><p>Each identity contains a number of cryptographic values and a number of\nuser-chosen attributes, such as nationality or country of residence. These\nattributes are certified by the identity provider. The cryptographic values are\na number of public and private keys, a signature from the identity provider, as\nwell as a number of secret values the user must use to be able to use the\nidentity to create accounts.</p><p>You are in control of which attributes are revealed to the public. You can choose not to reveal any attributes at all to maintain your anonymity, which is the general recommendation.</p>", "a[href=\"guides/overview-shared-accounts.html#step-3\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Step 3<a class=\"headerlink\" href=\"#step-3\" title=\"Link to this heading\">#</a></h3><p>The users whose credentials are going to be added to the shared account generates a file with credentials that are associated with the account. The user sends the file to the initial account owner. See <a class=\"reference internal\" href=\"desktop-wallet/create-credentials-file.html#create-credentials-file\"><span class=\"std std-ref\">Create a credentials file</span></a></p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#standards\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Standards<a class=\"headerlink\" href=\"#standards\" title=\"Link to this heading\">#</a></h2>", "a[href=\"desktop-wallet/single-sign-schedule.html#option-2-create-an-explicit-schedule\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Option 2: Create an explicit schedule<a class=\"headerlink\" href=\"#option-2-create-an-explicit-schedule\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/general/contract-instances.html#migration\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Migration<a class=\"headerlink\" href=\"#migration\" title=\"Link to this heading\">#</a></h3><p>Triggering a smart contract instance upgrade changes the smart contract module starting from the next\ninvocation, meaning the execution will continue after the point of calling upgrade.\nSince any new invocation of this instance uses the new smart contract module, the instance\ncan invoke itself and run code of the new module in the same transaction containing the upgrade.\nThis is useful for triggering a migration function in the new smart contract module and rejecting the\nupgrade if the migration fails.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-tokenmetadata-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata</span></code> function<a class=\"headerlink\" href=\"#the-tokenmetadata-function\" title=\"Link to this heading\">#</a></h3><p>You are ready now to invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata</span></code> function with the following command.</p>", "a[href=\"concepts/id-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identities<a class=\"headerlink\" href=\"#reference-id-accounts\" title=\"Link to this heading\">#</a></h1><p>Accounts and identities are strongly linked on the Concordium Platform. To be able to hold, send, or receive <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a> or become a validator on the Concordium blockchain, you need an <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">account</span></a> and an identity. This is regardless of whether you are using the Concordium Legacy Wallet, Concordium Wallet for Mobile, Desktop Wallet, or Concordium Client for your transactions.</p><p>Before you can use the Concordium Platform, an <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> must verify and record your real-world identity. This identification is performed when you create your first account.</p>", "a[href=\"desktop-wallet/accounts-desktop.html#node-settings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Node settings<a class=\"headerlink\" href=\"#node-settings\" title=\"Link to this heading\">#</a></h3><p>Here you specify which node on the blockchain that you want to connect to.</p>", "a[href=\"concepts/concepts-delegation.html#summary\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Summary<a class=\"headerlink\" href=\"#summary\" title=\"Link to this heading\">#</a></h2><p>To earn rewards, a CCD holder can either delegate to passive delegation, to a staking pool, or become a validator. Being a validator oneself is the most challenging, as it requires resources to take part in the protocol, but it also provides the most rewards. Delegating to passive delegation provides the least rewards and requires the least actions from the investor. Delegating to a staking pool is somewhere between the two, both in terms of rewards and work, as it is recommended for a delegator to regularly check the performance of their pool\u2019s validator, and change pool if it underperforms.</p><p>See the <a class=\"reference internal\" href=\"snippets/delegation-faq.html#delegation-faq\"><span class=\"std std-ref\">Delegation FAQ</span></a> for answers to the most frequently asked questions.</p>", "a[href=\"guides/developer-page.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developer resources<a class=\"headerlink\" href=\"#developer-resources\" title=\"Link to this heading\">#</a></h1><p>The following developer resources help you get started developing on the Concordium network.</p><p>All of our repositories are on <a class=\"reference external\" href=\"https://github.com/Concordium\">GitHub</a>.</p>", "a[href=\"web3-id/concordia.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordia<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h1><p>Concordia is an example solution built on Web3 ID. It allows you to transfer trust between Telegram and Discord. Using verifiable credentials in the Concordium Wallet for Web, you can prove ownership of accounts on Telegram and Discord. This is done by allowing users to link their accounts and, optionally, real name. You can also <code class=\"docutils literal notranslate\"><span class=\"pre\">/check</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">/verify</span></code> other users in Telegram and Discord. In other words, if you know John Doe in one platform, you can also trust him in the other platform using his verifiable credentials.</p><p>To issue credentials and perform verification that these are your credentials, you can use the Concordia Social media verifier. The Concordia Social media verifier performs all the steps needed for you to allow transfer of trust of your user between platforms.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Events<a class=\"headerlink\" href=\"#events\" title=\"Link to this heading\">#</a></h2>", "a[href=\"concepts/id-accounts.html#about-accounts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">About accounts<a class=\"headerlink\" href=\"#about-accounts\" title=\"Link to this heading\">#</a></h2><p>For information about accounts, see <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">Accounts</span></a>.</p>", "a[href=\"mobile-wallet/update-baker-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change validator options<a class=\"headerlink\" href=\"#change-validator-options\" title=\"Link to this heading\">#</a></h1><p>The following information describes how to access validator settings to update your stake or restaking preference, to open and manage a staking pool, update validator keys, or stop validation for the Concordium Wallet for Web, Concordium Wallet for Mobile, Concordium Legacy Wallet, and Desktop Wallet.</p><p>The steps to get to these settings differ between Concordium Wallet for Mobile and Concordium Legacy Wallet. They are described below.</p>", "a[href=\"guides/run-node-macos.html#enable-inbound-connections\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h2><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant\nby enabling inbound connections. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> listens\non port <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> for inbound connections on <strong>Mainnet</strong> and on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> for inbound connections on <strong>Testnet</strong>. Depending on your network and\nplatform configuration you will either need to forward an external port\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> on your router, open it in your firewall, or both. The\ndetails of how this is done will depend on your configuration.</p>", "a[href=\"references/transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client transactions<a class=\"headerlink\" href=\"#concordium-client-transactions\" title=\"Link to this heading\">#</a></h1><p>You can perform all types of transactions with the <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. To do so, you use specialized subcommands. For an introduction to transactions, see <a class=\"reference internal\" href=\"concepts/concepts-transactions.html#transactions-overview\"><span class=\"std std-ref\">Transactions overview</span></a>.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#bring-in-the-standard-library\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Bring in the standard library<a class=\"headerlink\" href=\"#bring-in-the-standard-library\" title=\"Link to this heading\">#</a></h2><p>The source code of your smart contract is going to be in the <code class=\"docutils literal notranslate\"><span class=\"pre\">src</span></code> directory,\nwhich already contains the file <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code>, assuming you follow the above guide\nto set up your project.\nOpen <code class=\"docutils literal notranslate\"><span class=\"pre\">src/lib.rs</span></code> in your editor and you\u2019ll see some code for <a class=\"reference internal\" href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#piggy-bank-testing-v0\"><span class=\"std std-ref\">writing tests</span></a>,\nwhich you can delete for now. You will come back to tests later in this tutorial.</p><p>First, bring everything from the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/index.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code></a> library into scope\nby adding the line:</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <strong>smart contract instance</strong> is a smart contract module together with a\nspecific state and an amount of CCD tokens.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/index.html#what-are-semi-fungible-tokens\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are Semi-Fungible Tokens<a class=\"headerlink\" href=\"#what-are-semi-fungible-tokens\" title=\"Link to this heading\">#</a></h2><p>When do you need a semi fungible token or why do you need them in the first place? Of course depending on your use case they can really add more value to your project as they bring both fungibility and non-fungibility, and not to mention that it may be as a significantly cheaper option than minting non-fungible tokens for everything. <a class=\"reference external\" href=\"https://medium.com/@bogachanyigitbasi/about-semi-fungible-tokens-9b2fb74ea057\">This article</a> has more information.</p><p>Have you ever been to a rock concert, one with people screaming, jumping and acting crazy? Thousands of people stand on a pitch in a stadium, for example? Or a new year\u2019s party in a nice, cozy and cool pub? Or visited any ancient cities like <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Ephesus\">this one</a> that require hours of walking to explore? If the answer is yes, then you know that you need a ticket to do that. For example, let\u2019s say you pay for them for your family or friends and buy 4 tickets. Now let\u2019s take a look at each example with your tickets. Think about that concert. Does it really matter the number on that ticket as everybody is standing and having fun? Or when you are sitting at a table in a pub with your friends does it matter which chair you are sitting in?</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#json-for-schema-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">JSON for schema type<a class=\"headerlink\" href=\"#json-for-schema-type\" title=\"Link to this heading\">#</a></h2><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Unit</span></code><a class=\"headerlink\" href=\"#unit\" title=\"Link to this heading\">#</a></h3><p>No bytes are produced no matter the value given here.</p>", "a[href=\"guides/run-node-windows.html#validation-on-a-windows-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Validation on a Windows node<a class=\"headerlink\" href=\"#validation-on-a-windows-node\" title=\"Link to this heading\">#</a></h2><p>For information about validation on a Windows node, see <a class=\"reference internal\" href=\"guides/baker-windows.html#baker-windows\"><span class=\"std std-ref\">Run a validator node on Windows</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html#register-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Register a file<a class=\"headerlink\" href=\"#register-a-file\" title=\"Link to this heading\">#</a></h2><p>Select the <strong>Registration tab</strong> to register the file hash as shown below:</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#writing-a-smart-contract-using-concordium-std\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Writing a smart contract using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code><a class=\"headerlink\" href=\"#writing-a-smart-contract-using-concordium-std\" title=\"Link to this heading\">#</a></h2><p>It is recommended to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code> crate, which provides a\nmore Rust-like experience for developing smart contract modules and calling\nhost functions.</p><p>The crate enables writing init and receive functions as simple Rust\nfunctions annotated with <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(...)]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...)]</span></code>, respectively.</p>", "a[href=\"desktop-wallet/sign-transaction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sign a transaction proposal<a class=\"headerlink\" href=\"#sign-a-transaction-proposal\" title=\"Link to this heading\">#</a></h1><p>As a co-signer on an account, you\u2019ll receive transaction proposals that you have to sign. You\u2019ll receive the proposals as files with the extension .json. Sometimes, you\u2019ll also receive a PDF file with the transaction information. You import the .json file into the Desktop Wallet and then you compare the transaction details with the contents of the PDF file. Some proposers also send a separate file with a copy of the identicon as an extra security measure.</p>", "a[href=\"nodes/node-runner-service-configuration.html#rpc-enabled\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">rpc.enabled<a class=\"headerlink\" href=\"#rpc-enabled\" title=\"Link to this heading\">#</a></h3><p>(boolean; default: true; common)</p>", "a[href=\"guides/low-code-nft-marketplace/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium low-code NFT framework<a class=\"headerlink\" href=\"#concordium-low-code-nft-framework\" title=\"Link to this heading\">#</a></h1><p>Concordium provides developer tools to its community for developing high-level dApps. In order to help our community, Concordium has implemented this Low-Code Minting Tool and Marketplace to lower the bar for getting started on Concordium.</p><p>Concordium has collected feedback and done lots of market research and product experiments to understand the real pains when developing on Concordium. One outcome of those findings is the low-code NFT framework. The Low-Code NFT Minting tool provides a public resource to follow as an example and a white labeling solution for NFT project owners.</p>", "a[href=\"guides/multi-credentials.html#option-1-generate-the-transaction-without-signing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Option 1: Generate the transaction without signing<a class=\"headerlink\" href=\"#option-1-generate-the-transaction-without-signing\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/run-node-windows.html#change-the-node-startup-settings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Change the node startup settings<a class=\"headerlink\" href=\"#change-the-node-startup-settings\" title=\"Link to this heading\">#</a></h2><p>If you want to change whether the node runner service starts automatically, you can use the Services app.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#interact-with-an-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with an instance<a class=\"headerlink\" href=\"#interact-with-an-instance\" title=\"Link to this heading\">#</a></h2><p>A smart contract can expose zero or more functions for interacting with an\ninstance, referred to as <em>receive functions</em>.</p><p>Just like with init functions, receive functions are triggered using\ntransactions, which contain some amount of CCD for the contract and an argument\nto the function in the form of bytes.</p>", "a[href=\"references/concordium-client.html#add-named-account\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Add named account<a class=\"headerlink\" href=\"#add-named-account\" title=\"Link to this heading\">#</a></h4><p>Add an account address to persistent configuration, naming it. This name may now be used to refer to the account\nthroughout the client.</p><p>This doesn\u2019t add any private information to the stored account, so it can be\nconsidered as just creating an alias for an address.</p>", "a[href=\"release-notes/release-notes-lp.html#cargo-concordium\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code><a class=\"headerlink\" href=\"#cargo-concordium\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium counter smart contract<a class=\"headerlink\" href=\"#concordium-counter-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This tutorial guides you through creating a smart contract using the Concordium a default contract template that simply keeps a counter value in its state. It is a super simple, fundamental example contract that touches on the following points:</p>", "a[href=\"web3-id/issuer.html#concordium-issuer-tool\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Issuer tool<a class=\"headerlink\" href=\"#concordium-issuer-tool\" title=\"Link to this heading\">#</a></h3><p>Concordium also provides a generic issuer for Web3ID credentials. It exposes a REST API for registering credentials, and handles the correct formatting of credentials to submit to the chain, and communication with the node.</p><p>Concordium provides Docker images to make it simple to run the issuer tool, but the issuer themselves have to run it since issuing credentials requires access to private keys of the issuer, and payment of transaction fees.</p>", "a[href=\"nodes/node-runner-service-configuration.html#listen-port\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">listen.port<a class=\"headerlink\" href=\"#listen-port\" title=\"Link to this heading\">#</a></h3><p>(integer; optional)</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-front-end-set-up.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the front end<a class=\"headerlink\" href=\"#setting-up-the-front-end\" title=\"Link to this heading\">#</a></h1><p>In this part, you will create a web front end. Users can interact with the smart contract easier\nby using your front end compared to interacting with the node directly.\nNon-tech users might find it inconvenient to interact with smart contracts via the Concordium node\nand some users may choose not to host their own Concordium node locally. This tutorial part will show you\na setup that alleviates the need for the user to host their own Concordium node.</p><p>You can lower the bar for entry by coding an appealing front end that provides additional information\nto your potential customers. Web front ends are a familiar sight nowadays, but to use\nthe front end, users will also need to download a browser wallet as a browser extension.\nThe installation and safe usage of the browser wallet might be new for people using your front end.\nProviding comprehensive explanations and step-by-step guides on your website on topics\nrelated to the browser wallet is important for a good user experience. The browser wallet\nconnects via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a> to a server that is connected to a Concordium node. This setup alleviates the\nneed for the user to host their own Concordium node.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html#use-concordium-client\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Use Concordium Client<a class=\"headerlink\" href=\"#use-concordium-client\" title=\"Link to this heading\">#</a></h2><p>The front end is connected to a deployed eSealing smart contract on the Concordium testnet\nwith <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/eSealing\">this source code</a>.</p><p>You can interact directly with the smart contract using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and your local node\nthat is running at port 20001 to register a file hash as follows:</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#generate-the-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Generate the transaction<a class=\"headerlink\" href=\"#generate-the-transaction\" title=\"Link to this heading\">#</a></h2><p>There are two ways that you can generate the transaction:</p>", "a[href=\"installation/downloads.html#encrypt-decrypt-tool-v1-0-0\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Encrypt/decrypt tool v1.0.0<a class=\"headerlink\" href=\"#encrypt-decrypt-tool-v1-0-0\" title=\"Link to this heading\">#</a></h3><p>For information about how to use the encrypt/decrypt tool, see <a class=\"reference internal\" href=\"references/developer-tools.html#developer-tools\"><span class=\"std std-ref\">Auxiliary tools</span></a>.</p>", "a[href=\"guides/run-node-windows.html#enable-inbound-connections\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h2><p>If you are running your node behind a firewall, or behind your home router, then you will probably only be able to connect to other nodes, but other nodes will not be able to initiate connections to your node. This is perfectly fine, and your node will fully participate in the Concordium network. It will be able to send transactions and, <a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant by enabling inbound connections. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> listens on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> for inbound connections on <strong>Mainnet</strong> and on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> for inbound connections on <strong>Testnet</strong>. Depending on your network and platform configuration you will either need to forward an external port to <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> on your router, open it in your firewall, or both. The details of how this is done will depend on your configuration. See <a class=\"reference internal\" href=\"nodes/node-runner-service-configuration.html#node-runner-service-configuration\"><span class=\"std std-ref\">Concordium Windows node runner service configuration</span></a> for more information.</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-roll-size\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.roll.size<a class=\"headerlink\" href=\"#log-roll-size\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"nodes/run-node-ubuntu.html#upgrade-version\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrade version<a class=\"headerlink\" href=\"#upgrade-version\" title=\"Link to this heading\">#</a></h2><p>To upgrade to a newer version of the <cite>concordium-testnet-node</cite> package you need to:</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#request-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Request account<a class=\"headerlink\" href=\"#request-account\" title=\"Link to this heading\">#</a></h3><p>Once the identity provider has verified your identity you can submit an account. You can see when your identity has been verified by the green check next to the identity name.</p>", "a[href=\"references/concordium-client.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Link to this heading\">#</a></h1><p>The Concordium distribution ships with a CLI tool named <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>.</p><p>By default <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> performs its queries and sends transactions\nthrough a <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">local node</span></a>. If the node runs on a different machine\nor in a custom setup, the options <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-ip</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-port</span></code> can be used\nto set the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IP_address\">IP address</a> and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> where the node is accessible. These\nflags are supported by all <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> commands. Note that as of version\n5.1.1, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> must be the port where the GRPC V2 interface is enabled, in contrast to previous versions which required the port number of the V1 API of the Concordium node.</p>", "a[href=\"../smart-contracts/best-practices/development.html#checklist\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Checklist<a class=\"headerlink\" href=\"#checklist\" title=\"Link to this heading\">#</a></h3><p>Make sure that:</p>", "a[href=\"resources/dashboards.html#id1\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Status pages<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h2><p>Both Mainnet and Testnet have a status page. The status page shows incidents and planned outages. To open the status page, click the link for the <a class=\"reference external\" href=\"https://status.mainnet.concordium.software/\">Mainnet status page</a> or <a class=\"reference external\" href=\"https://status.testnet.concordium.software/\">Testnet status page</a>.</p>", "a[href=\"guides/run-node-macos.html#synchronize-a-node-with-the-network\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Synchronize a node with the network<a class=\"headerlink\" href=\"#synchronize-a-node-with-the-network\" title=\"Link to this heading\">#</a></h2><p>When you start a node for the first time, it can take a while to synchronize\nthe node with the rest of the network, since it has to get all blocks from\nits peers. That is why all node distributions since 6.1 come with out of band\ncatchup enabled. This will speed up the initial catchup and during out of\nband catchup the node will not have any peers.</p><p>The out of band catchup can be kept enabled even after the node is caught up,\nbut is not necessary. If you wish to disable it do the the following:</p>", "a[href=\"../smart-contracts/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#state-mutative-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">State-mutative functions<a class=\"headerlink\" href=\"#state-mutative-functions\" title=\"Link to this heading\">#</a></h2><p>The protocol has four state-mutative functions (<code class=\"docutils literal notranslate\"><span class=\"pre\">wrap</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">unwrap</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">transfer</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code>) that you can invoke on the wCCD smart contract.\nBecause the <code class=\"docutils literal notranslate\"><span class=\"pre\">schema</span></code> is already embedded,\nthe input parameters can be provided with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--parameter-json</span></code> flag.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#state-of-a-smart-contract-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">State of a smart contract instance<a class=\"headerlink\" href=\"#state-of-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h2><p>The state of a smart contract instance consists of two parts, the user-defined\nstate and the amount of CCD the contract holds, i.e., its <em>balance</em>. When\nreferring to state it typically means only the user-defined state. The reason for\ntreating the CCD amount separately is that CCD can only be spent and\nreceived according to rules of the network, e.g., contracts cannot create\nor destroy CCD tokens.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p><p>You can also watch a video about initializing smart contract instances.</p>", "a[href=\"guides/multisig-transfer.html#release-schedule-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Release schedule types<a class=\"headerlink\" href=\"#release-schedule-types\" title=\"Link to this heading\">#</a></h2><p>You can create two types of release schedules: a regular interval\nschedule and an explicit schedule.</p>", "a[href=\"../smart-contracts/references/schema-json.html#contractaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ContractAddress</span></code><a class=\"headerlink\" href=\"#contractaddress\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> field and\noptionally <code class=\"docutils literal notranslate\"><span class=\"pre\">subindex</span></code> field, both JSON numbers. Example:</p>", "a[href=\"../smart-contracts/references/schema-json.html#array\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Array</span></code><a class=\"headerlink\" href=\"#array\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with the length specified in the\nschema and items depending on the nested type. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Array(12,</span> <span class=\"pre\">U8)</span></code>:</p>", "a[href=\"guides/export-key.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Export a private key<a class=\"headerlink\" href=\"#export-a-private-key\" title=\"Link to this heading\">#</a></h1><p>In certain situations, such as testing interaction with smart contracts, you may need to export your private key for an account in your wallet. The file format of the key export is specifically for <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import</span></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. If you just copy the key to the clipboard, it\u2019s just the key itself and can be used for other purposes.</p>", "a[href=\"guides/run-node-ubuntu.html#upgrade-version\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrade version<a class=\"headerlink\" href=\"#upgrade-version\" title=\"Link to this heading\">#</a></h2><p>To upgrade to a newer version of the <cite>concordium-mainnet-node</cite> package you need to:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#unnamed\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Unnamed</span></code><a class=\"headerlink\" href=\"#unnamed\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array, with the fields as items corresponding to the types in\nthe field schema.</p><p>Example of unnamed fields in the Rust struct:</p>", "a[href=\"../smart-contracts/best-practices/development.html#reentrancy\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Reentrancy<a class=\"headerlink\" href=\"#reentrancy\" title=\"Link to this heading\">#</a></h4><p>The <em>reentrant behavior</em> is not specific to smart contracts: it is a well known issue in the context of concurrency.\nA procedure can be interrupted in the middle of its execution, run again in <em>another</em> execution context, and then continue execution from the interruption point.\nIn case of smart contracts, each call to external smart contracts interrupts the execution and hands over control to unknown code.\nDo not treat external contract invocations as regular method calls.\nInstead, think of them as sending a message and temporarily pausing execution of your contract.\nThe receiving side has full control of what to do next and can choose to call your contract again while it is still in the \u201cpaused\u201d state waiting for the external call to be completed.\nOnce the external call is completed, the contract state and balance might be different from those before the call.\nSee an <a class=\"reference internal\" href=\"../smart-contracts/guides/unit-test-contract.html#reentracny-unit-testing\"><span class=\"std std-ref\">example</span></a> based on <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">the DAO</a> Ethereum smart contract vulnerability of how reentrancy can be discovered using unit testing.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/index.html#what-is-the-difference-between-a-normal-transaction-vs-a-sponsored-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is the difference between a normal transaction vs. a sponsored transaction?<a class=\"headerlink\" href=\"#what-is-the-difference-between-a-normal-transaction-vs-a-sponsored-transaction\" title=\"Link to this heading\">#</a></h2><p>A normal transaction sent to a smart contract is signed by the user\u2019s wallet and authorizes the blockchain to subtract the transaction fee from the user\u2019s wallet as well as to execute a specific action. For example, the action could be to transfer some tokens from the user\u2019s address to another address.</p><p>The user creates a normal transaction by signing its <code class=\"docutils literal notranslate\"><span class=\"pre\">account</span></code> address, its <code class=\"docutils literal notranslate\"><span class=\"pre\">nonce</span></code>, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">nonce</span></code> increases sequentially every time the user sends a transaction to the blockchain to prevent replay attacks. The nonce is of type u64 (8 bytes) and by design &gt;= 1.</p>", "a[href=\"../smart-contracts/tutorials/setup-env.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>", "a[href=\"guides/multisig-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a scheduled transfer in the Desktop Wallet<a class=\"headerlink\" href=\"#create-a-scheduled-transfer-in-the-desktop-wallet\" title=\"Link to this heading\">#</a></h1><h2>Send CCD with a schedule<a class=\"headerlink\" href=\"#send-ccd-with-a-schedule\" title=\"Link to this heading\">#</a></h2><p>This guide describes how you create a multi-signature transfer with a schedule. For information about multi-signature transfer without a schedule, see <a class=\"reference internal\" href=\"desktop-wallet/multisig-simple-transfer.html#create-multisig\"><span class=\"std std-ref\">Create a multi-signature CCD transfer in the Desktop Wallet</span></a>.</p>", "a[href=\"../smart-contracts/general/contract-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>. A smart contract module is often referred to simply as a <em>module</em>.</p><p>A module can contain one or more smart contracts, allowing code to be shared\namong the contracts and can optionally contain <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a> and verification data.</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#outputting-a-schema-file\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Outputting a schema file<a class=\"headerlink\" href=\"#outputting-a-schema-file\" title=\"Link to this heading\">#</a></h3><p>To output the schema into a file, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out=FILE</span></code>\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">FILE</span></code> is a path of the file to create:</p>", "a[href=\"../smart-contracts/guides/fallback-entrypoints.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure you have the Rust source code for a smart contract module you wish to\nadd a fallback entrypoint to.\nYou also need to have the following installed:</p>", "a[href=\"../smart-contracts/tutorials/setup-env.html#run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node<a class=\"headerlink\" href=\"#run-a-node\" title=\"Link to this heading\">#</a></h2><p>You will need to run a node. You can run any node platform you wish. You can create an account on your favorite cloud provider to set up your instance unless you intend to run a testnet node locally on your machine. The following are the requirements to run a simple testnet node. See the <a class=\"reference internal\" href=\"../net/nodes/node-requirements.html#system-requirements-node-mainnet\"><span class=\"std std-ref\">requirements</span></a> for mainnet nodes.</p>", "a[href=\"../smart-contracts/references/schema-json.html#json-for-schema-type-fields\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">JSON for schema type fields<a class=\"headerlink\" href=\"#json-for-schema-type-fields\" title=\"Link to this heading\">#</a></h2><p>Structs and the different variants in an enum can have fields, and such fields\ncan either be named or unnamed. Unnamed fields are referenced by position.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#receive-signatures-from-co-signers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Receive signatures from co-signers<a class=\"headerlink\" href=\"#receive-signatures-from-co-signers\" title=\"Link to this heading\">#</a></h2><p>When the co-signers have signed the transaction, they return the signed transaction proposal to you, and you have to import the files into the Desktop Wallet before you can submit the transaction to the blockchain.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_iterator_key_read\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_iterator_key_read\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_iterator_key_read</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterator</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Read a section of the key the iterator is currently pointing at.\nBefore the first call to the <a class=\"reference external\" href=\"#concordium.state_iterator_next\"><code class=\"docutils literal notranslate\"><span class=\"pre\">state_iterator_next</span></code></a> function this returns\n(sections of) the key that was used to create the iterator. After\nthe iterator is exhausted, this method returns (sections of) the key at the\nfirst node returned by the iterator.</p></dd>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/upload-nft.html#using-interplanetary-file-system-ipfs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using InterPlanetary File System (IPFS)<a class=\"headerlink\" href=\"#using-interplanetary-file-system-ipfs\" title=\"Link to this heading\">#</a></h2><p>There are multiple ways of storing data in IPFS. You can do it from a user interface by running a node or you can use a pinning service. For this tutorial, you will download and run the IPFS and store the both NFT metadata and image itself. <a class=\"reference external\" href=\"https://docs.ipfs.tech/install/\">Click here to download and install IPFS</a>.</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#instantiating-a-smart-contract-on-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instantiating a smart contract on-chain<a class=\"headerlink\" href=\"#instantiating-a-smart-contract-on-chain\" title=\"Link to this heading\">#</a></h2><p>Every smart contract must contain a function for creating smart contract\ninstances. Such a function is referred to as the <em>init function</em>.</p><p>To create a smart contract instance, an account sends a special transaction with\na reference to the deployed smart contract module and the name of the\ninit function to use for instantiation.</p>", "a[href=\"guides/create-proofs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create proofs<a class=\"headerlink\" href=\"#create-proofs\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifier\"><span class=\"xref std std-term\">verifier</span></a> is a business or use-case that provides a service contingent on the holder providing information about themselves using <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> or <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> they have. A verifier will typically consist of two components:</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#instance-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instance state<a class=\"headerlink\" href=\"#instance-state\" title=\"Link to this heading\">#</a></h2><p>Every smart contract instance holds its own state which is represented on-chain\nas an array of bytes. The instance uses functions provided by the host\nenvironment to read, write and resize the state.</p>", "a[href=\"guides/run-node-windows.html#synchronize-a-node-with-the-network\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Synchronize a node with the network<a class=\"headerlink\" href=\"#synchronize-a-node-with-the-network\" title=\"Link to this heading\">#</a></h2><p>When you start a node for the first time, it can take a while to synchronize\nthe node with the rest of the network, since it has to get all blocks from\nits peers. That is why all node distributions since 6.1 come with out of band\ncatchup enabled. This will speed up the initial catchup and during out of\nband catchup the node will not have any peers.</p><p>The out of band catchup can be kept enabled even after the node is caught up,\nbut is not necessary. If you wish to disable it do the the following:</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#best-practices\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Best practices<a class=\"headerlink\" href=\"#best-practices\" title=\"Link to this heading\">#</a></h2><h3>Avoid creating black holes<a class=\"headerlink\" href=\"#avoid-creating-black-holes\" title=\"Link to this heading\">#</a></h3><p>A smart contract is not required to use the amount of CCD send to it, and by\ndefault a smart contract does not define any behavior for emptying the balance\nof an instance, in case someone were to send some CCD.\nThese CCD would then be forever <em>lost</em>, and there would be no way to recover\nthem.</p><p>Therefore it is good practice for smart contracts that are not dealing with CCD,\nto ensure the sent amount of CCD is zero and reject any invocations which are\nnot.</p>", "a[href=\"nodes/node-runner-service-configuration.html#grpc2-port\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">grpc2.port<a class=\"headerlink\" href=\"#grpc2-port\" title=\"Link to this heading\">#</a></h3><p>(integer; optional)</p>", "a[href=\"web3-id/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identity on Concordium<a class=\"headerlink\" href=\"#identity-on-concordium\" title=\"Link to this heading\">#</a></h1><p>Concordium\u2019s identity layer is built into the protocol. Every account on the chain has one or more credentials issued by specially sanctioned identity providers who are expected to be able to provide full anonymity revocation. ID 2.0 made it possible to use these identities off-chain: wallets allow using identities to prove properties about the holder, such as their nationality or age. These are known as <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#add-a-test-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add a test module<a class=\"headerlink\" href=\"#add-a-test-module\" title=\"Link to this heading\">#</a></h2><p>Since a smart contract module is a regular Rust library, you can test it as\none would test any library and add integration tests in the <code class=\"docutils literal notranslate\"><span class=\"pre\">tests</span></code> folder.</p><p>Create the folder <code class=\"docutils literal notranslate\"><span class=\"pre\">tests</span></code> in the root of your project and add the file <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.rs</span></code> inside it.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/build-smart-contract.html#initialize-the-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize the smart contract<a class=\"headerlink\" href=\"#initialize-the-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Maybe you\u2019re wondering why you need to create an instance of the contract. When you create a new instance of a new contract, as mentioned earlier, you simply create a new one with a refreshed state. The account that creates the instance is the owner. There might be cases when you want to call some functions with only the owner of the contract, and some publicly open for everyone.</p><p>Run the following command to initialize your smart contract.</p>", "a[href=\"references/manage-accounts.html#tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Tools<a class=\"headerlink\" href=\"#tools\" title=\"Link to this heading\">#</a></h2><h3>The Desktop Wallet<a class=\"headerlink\" href=\"#the-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>The Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts from your desktop and to create transactions such as sending CCD, adding a validator, and exporting and importing account information.</p>", "a[href=\"installation/downloads.html#concordium-node-distributions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium node distributions<a class=\"headerlink\" href=\"#concordium-node-distributions\" title=\"Link to this heading\">#</a></h2><p>For the system requirements to run a node, see <a class=\"reference internal\" href=\"nodes/node-requirements.html#node-requirements\"><span class=\"std std-ref\">System requirements to run a node</span></a>.</p>", "a[href=\"../smart-contracts-v0/guides/setup-contract.html#adding-the-smart-contract-standard-library\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding the smart contract standard library<a class=\"headerlink\" href=\"#adding-the-smart-contract-standard-library\" title=\"Link to this heading\">#</a></h2><p>The next step is to add <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> as a dependency.\nIt is a library for Rust containing procedural macros and functions for\nwriting small and efficient smart contracts.</p><p>The library is added by opening <code class=\"docutils literal notranslate\"><span class=\"pre\">Cargo.toml</span></code> and adding the line\n<code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span> <span class=\"pre\">=</span> <span class=\"pre\">\"*\"</span></code> (preferably, replace the <cite>*</cite> with the latest version of <a class=\"reference external\" href=\"https://docs.rs/crate/concordium-std/\">concordium-std</a>) in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">[dependencies]</span></code> section:</p>", "a[href=\"../smart-contracts/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Link to this heading\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"../smart-contracts/references/local-settings.html#account-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account Names<a class=\"headerlink\" href=\"#account-names\" title=\"Link to this heading\">#</a></h3><p>Account names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">accounts/names.map</span></code> using a <em>custom</em>\nformat, and should look similar to the following:</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html#on-chain-language\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain language<a class=\"headerlink\" href=\"#on-chain-language\" title=\"Link to this heading\">#</a></h2><p>On the Concordium blockchain the smart contract language is a subset of <a class=\"reference external\" href=\"https://webassembly.org/\">Web\nAssembly</a> (Wasm in short) which is designed to be a portable compilation\ntarget and to be run in sandboxed environments. This is useful because smart\ncontracts will be run by validators in the network who do not necessarily trust\nthe code.</p><p>Wasm is a low-level language and it is impractical to write by hand. Instead one\ncan write smart contracts in a more high-level language which is then\ncompiled to Wasm.</p>", "a[href=\"../smart-contracts/guides/no-std.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Compiling <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> without the <code class=\"docutils literal notranslate\"><span class=\"pre\">std</span></code> feature requires using the rust\nnightly toolchain, which can be installed using <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code>:</p>", "a[href=\"references/concordium-client.html#location\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Location<a class=\"headerlink\" href=\"#location\" title=\"Link to this heading\">#</a></h3><p>The configuration directory is mapped by Docker into a\nsystem-dependent directory:</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To initialize an instance of the contract <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_contract</span></code> from the\nmodule with reference\n<code class=\"docutils literal notranslate\"><span class=\"pre\">9eb82a01d96453dbf793acebca0ce25c617f6176bf7a564846240c9a68b15fd2</span></code> with the\nparameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary format, run the following command:</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#light-dark-mode-toggle\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Light/dark mode toggle<a class=\"headerlink\" href=\"#light-dark-mode-toggle\" title=\"Link to this heading\">#</a></h3><p>At the bottom of the Wallet settings page you can toggle between light and dark mode.</p>", "a[href=\"guides/become-baker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Become a validator using the Concordium Client<a class=\"headerlink\" href=\"#become-a-validator-using-the-concordium-client\" title=\"Link to this heading\">#</a></h1><p>This guide takes you through the steps involved in upgrading your node to a validator node and managing the node using the Concordium Client.</p><p>The process of becoming a validator involves the following:</p>", "a[href=\"../smart-contracts/general/contract-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nreturn value of a receive function and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#define-interaction-with-piggy-banks\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Define interaction with piggy banks<a class=\"headerlink\" href=\"#define-interaction-with-piggy-banks\" title=\"Link to this heading\">#</a></h2><p>You have now defined how instances of your smart contract are created, and the\nsmart contract is in principle a valid contract.\nHowever, you would also like to define how to interact with instances of your\ncontract, specifically how to add CCD to it and how to smash a piggy bank.</p><p>A smart contract can expose zero or more functions for interacting with an\ninstance.\nThese functions are called receive functions. They can read and\nwrite to the state of the instance, read the state of the blockchain and\nreturn a description of actions to be executed on-chain.</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build and deploy the smart contract<a class=\"headerlink\" href=\"#build-and-deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h1><p>The flow will be the same as the previous tutorials. You will build the contract, deploy it, and then create an instance of it. While selling your NFTs there will be some additional steps.</p><p>Now, you have the smart contract and helpers in your project\u2019s folder. In that folder, create another one called <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/marketplace-contract</span></code> for your output files. Then run the command below to build the contract and save the schema and Wasm file.</p>", "a[href=\"concepts/id-accounts.html#revoking-anonymity\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Revoking anonymity<a class=\"headerlink\" href=\"#revoking-anonymity\" title=\"Link to this heading\">#</a></h2><p>The identity of a user can only be revealed to a qualified authority as part of a valid legal process. A qualified authority is a governmental body that has authority to act in a relevant jurisdiction. For example, a local police force, a local court or an investigatory division of a local authority that regulates financial conduct will all have authority to act in their jurisdictions. These authorities are qualified to begin the process of revoking the anonymity of a user when they proceed through established legal channels and make a formal request. The outcome of such a request is likely to be that a qualified authority obtains an official order, which may be in the form of a warrant, court order, or similar instrument. Only after a qualified authority validly serves an official order upon the relevant <a class=\"reference internal\" href=\"resources/ar-idp-contact.html#ar-idp-contact\"><span class=\"std std-ref\">anonymity revokers</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> can the real-world identity of a user be revealed and only to the extent set out in the order.</p><p>When legally obliged, the anonymity revokers and identity provider work together to determine the owner of an account and determine which accounts belong to the same owner. Anonymity revocation is a multi-stage process requiring cooperation of multiple parties.</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/smartContractUpgrade.html#the-migration-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function<a class=\"headerlink\" href=\"#the-migration-function\" title=\"Link to this heading\">#</a></h2><p>When deploying <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>, you might not know the exact logic of the <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code> yet.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Contract-version2</span></code> might be a smart contract that fixes a security bug in your smart contract code which will be discovered at some point in the future.\nFor that reason, it is good to have the option to call a <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function in <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code> when executing the upgrade mechanism in <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>.\nThis allows you to add additional execution logic when upgrading the smart contract.</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function could have a variety of different purposes such as:</p>", "a[href=\"references/transactions.html#transfer-ccd-with-a-schedule\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer CCD with a schedule<a class=\"headerlink\" href=\"#transfer-ccd-with-a-schedule\" title=\"Link to this heading\">#</a></h3><p>The command to transfer CCD that will be released gradually according to a\nrelease schedule with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">transaction</span> <span class=\"pre\">send-scheduled</span></code>.\nThere are two ways of specifying the release schedule, either at regular intervals or as an explicit schedule.</p>", "a[href=\"../smart-contracts/guides/migrate-contracts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Migrate contracts for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> 8.1<a class=\"headerlink\" href=\"#migrate-contracts-for-concordium-std-8-1\" title=\"Link to this heading\">#</a></h1><p>With the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code></a> version <code class=\"docutils literal notranslate\"><span class=\"pre\">8.1</span></code> release, writing and reading smart contracts is easier than ever before.\nThe new version of the standard library reduces the need for generics and traits in your init and receive methods.\nThese generics and traits were there to support testing with the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.1/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a>, which has been deprecated in favor of the <a class=\"reference external\" href=\"https://docs.rs/concordium-std-derive/latest/concordium_smart-contract-testing\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.</p><p>This guide shows you how to migrate your contract code to use the simpler concrete types and use fewer generics.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_entry_read\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_entry_read\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_entry_read</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">entry</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">location</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Read a section of the entry to the given location. Return the number of\nbytes written. The location is assumed to contain enough memory to write the\nrequested length into. If not, the function will trap and abort execution of\nthe contract.</p></dd>", "a[href=\"../smart-contracts-v0/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a smart contract project<a class=\"headerlink\" href=\"#setting-up-a-smart-contract-project\" title=\"Link to this heading\">#</a></h1><p>A smart contract in Rust is written as an ordinary Rust library crate.\nThe library is then compiled to Wasm using the Rust target\n<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code> and, since it is just a Rust library, you can use\n<a class=\"reference external\" href=\"https://doc.rust-lang.org/cargo/\">Cargo</a> for dependency management.</p><p>To set up a new smart contract project, first create a project directory. Inside\nthe project directory run the following in a terminal:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint fungible tokens<a class=\"headerlink\" href=\"#mint-fungible-tokens\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to mint and burn fungible tokens on the Concordium blockchain, send them to multiple accounts, and test the balances. Before starting, you need to understand the <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html\">CIS-2</a> standard.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html#initialization\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialization<a class=\"headerlink\" href=\"#initialization\" title=\"Link to this heading\">#</a></h2><p>To initialize an instance of the parameterless smart contract <code class=\"docutils literal notranslate\"><span class=\"pre\">my_contract</span></code>\nfrom a deployed module with reference\n<code class=\"docutils literal notranslate\"><span class=\"pre\">9eb82a01d96453dbf793acebca0ce25c617f6176bf7a564846240c9a68b15fd2</span></code> while\nallowing up to 10000 NRG to be used, run the\nfollowing command:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#building-a-wasm-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building a Wasm module<a class=\"headerlink\" href=\"#building-a-wasm-module\" title=\"Link to this heading\">#</a></h2><p>You have already built a Wasm module from your piggy bank smart contract in a <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#cargo-concordium-build\"><span class=\"std std-ref\">previous part</span></a> of this tutorial.</p><p>Repeat this step since you might have done some changes to the smart contract code in <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/testing.html#piggy-bank-testing\"><span class=\"std std-ref\">part 2</span></a> of this tutorial. Go to the folder where you saved your piggy bank smart contract and use <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">build</span></code> to create a Wasm module.</p>", "a[href=\"references/manage-accounts.html#account-aliases\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account aliases<a class=\"headerlink\" href=\"#account-aliases\" title=\"Link to this heading\">#</a></h3><p>In protocol versions 1 and 2 accounts and account addresses have a one-to-one relationship. In protocol version 3 each account has 16777216 addresses, namely a so-called canonical account address together with\nmatching <a class=\"reference internal\" href=\"resources/glossary.html#term-Alias\"><span class=\"xref std std-term\">account aliases</span></a>. The canonical account address is derived when an account is created on chain. The other 16 million addresses with matching initial 29 bytes are referred to as account aliases for\nthe same account. Thus, accounts can be referred to by any address whose initial 29 bytes match.</p><p>This allows each account to have aliases for different uses and creates a kind of sub-account structure. An account owner can give out different aliases for different uses to keep track of transfers and assign them meaning.</p>", "a[href=\"guides/multisig-transfer.html#option-1-create-a-regular-interval-schedule\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Option 1: Create a regular interval schedule<a class=\"headerlink\" href=\"#option-1-create-a-regular-interval-schedule\" title=\"Link to this heading\">#</a></h3>", "a[href=\"nodes/macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">MacOS nodes<a class=\"headerlink\" href=\"#macos-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with MacOS.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#decrement-counter\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Decrement counter<a class=\"headerlink\" href=\"#decrement-counter\" title=\"Link to this heading\">#</a></h3><p>Add a new mutable function to implement decrement with a similar approach. It will also take an input parameter, but this time make sure that it is negative because a violation will be caused by an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::DecrementError</span></code>. Like the other one, this can be triggered by only the owner of the contract,otherwise it will throw an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#pair\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Pair</span></code><a class=\"headerlink\" href=\"#pair\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with two items, depending on the\nnested types. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Pair(U8,</span> <span class=\"pre\">ContractAddress)</span></code>:</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#identity-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Identity data<a class=\"headerlink\" href=\"#identity-data\" title=\"Link to this heading\">#</a></h2><p>Functions for reading identity information.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#piggy-bank-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Piggy bank contract<a class=\"headerlink\" href=\"#piggy-bank-contract\" title=\"Link to this heading\">#</a></h2><p>The contract you are going to build in this tutorial is going to act as a classic\npiggy bank. Everyone should be able to put money in the form of CCD into it, but only the owner\ncan smash it and retrieve the CCD inside. Once the piggy bank has been\nsmashed, it should not be possible to add CCD to it.</p><p>The piggy-bank smart contract is going to contain a function for setting up a\nnew piggy bank and two functions for updating a piggy bank; one is for everyone\nto use for inserting CCD, the other is for the owner to smash the piggy bank and\nprevent further interaction.</p>", "a[href=\"guides/multi-credentials.html#generate-the-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Generate the transaction<a class=\"headerlink\" href=\"#generate-the-transaction\" title=\"Link to this heading\">#</a></h2><p>There are two ways that you can generate the transaction:</p><p>Option 1: <a class=\"reference internal\" href=\"#credentials-generate-without-sign\"><span class=\"std std-ref\">Generate the transaction without signing</span></a>.  This option enables you to export the transaction proposal without signing it. You don\u2019t need a LEDGER device, but you do need an internet connection.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust\ncontracts. The guide <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a> shows you how to do this.\nAlso, make sure to have a text editor for writing Rust.</p><p>You also need to set up a new smart contract project.\nFollow the guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-contract.html#setup-contract\"><span class=\"std std-ref\">Set up a smart contract project</span></a> and return to this point afterwards.</p>", "a[href=\"nodes/node-runner-service-configuration.html#config-dir\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">config_dir<a class=\"headerlink\" href=\"#config-dir\" title=\"Link to this heading\">#</a></h3><p>(string; required)</p>", "a[href=\"../smart-contracts/references/schema-json.html#json-for-schema-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">JSON for schema type<a class=\"headerlink\" href=\"#json-for-schema-type\" title=\"Link to this heading\">#</a></h2><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Unit</span></code><a class=\"headerlink\" href=\"#unit\" title=\"Link to this heading\">#</a></h3><p>No bytes are produced no matter the value given here.</p>", "a[href=\"references/query-node.html#exchange-rates\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Exchange rates<a class=\"headerlink\" href=\"#exchange-rates\" title=\"Link to this heading\">#</a></h2><p>Conversion rates between NRG, CCD, and Euros can fluctuate between blocks. To get a best estimate of the current\nexchange rates, query the chain parameters of the <a class=\"reference internal\" href=\"resources/glossary.html#term-Best-block\"><span class=\"xref std std-term\">best block</span></a>:</p>", "a[href=\"../smart-contracts-v0/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to inspect a smart contract instance.\nInspecting an instance will show you its name, owner, module reference, balance,\nstate and receive-functions:</p>", "a[href=\"nodes/node-runner-service-configuration.html#data-dir\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">data_dir<a class=\"headerlink\" href=\"#data-dir\" title=\"Link to this heading\">#</a></h3><p>(string; required)</p>", "a[href=\"nodes/node-runner-service-configuration.html#node-args\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">node.args<a class=\"headerlink\" href=\"#node-args\" title=\"Link to this heading\">#</a></h3><p>(array of strings; optional; common)</p>", "a[href=\"../smart-contracts-v0/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Link to this heading\">#</a></h1><p>A smart contract is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#serializable-state-and-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Serializable state and parameters<a class=\"headerlink\" href=\"#serializable-state-and-parameters\" title=\"Link to this heading\">#</a></h3><p>On-chain, the state of an instance is represented as a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Trie\">prefix tree</a>, where nodes in the tree can have data in the\nform of a byte array.\nThe instance uses functions provided by the host environment to create, delete,\nand find nodes in the tree.\nThe host also provides functions for reading, writing, and resizing the byte array\nheld by a particular node in the tree.</p><p>For simple contracts, the complete contract state is stored in the root node of\nthe state tree. For this to work, the state must implement the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Serialize</span></code> trait which contains (de-)serialization functions.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code> crate includes this trait and implementations for most\ntypes in the Rust standard library.\nIt also includes macros for deriving the trait for user-defined structs and\nenums.</p>", "a[href=\"../smart-contracts-v0/general/introduction.html#what-are-smart-contracts-not-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are smart contracts <em>not</em> for?<a class=\"headerlink\" href=\"#what-are-smart-contracts-not-for\" title=\"Link to this heading\">#</a></h2><p>Smart contracts are a very exciting technology and people are still finding new\nways to take advantage of them.\nHowever, there are some cases where smart contracts are not a good solution.</p><p>One of the key advantages of smart contracts are the trust in the code\nexecution, and to achieve this a large number of nodes in the blockchain network\nhave to execute the same code and ensure agreement of the result.\nNaturally, this becomes expensive compared to running the same code on one node\nin some cloud service.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html#permit-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function<a class=\"headerlink\" href=\"#permit-function\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function verifies an ed25519 signature from a sponsoree and authorizes the sponsor to execute the logic of\nspecific entrypoints (<code class=\"docutils literal notranslate\"><span class=\"pre\">transfer/updateOperator</span></code> in the example code) on behalf of the sponsoree. The sponsored transaction mechanism replaces\nthe authorization checks conducted on the sender/invoker variable with signature verification.\nThat is, the sponsoree needs to sign a message (indicating its intended action), then\nanyone can invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function with this signed message to execute the sponsoree\u2019s intended action.\nThe smart contract logic checks if the <code class=\"docutils literal notranslate\"><span class=\"pre\">signature</span></code> was generated by the sponsoree with the <code class=\"docutils literal notranslate\"><span class=\"pre\">check_account_signature</span></code> host function.\nThis function looks up the public key/keys associated with the signer address and verifies that the signer has generated the <code class=\"docutils literal notranslate\"><span class=\"pre\">signature</span></code> by signing the <code class=\"docutils literal notranslate\"><span class=\"pre\">message_hash</span></code>.</p>", "a[href=\"desktop-wallet/reset-data.html#delete-the-user-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Delete the user data<a class=\"headerlink\" href=\"#delete-the-user-data\" title=\"Link to this heading\">#</a></h2><p>Delete the following folder containing all the user data of the wallet:</p>", "a[href=\"release-notes/release-notes-lp.html#nodes\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Nodes<a class=\"headerlink\" href=\"#nodes\" title=\"Link to this heading\">#</a></h2><h3>Mainnet<a class=\"headerlink\" href=\"#mainnet\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/references/references-on-chain.html#contract-instances\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Contract instances<a class=\"headerlink\" href=\"#contract-instances\" title=\"Link to this heading\">#</a></h2><p>Contract instances are referenced via their <em>address</em>.\nAn address consists of an <em>index</em> and a <em>subindex</em>, both of which are\nnon-negative integers.</p><p>Example of a contract instance address:</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#view-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#view-function\" title=\"Link to this heading\">#</a></h3><p>The view function will return only the counters value so you need to update its return value as i8 and return it from the host.state().</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/setup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>If you have done the NFT minting tutorial, you will already have most of the necessary setup, including the Concordium Wallet for Web and necessary tools for authoring smart contracts. Otherwise, see <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Set up the development environment</span></a>. You need the following tools:</p>", "a[href=\"../smart-contracts/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"guides/create-proofs.html#membership-proofs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Membership proofs<a class=\"headerlink\" href=\"#membership-proofs\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"resources/glossary.html#term-Membership-proof\"><span class=\"xref std std-term\">Membership proofs</span></a> allow you to present a list of values to the user\u2019s wallet to determine whether the user has one of the required attributes in the list. For example, you might want to know if a user is a resident of the EU. You can present this as a membership proof to be verified by the wallet.</p><p>Relevant attributes for membership proofs are:</p>", "a[href=\"concepts/concepts-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Transactions overview<a class=\"headerlink\" href=\"#transactions-overview\" title=\"Link to this heading\">#</a></h1><p>A transaction on the Concordium blockchain is an operation which applies some change to the chain. All transactions are recorded on the chain and once recorded, they are immutable. A transaction always has one sender <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">account</span></a> and is signed using the <a class=\"reference internal\" href=\"resources/glossary.html#term-Private-keys\"><span class=\"xref std std-term\">keys</span></a> of this account.</p><p>The most basic transaction is the CCD transfer that is used to send CCD from one account to another. However, there are several transaction types on the Concordium blockchain.</p>", "a[href=\"guides/scheduled-release.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scheduled releases<a class=\"headerlink\" href=\"#scheduled-releases\" title=\"Link to this heading\">#</a></h1><p>Some transfers contain a release schedule. This means that the CCD in the transfer can be seen on the account, but they are locked until one or more specific points in time. While the funds are locked, they cannot be transferred, but they will be part of the total amount on the account. Scheduled releases <a class=\"reference internal\" href=\"desktop-wallet/single-sign-schedule.html#ccd-single-schedule-desktop\"><span class=\"std std-ref\">can only be created in the Desktop Wallet</span></a>. You can inspect when funds will be released in Desktop Wallet, Concordium Wallet for Mobile, and Concordium Legacy Wallet. For information about how to do this, see <a class=\"reference internal\" href=\"mobile-wallet/inspect-release-schedule-mw.html#inspect-release-schedule-mw\"><span class=\"std std-ref\">Inspect a release schedule</span></a>.</p>", "a[href=\"../smart-contracts-v0/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Link to this heading\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#u128-i128\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">U128</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I128</span></code><a class=\"headerlink\" href=\"#u128-i128\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string. The value must be within the bounds of the type.\nExample:</p>", "a[href=\"guides/gallery/gallery-backend.html#serve-statement-and-names\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Serve statement and names<a class=\"headerlink\" href=\"#serve-statement-and-names\" title=\"Link to this heading\">#</a></h2><p>The statement and the list of names are static, so they can easily be returned as responses to the corresponding requests.</p>", "a[href=\"../smart-contracts-v0/guides/deploy-module.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and\nthat you have a <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/setup-tools.html#setup-tools-v0\"><span class=\"std std-ref\">smart-contract module</span></a> ready to be deployed.</p><p>Since deploying a smart contract module is done in the form of a transaction,\nyou will also need to have <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> setup with an account with\nenough CCD to pay for the transaction.</p>", "a[href=\"../smart-contracts-v0/references/local-settings.html#contract-instance-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Contract Instance Names<a class=\"headerlink\" href=\"#contract-instance-names\" title=\"Link to this heading\">#</a></h3><p>Contract instance names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">contracts/contractNames.map</span></code>\nas JSON, and should look similar to the following:</p>", "a[href=\"guides/transaction-report.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a transaction report<a class=\"headerlink\" href=\"#create-a-transaction-report\" title=\"Link to this heading\">#</a></h1><p>A transaction report can be useful when you need to know transaction details, such as for tax reporting purposes.</p>", "a[href=\"guides/multisig-transfer.html#how-a-scheduled-transfer-works\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How a scheduled transfer works<a class=\"headerlink\" href=\"#how-a-scheduled-transfer-works\" title=\"Link to this heading\">#</a></h2><p>When you submit the transaction to the chain, the following happens:</p>", "a[href=\"guides/multi-credentials.html#receive-signatures-from-co-signers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Receive signatures from co-signers<a class=\"headerlink\" href=\"#receive-signatures-from-co-signers\" title=\"Link to this heading\">#</a></h2><p>When the co-signers have signed the transaction, they return the signed transaction proposal to you, and you have to import the files into the Desktop Wallet before you can submit the transaction to the chain.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html#example\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#example\" title=\"Link to this heading\">#</a></h2><p>This example demonstrates the difference in how the persistent state is handled.</p>", "a[href=\"nodes/troubleshoot-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node running on Windows<a class=\"headerlink\" href=\"#troubleshoot-a-node-running-on-windows\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to troubleshoot a node running on Windows on the Concordium network.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html#concordium-software\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium software<a class=\"headerlink\" href=\"#concordium-software\" title=\"Link to this heading\">#</a></h2><p>The tool to deploy and interact with smart contracts is\n<a class=\"reference internal\" href=\"../net/references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. It is distributed as part of the\n<a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> package.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.verify_ecdsa_secp256k1_signature\"]": "<dt class=\"sig sig-object py\" id=\"concordium.verify_ecdsa_secp256k1_signature\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">verify_ecdsa_secp256k1_signature</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">public_key</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signature</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">message</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Verify an ecdsa over secp256k1 signature with the bitcoin-core implementation.</p></dd>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interacting with the wCCD token protocol<a class=\"headerlink\" href=\"#interacting-with-the-wccd-token-protocol\" title=\"Link to this heading\">#</a></h1><h2>Query (non-state-mutative) functions<a class=\"headerlink\" href=\"#query-non-state-mutative-functions\" title=\"Link to this heading\">#</a></h2><p>The protocol has four query functions (<code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">supports</span></code>)\nthat you can invoke on the wCCD contract. Because the <code class=\"docutils literal notranslate\"><span class=\"pre\">schema</span></code> is already embedded,\nthe input parameters can be provided with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--parameter-json</span></code> flag.</p>", "a[href=\"release-notes/release-notes-lp.html#desktop-wallet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Desktop Wallet<a class=\"headerlink\" href=\"#desktop-wallet\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/baker-pool.html#research-a-staking-pool\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Research a staking pool<a class=\"headerlink\" href=\"#research-a-staking-pool\" title=\"Link to this heading\">#</a></h2><p>Before delegating stake to a staking pool, it is important to research the pool and get an idea of performance and how it is managed.</p><p>The first thing to check before delegating stake to a staking pool is the URL for the staking pool. This is information that the validator can provide about the pool. It is not required that the validator provide this, but recommended. You can find the URLs on <a class=\"reference internal\" href=\"resources/ccd-scan-staking.html#home-screen-baker\"><span class=\"std std-ref\">CCDScan</span></a>.</p>", "a[href=\"references/query-node.html#example\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#example\" title=\"Link to this heading\">#</a></h4>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#initorigin\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">initOrigin</span></code><a class=\"headerlink\" href=\"#initorigin\" title=\"Link to this heading\">#</a></h3><p>The account address which triggered the invocation of the init function, by\ninstantiating the smart contract.</p><p>Example:</p>", "a[href=\"concepts/concepts-baker.html#time-concepts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Time concepts<a class=\"headerlink\" href=\"#time-concepts\" title=\"Link to this heading\">#</a></h2><p>The Concordium blockchain divides time into <a class=\"reference internal\" href=\"resources/glossary.html#term-Epoch\"><span class=\"xref std std-term\">epochs</span></a>.</p><p>When considering the rewards and other validation-related concepts, the concept of an <em>epoch</em> is used as a unit of time that defines a period in which the set of current validators and stakes are fixed. Epochs have a duration of 1 hour and the duration is fixed at the <a class=\"reference internal\" href=\"resources/glossary.html#term-Genesis-Block\"><span class=\"xref std std-term\">Genesis block</span></a>. Each epoch has a nominal ending, and when a block is finalized after this nominal ending then epoch transition occurs.</p>", "a[href=\"concepts/concepts-baker.html#validator-keys\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Validator keys<a class=\"headerlink\" href=\"#validator-keys\" title=\"Link to this heading\">#</a></h2><p>A node uses a set of <a class=\"reference internal\" href=\"resources/glossary.html#term-Private-keys\"><span class=\"xref std std-term\">cryptographic keys</span></a> called validator keys to sign the blocks that it produces. The validator keys are uniquely determined from the associated account. The validator keys are used for signing the block that the node produces and for verifying whether the validator has won the <a class=\"reference internal\" href=\"resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">lottery</span></a> as described below. To become a validator node, the node must be configured with a set of validator keys. You generate the validator keys in the wallet when you add validation to an account. The validator node will start validation after the next <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a> once the transaction has been approved.</p>", "a[href=\"desktop-wallet/create-credentials-file.html#create-and-export-a-file-with-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Create and export a file with credentials<a class=\"headerlink\" href=\"#create-and-export-a-file-with-credentials\" title=\"Link to this heading\">#</a></h2><p>The creator of the account now has to import the file and add the credentials to the account. See <a class=\"reference internal\" href=\"guides/multi-credentials.html#multi-credentials\"><span class=\"std std-ref\">Add credentials to an account</span></a>.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html#rust-and-cargo\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Rust and Cargo<a class=\"headerlink\" href=\"#rust-and-cargo\" title=\"Link to this heading\">#</a></h2><p>First, <a class=\"reference external\" href=\"https://rustup.rs/\">install rustup</a>, which will install both <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> and <a class=\"reference external\" href=\"https://doc.rust-lang.org/cargo/\">Cargo</a> on your\nmachine.\nThen use <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> to install the Wasm target, which is used for compilation:</p>", "a[href=\"../smart-contracts-v0/general/introduction.html#what-are-smart-contracts-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are smart contracts for?<a class=\"headerlink\" href=\"#what-are-smart-contracts-for\" title=\"Link to this heading\">#</a></h2><p>Smart contracts can reduce the needed amount of trust in third-parties, in some cases\nremoving the need for a trusted third-party, in other cases reducing their\ncapabilities and thus reducing the amount of trust needed in them.</p><p>Because smart contracts are executed completely transparently, in a way that\nanybody with access to a node can verify, they can be very useful for ensuring\nagreement between parties.</p>", "a[href=\"guides/company-identities.html#import-created-accounts-into-concordium-client\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Import created accounts into <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code><a class=\"headerlink\" href=\"#import-created-accounts-into-concordium-client\" title=\"Link to this heading\">#</a></h4><p>To use the accounts created in the Concordium Company ID tool, you must use Concordium Client. You can download it <a class=\"reference internal\" href=\"installation/downloads.html#concordium-node-and-client-download\"><span class=\"std std-ref\">here</span></a>. For information about how to use it, see <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">Concordium Client</span></a>.</p><p>The account keys are primarily meant for clients to integrate into their key management solution and their software, e.g., an exchange integrating their trading platform with the Concordium chain.</p>", "a[href=\"guides/overview-shared-accounts.html#step-1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Step 1<a class=\"headerlink\" href=\"#step-1\" title=\"Link to this heading\">#</a></h3><p>A user creates the account that\u2019s going to be used as a shared account.\nSee <a class=\"reference internal\" href=\"guides/create-account.html#create-account\"><span class=\"std std-ref\">Create an account in the Desktop Wallet</span></a>.</p>", "a[href=\"guides/create-proofs.html#concordium-proof-explorer\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Proof Explorer<a class=\"headerlink\" href=\"#concordium-proof-explorer\" title=\"Link to this heading\">#</a></h2><p>If you want to familiarize yourself with how proofs work and can be constructed, you can use the <a class=\"reference external\" href=\"https://web3id-proof-explorer.testnet.concordium.com/\">Concordium Proof Explorer</a> to create proofs and send them to a Concordium Wallet for Web to see how they interact with account credentials and verifiable credentials. The Concordium Proof Explorer works on Testnet. You can use the <a class=\"reference external\" href=\"https://web3id-issuer-frontend.testnet.concordium.com/\">Web3Id Issuer Front End</a> to create verifiable credential to test with the proof explorer.</p>", "a[href=\"release-notes/release-notes-lp.html#concordium-ledger-app\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium LEDGER app<a class=\"headerlink\" href=\"#concordium-ledger-app\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying the piggy bank smart contract<a class=\"headerlink\" href=\"#deploying-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the third <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written and tested a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p><p>This part focuses on how you can deploy your developed piggy bank smart contract to the Concordium testnet and interact with it.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#inserting-ccd\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inserting CCD<a class=\"headerlink\" href=\"#inserting-ccd\" title=\"Link to this heading\">#</a></h3><p>The first interaction you will specify for your piggy bank is how to insert CCD into it.\nYou start by defining a receive function as:</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html#solana\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Solana<a class=\"headerlink\" href=\"#solana\" title=\"Link to this heading\">#</a></h3><p>The example code is taken from <a class=\"reference external\" href=\"https://github.com/solana-labs/example-helloworld\">example-helloworld</a> and adjusted.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#including-schemas-for-receive\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including schemas for receive<a class=\"headerlink\" href=\"#including-schemas-for-receive\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for the parameter, the return value, and/or the errors for receive\nfunctions, set the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">return_value</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code> attributes for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(..)]</span></code>-macro:</p>", "a[href=\"nodes/windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Windows nodes<a class=\"headerlink\" href=\"#windows-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Windows.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#chain-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Chain data<a class=\"headerlink\" href=\"#chain-data\" title=\"Link to this heading\">#</a></h2><p>Functions for reading information about the chain.</p>", "a[href=\"../smart-contracts/best-practices/development.html#external-calls\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">External Calls<a class=\"headerlink\" href=\"#external-calls\" title=\"Link to this heading\">#</a></h3><p>Treat every external call as a potential security risk.\nCalling another contract gives control to potentially malicious code that could make arbitrary calls to any other contract, including your own contract.\nCalls to your contract might change its state through entrypoints that permit updating the state; see the <a class=\"reference internal\" href=\"#best-practices-reentrancy\"><span class=\"std std-ref\">Reentrancy</span></a> section of this document.\nMoreover, you should not make any assumptions about energy consumption, or expect that the execution succeeds.\nYour contract should be able to correctly handle situations when the call to an external contract fails.</p>", "a[href=\"installation/downloads.html#mw-gen1\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Legacy Wallet<a class=\"headerlink\" href=\"#mw-gen1\" title=\"Link to this heading\">#</a></h2><p>The Concordium Legacy Wallet is available for iOS and Android\u2122. The Concordium Legacy Wallet supports iOS 13 or later and Android 8 or later.</p>", "a[href=\"guides/baker-windows.html#troubleshooting\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Link to this heading\">#</a></h3><p>If a node fails to start, for example because of a configuration issue, or stops unexpectedly, there will be an Error-level event in the <strong>Event Viewer</strong> that explains why. The following are common error scenarios and possible solutions.</p>", "a[href=\"guides/baker-pool.html#best-practices-for-validation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Best practices for validation<a class=\"headerlink\" href=\"#best-practices-for-validation\" title=\"Link to this heading\">#</a></h2><p>As a validator you should manage your validator node responsibily for the benefit of all users of the blockchain. The recommendations for validators are:</p>", "a[href=\"guides/low-code-nft-marketplace/marketplace.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low code NFT marketplace<a class=\"headerlink\" href=\"#low-code-nft-marketplace\" title=\"Link to this heading\">#</a></h1><p>To make it quicker and easier to develop and run an NFT marketplace, the Low-Code NFT Minting tool and marketplace have been created. It includes built-in smart contracts, a template user interface, and various functionalities, including the following:</p>", "a[href=\"desktop-wallet/accounts-desktop.html#more-options\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">More options<a class=\"headerlink\" href=\"#more-options\" title=\"Link to this heading\">#</a></h2><p>When you select <strong>Account list</strong> at the top of the window, the button name toggles to <strong>More options</strong>.</p>", "a[href=\"references/transactions.html#commands-for-showing-identity-information\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands for showing identity information<a class=\"headerlink\" href=\"#commands-for-showing-identity-information\" title=\"Link to this heading\">#</a></h2><p>To show the identity providers authorized by Concordium and a URL, enter:</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-updateoperator-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code> function<a class=\"headerlink\" href=\"#the-updateoperator-function\" title=\"Link to this heading\">#</a></h3><p>You can add one or more operator addresses to an address that you control.\nThese operators have access to your wCCD tokens\nat that address and can transfer or unwrap them on your behalf.\nYou should only add operator addresses that you trust. The <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code> function allows you\nto add and remove operators.\nFor example, a smart contract address is often added as an operator so it can\naccess your tokens to perform some smart contract operations\nwithout you having to interact with the smart contract again.</p>", "a[href=\"../smart-contracts/general/introduction.html#smart-contract-development-tools\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract development tools<a class=\"headerlink\" href=\"#smart-contract-development-tools\" title=\"Link to this heading\">#</a></h3><p>Concordium provides a number of tools to simplify the smart contract creation and deployment process.</p><p>The <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=Concordium.concordium-smart-contracts\">VSCode extension</a> can help you develop Concordium smart contracts. The extension sets up the editor for development, installs the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> smart contract development tool for all supported platforms, and provides commands in the editor for the essential workflows, such as building and testing smart contracts.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#selfbalance\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">selfBalance</span></code><a class=\"headerlink\" href=\"#selfbalance\" title=\"Link to this heading\">#</a></h3><p>A JSON string with the balance of the smart contract instance in micro CCD.</p><p>Example:</p>", "a[href=\"../smart-contracts/best-practices/development.html#operations-with-unknown-bound\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Operations with unknown bound<a class=\"headerlink\" href=\"#operations-with-unknown-bound\" title=\"Link to this heading\">#</a></h4><p>Interacting over data structures that store data updated by users can become expensive over time, once it has more and more entries.</p><p>Consider the following map for storing all user bids in an auction contract:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#senderpolicies\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">senderPolicies</span></code><a class=\"headerlink\" href=\"#senderpolicies\" title=\"Link to this heading\">#</a></h3><p>JSON array of the policies of the sender, see <a class=\"reference internal\" href=\"#context-sender-policy\"><span class=\"std std-ref\">Policy</span></a> for a\nreference a policy.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#unit\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Unit</span></code><a class=\"headerlink\" href=\"#unit\" title=\"Link to this heading\">#</a></h3><p>No bytes are produced no matter the value given here.</p>", "a[href=\"references/transactions.html#commands-for-showing-account-information\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands for showing account information<a class=\"headerlink\" href=\"#commands-for-showing-account-information\" title=\"Link to this heading\">#</a></h2><h3>Account sequence number<a class=\"headerlink\" href=\"#account-sequence-number\" title=\"Link to this heading\">#</a></h3><p>Each account on the Concordium blockchain has a <a class=\"reference internal\" href=\"resources/glossary.html#term-Transaction-Sequence-Number\"><span class=\"xref std std-term\">sequence number</span></a> and each\ntransaction signed by the account must have a sequence number. For a transaction\nto be considered valid its sequence number must be the next available one for\nthe account. The sequence number is maintained by all the bakers in order to\nvalidate transactions.</p><p>The sequence number can be looked up from an up to date node by running</p>", "a[href=\"guides/overview-desktop.html#before-you-start\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Before you start<a class=\"headerlink\" href=\"#before-you-start\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure you\u2019ve completed the following steps:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#selfaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">selfAddress</span></code><a class=\"headerlink\" href=\"#selfaddress\" title=\"Link to this heading\">#</a></h3><p>JSON object describing the contract address of the current smart contract\ninstance.\nMust contain the <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">subindex</span></code> fields with JSON numbers.</p><p>Example:</p>", "a[href=\"../smart-contracts/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-supports-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">supports</span></code> function<a class=\"headerlink\" href=\"#the-supports-function\" title=\"Link to this heading\">#</a></h3><p>You are ready now to invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">supports</span></code> function with the following command.</p>", "a[href=\"../smart-contracts/guides/migrate-contracts.html#migrating-advanced-state-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Migrating advanced state types<a class=\"headerlink\" href=\"#migrating-advanced-state-types\" title=\"Link to this heading\">#</a></h2><p>If your contract state directly, or indirectly, contains one or more advanced state types, i.e., <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/struct.StateMap.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StateMap</span></code></a>, <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/struct.StateSet.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StateSet</span></code></a>, or <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/struct.StateBox.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StateBox</span></code></a>, then you also need to make a small adjustment.\nThe advanced state types are generic over not only the types stored, such as the keys and values in a map but also over a type that implements the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.0.0/concordium_std/trait.HasStateApi.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HasStateApi</span></code></a> trait.\nThis is because the deprecated <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.1/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a> used a different implementation of the underlying contract state, i.e., a different implementation of <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.0.0/concordium_std/trait.HasStateApi.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HasStateApi</span></code></a>, than the Concordium nodes do.\nBut <a class=\"reference external\" href=\"https://docs.rs/concordium-std-derive/latest/concordium_smart-contract-testing\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> uses the exact same state implementation as the nodes do and it is therefore possible to specify the concrete type, <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/type.StateApi.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StateApi</span></code></a>, as the default.</p><p>Until the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.1/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a> module is completely removed, the libraries will still support it, and thus the generic parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">S</span></code> must still be present.</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"nodes/baker-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Ubuntu<a class=\"headerlink\" href=\"#run-a-validator-node-on-ubuntu\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a server that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"guides/sdks-apis.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">SDKs and APIs<a class=\"headerlink\" href=\"#sdks-and-apis\" title=\"Link to this heading\">#</a></h1><p>The following SDKs and APIs exist for developing on the Concordium network.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#log-events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Log events<a class=\"headerlink\" href=\"#log-events\" title=\"Link to this heading\">#</a></h2><p>Events can be logged during the execution of smart contract functions. This is\nthe case for both init and receive functions. The logs are designed for\noff-chain use, so that actors outside of the chain can monitor the events and\nreact to them. Logs are not accessible to smart contracts, or any other actor on\nthe chain. Events can be logged using a function supplied by the host\nenvironment.</p>", "a[href=\"references/query-node.html#list-accounts\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">List accounts<a class=\"headerlink\" href=\"#list-accounts\" title=\"Link to this heading\">#</a></h3><p>List the addresses of all accounts on the chain as of a specific block:</p>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/smart-contract.html#transfer-the-token\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer the token<a class=\"headerlink\" href=\"#transfer-the-token\" title=\"Link to this heading\">#</a></h2><p>Now you are ready to sell it from the marketplace. If you look what it does you see that it takes the <code class=\"docutils literal notranslate\"><span class=\"pre\">token_info</span></code> from input, gets the token\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">quantity</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">price</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">royalty</span></code> values from its state. With 2 <code class=\"docutils literal notranslate\"><span class=\"pre\">ensure!()</span></code> it checks first whether the quantity that user wants to buy is sufficient or not and the amount is enough to buy them. Then through <code class=\"docutils literal notranslate\"><span class=\"pre\">Cis2Client::transfer()</span></code> it completes the token\u2019s transfer operation, handles the payment with royalties, and removes token from the list.</p>", "a[href=\"guides/gallery/gallery-backend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the verifying backend<a class=\"headerlink\" href=\"#writing-the-verifying-backend\" title=\"Link to this heading\">#</a></h1><p>The backend does the following:</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/mint-xfer.html#view-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#view-function\" title=\"Link to this heading\">#</a></h2><p>Now check the current state of the cis2-nft token contract by invoking view function. The schema file you created in the build step is important here, because <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> uses it to deserialize the output while printing it.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#request-your-identity\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Request your identity<a class=\"headerlink\" href=\"#request-your-identity\" title=\"Link to this heading\">#</a></h2><p>Having set up your passcode, you must then submit a request for an identity.</p>", "a[href=\"installation/downloads.html#genesis-block\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Genesis block<a class=\"headerlink\" href=\"#genesis-block\" title=\"Link to this heading\">#</a></h2><p>The genesis block is included in node distributions.\nDownload the block separately to inspect it or to run a node in a custom configuration.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html#deployment\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Link to this heading\">#</a></h2><p>Deploying a module to the chain means submitting the module bytecode as a\ntransaction to the Concordium network. If <em>valid</em> this transaction will be\nincluded in a block. This transaction, as every other transaction, has an\nassociated cost. The cost is based on the size of the bytecode and is charged\nfor both checking validity of the module and on-chain storage.</p><p>The deployment itself does not execute a\nsmart contract. To execute, a user must first create an <em>instance</em> of a contract.</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developing smart contracts in Rust<a class=\"headerlink\" href=\"#developing-smart-contracts-in-rust\" title=\"Link to this heading\">#</a></h1><p>On the concordium blockchain smart contracts are deployed as Wasm modules, but\nWasm is designed primarily as a compilation target and is not convenient to\nwrite by hand.\nInstead you can write your smart contracts in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language, which\nhas good support for compiling to Wasm.</p><p>Smart contracts do not have to be written in Rust.\nThis is simply the first SDK provided.\nManually written Wasm, or Wasm compiled from C, C++, <a class=\"reference external\" href=\"https://github.com/AssemblyScript\">AssemblyScript</a>, and\nothers, is equally valid on the chain, as long as it adheres to the <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-module.html#wasm-limitations-v0\"><span class=\"std std-ref\">Wasm\nlimitations Concordium imposes</span></a>.</p>", "a[href=\"resources/ccd-scan-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Transactions overview<a class=\"headerlink\" href=\"#ccdscan-transactions-overview\" title=\"Link to this heading\">#</a></h1><p>The Transactions overview shows information about the transactions during the selected time range in the filter.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#viewing-the-state\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Viewing the state<a class=\"headerlink\" href=\"#viewing-the-state\" title=\"Link to this heading\">#</a></h3><p>Now that you can smash and insert CCD into a piggy bank, you can add a way to\ncheck the current state and balance of the piggy bank.\nThis is what the return values of receive methods are for:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#add-a-test-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add a test module<a class=\"headerlink\" href=\"#add-a-test-module\" title=\"Link to this heading\">#</a></h2><p>Since a smart contract module is written as a Rust library, you can test it as\none would test any library and write unit-tests as part of the Rust module.</p><p>At the bottom of the <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code> file containing our code, make sure you have the\nfollowing starting point:</p>", "a[href=\"guides/run-node-macos.html#connect-a-node-to-the-desktop-wallet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Connect a node to the Desktop Wallet<a class=\"headerlink\" href=\"#connect-a-node-to-the-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>You can also verify that a node is running by connecting it to the Desktop Wallet.</p>", "a[href=\"guides/low-code-nft-marketplace/minting-tool.html#install-the-minting-tool\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install the minting tool<a class=\"headerlink\" href=\"#install-the-minting-tool\" title=\"Link to this heading\">#</a></h2><p>Before starting, make sure that you have the following installed:</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#chain-meta-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Chain meta data<a class=\"headerlink\" href=\"#chain-meta-data\" title=\"Link to this heading\">#</a></h2><p>Both the init- and receive-context contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code> section containing\ninformation of the blockchain at the block the smart contract is executed in.\nThis block is referred to as the <em>current block</em> below.</p><p>Example:</p>", "a[href=\"resources/ccd-scan-blocks.html#block-details\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Block details<a class=\"headerlink\" href=\"#block-details\" title=\"Link to this heading\">#</a></h2><p>When you click a block hash, the following appears:</p>", "a[href=\"concepts/concepts-transactions.html#how-transactions-work\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How transactions work<a class=\"headerlink\" href=\"#how-transactions-work\" title=\"Link to this heading\">#</a></h2><p>When a validator receives a transaction from a participant on the chain, it performs a few basic checks to verify that the transaction is eligible for <em>inclusion</em> in a <a class=\"reference internal\" href=\"resources/glossary.html#term-Block\"><span class=\"xref std std-term\">block</span></a>. Transactions that meet all checks are considered <em>successful</em> and their changes are applied to the chain. If any of the checks fail, the transaction is ignored.</p><p>In some situations, transactions are included in the blockchain but recorded as <em>rejected</em>. This can happen, for example, if a sender tries to overdraw their account. If a transaction is rejected, the transaction fee is still deducted from the sender account but other than that, it has no effect.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#export-a-transaction-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Export a transaction proposal<a class=\"headerlink\" href=\"#export-a-transaction-proposal\" title=\"Link to this heading\">#</a></h2><p>To propose a transaction to other co-signers, you have to share a file with them of the type JSON, which contains the transaction information.</p>", "a[href=\"release-notes/release-notes-lp.html#vscode-extension\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">VSCode extension<a class=\"headerlink\" href=\"#vscode-extension\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/general/contract-instances.html#immutability\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Immutability<a class=\"headerlink\" href=\"#immutability\" title=\"Link to this heading\">#</a></h3><p>Only the smart contract itself can trigger an upgrade of its module, meaning that smart contracts\nare immutable when they do not contain any code for triggering an upgrade.</p>", "a[href=\"guides/overview-shared-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shared accounts with multiple credentials in Desktop Wallet<a class=\"headerlink\" href=\"#shared-accounts-with-multiple-credentials-in-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>In the Desktop Wallet, you have the option of creating shared accounts, also known as multi-signature accounts. This is useful, for example, if your organization wants to allow multiple people to manage an account, or if you\u2019re part of a group of people who want to share an account. In these cases, more credentials must be added to an account.</p>", "a[href=\"../smart-contracts/guides/compile-module.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure to have Rust and Cargo installed and the <code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code>\ntarget, together with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> and the Rust source code for a smart\ncontract module, you wish to compile.</p>", "a[href=\"../smart-contracts/references/schema-json.html#pair\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Pair</span></code><a class=\"headerlink\" href=\"#pair\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with two items, depending on the\nnested types. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Pair(U8,</span> <span class=\"pre\">ContractAddress)</span></code>:</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modifications<a class=\"headerlink\" href=\"#smart-contract-modifications\" title=\"Link to this heading\">#</a></h1><p>You are using the example contract from Concordium\u2019s examples and it\u2019s ready to use. If you want to use it as is you can do it for your project. But in this tutorial you will add a couple of things and update some functions to give more flexibility.</p><p>First, you will add a new struct called <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadata</span></code>. It needs to implement the <code class=\"docutils literal notranslate\"><span class=\"pre\">Serialize</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code> traits for the sake of deserialization of the contract you need it. For those who are familiar with the Ethereum ecosystem it\u2019s like the ABI.</p>", "a[href=\"../smart-contracts/guides/setup-tools.html#cargo-concordium\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code><a class=\"headerlink\" href=\"#cargo-concordium\" title=\"Link to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> is the tool for developing smart contracts for the Concordium\nblockchain.\nIt can be used for <a class=\"reference internal\" href=\"../smart-contracts/guides/compile-module.html#compile-module\"><span class=\"std std-ref\">compiling</span></a> and\n<a class=\"reference internal\" href=\"../smart-contracts/guides/integration-test-contract.html#integration-test-contract\"><span class=\"std std-ref\">testing</span></a> smart contracts, and enables features such as\n<a class=\"reference internal\" href=\"../smart-contracts/guides/build-schema.html#build-schema\"><span class=\"std std-ref\">building contract schemas</span></a>.</p><p>To install <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> run:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#invoker\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">invoker</span></code><a class=\"headerlink\" href=\"#invoker\" title=\"Link to this heading\">#</a></h3><p>The account address which made the transaction triggering the invocation of the\nreceive function, by updating a smart contract instance.</p><p>Example:</p>", "a[href=\"guides/dapp-examples.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">dApp examples<a class=\"headerlink\" href=\"#dapp-examples\" title=\"Link to this heading\">#</a></h1><p>Select an example to see more information about it, such as a hosted dApp for you to try, links to tutorials, repositories, and more.</p><p>Starting a new project on the Concordium blockchain? Have a look at the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-starter\">dApp starter template</a>!</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#identityprovider\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">identityProvider</span></code><a class=\"headerlink\" href=\"#identityprovider\" title=\"Link to this heading\">#</a></h3><p>The id of the identity provider as a JSON number.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#minting\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Minting<a class=\"headerlink\" href=\"#minting\" title=\"Link to this heading\">#</a></h2><p>First, add the changes to your contract for the minting parameters that you require when <code class=\"docutils literal notranslate\"><span class=\"pre\">mint()</span></code> is invoked. It will ask for the minting amount and <code class=\"docutils literal notranslate\"><span class=\"pre\">max_supply</span></code>. Create a struct called <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenParams</span></code> and add this to the tokens tree as shown below.</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-url\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.url<a class=\"headerlink\" href=\"#collector-url\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_create_entry\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_create_entry\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_create_entry</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Create an empty entry with the given key.\nIf an entry at that key already exists it is set to the empty entry.</p></dd>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract implementation for fungible tokens<a class=\"headerlink\" href=\"#smart-contract-implementation-for-fungible-tokens\" title=\"Link to this heading\">#</a></h1><p>For your token contract, use the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi contract from Concordium\u2019s example smart contract repository on GitHub</a>. You will make some minor modifications to it in this tutorial, such as the maximum supply of your token, circulating supply, and a burn function. Basically, no one will be able to mint a token again if it already met the maximum supply. Your token will be deflationary in that sense. Burning a token will not affect the circulating supply; if you want, you can adjust the corresponding function so it could affect circulating supply.</p>", "a[href=\"guides/setup-wallets-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a wallet<a class=\"headerlink\" href=\"#set-up-a-wallet\" title=\"Link to this heading\">#</a></h1><p>Choose your wallet for instructions about installation and configuration.</p>", "a[href=\"guides/become-baker.html#check-the-status-of-the-validator-and-its-lottery-power\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Check the status of the validator and its lottery power<a class=\"headerlink\" href=\"#check-the-status-of-the-validator-and-its-lottery-power\" title=\"Link to this heading\">#</a></h3><p>To see if the node is producing blocks, you can check various sources that offer different degrees of precision in the information displayed.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#define-interaction-with-piggy-banks\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Define interaction with piggy banks<a class=\"headerlink\" href=\"#define-interaction-with-piggy-banks\" title=\"Link to this heading\">#</a></h2><p>You have now defined how instances of your smart contract are created, and the\nsmart contract is in principle a valid contract.\nHowever, you would also like to define how to interact with instances of your\ncontract, specifically how to add CCD to it and how to smash a piggy bank.</p><p>A smart contract can expose zero or more functions for interacting with an\ninstance.\nThese functions are called receive functions.\nThey can access the state of the instance and the blockchain and perform\nactions, such as transferring CCD to an account or invoking another contract instance.\nReceive functions are immutable/readonly by default, which means that they\ncannot mutate the state.\nYou will look at mutable receive methods when it\u2019s time to implement smashing the piggy bank.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint a semi-fungible token<a class=\"headerlink\" href=\"#mint-a-semi-fungible-token\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you will learn how to mint semi-fungible tokens on Concordium testnet with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, the Concordium command line interface tool.  In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/nft-minting/index.html#nft-index\"><span class=\"std std-ref\">NFT minting tutorial</span></a>, you learned many things, including how you can mint an NFT on Concordium and set up your development environment with node configurations, wallet and key exports, build, deploy, initialize, mint and transfer. The process in this tutorial will be the same as the first tutorial: first is the wallet setup and key exports, then the storage solutions and preparation of metadata, and finally the development part including minting, transferring and querying balances.</p><p>Before you start this tutorial, if you have not completed your development environment setup, see <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a>. This tutorial assumes you\u2019ve already configured your environment, have a node running, and installed your web wallet and exported its key.</p>", "a[href=\"references/query-node.html#transaction-status\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transaction status<a class=\"headerlink\" href=\"#transaction-status\" title=\"Link to this heading\">#</a></h2><p>Display the lifecycle state of a <a class=\"reference internal\" href=\"resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transaction</span></a> (pending, committed, finalized,\nor absent).</p><p>If the transaction is committed or finalized, the status (success or rejected)\nand execution cost is included as well.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Understanding the wCCD smart contract<a class=\"headerlink\" href=\"#understanding-the-wccd-smart-contract\" title=\"Link to this heading\">#</a></h1><p>The native currency on the Concordium blockchain is CCD. When other tokens are\nbuilt on the Concordium blockchain, they often use the recommended <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code>\ntoken standard. This has the advantage that other dApps (decentralized apps)\ncan rely on some basic rules for how to interact with the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code>\ntokens and on some basic rules for how the apps can retrieve events and data from the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code> tokens.\nThe native currency CCD has a special purpose in the Concordium\nblockchain network and does not comply with the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code> token standard.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#write-a-smart-contract-using-concordium-std\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Write a smart contract using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code><a class=\"headerlink\" href=\"#write-a-smart-contract-using-concordium-std\" title=\"Link to this heading\">#</a></h2><p>It is recommended to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code> crate, which provides a\nmore Rust-like experience for developing smart contract modules and calling\nhost functions.</p><p>The crate enables writing init and receive functions as simple Rust\nfunctions annotated with <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(...)]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...)]</span></code>, respectively.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html#smart-contracts-and-programs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contracts and programs<a class=\"headerlink\" href=\"#smart-contracts-and-programs\" title=\"Link to this heading\">#</a></h2><p>Concordium <em>smart contracts</em> serve the same purpose as <em>programs</em> on Solana.\nHowever, some details are different in how these two are structured.</p><p>Solana programs take a list of accounts as input.\nSome of these accounts can be used to store persistent data, that is, data that is stored after the contract invocation is completed.\nConcordium uses smart contract states for that purpose.\nEach contract on Concordium can write to its own state directly.\nModifying the state of other smart contracts is only possible by calling their entrypoints.\nSmart contracts cannot read/write arbitrary data from/to user accounts, but they can transfer CCD they own to any user account and other smart contracts.\nNote that CCD cannot be transferred to the smart contract balance without calling a specific entrypoint or a <a class=\"reference internal\" href=\"../smart-contracts/guides/fallback-entrypoints.html#fallback-entrypoints\"><span class=\"std std-ref\">fallback entrypoint</span></a>.\nThe smart contract logic determines whether to accept CCD or not.</p>", "a[href=\"references/concordium-client.html#configuration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configuration<a class=\"headerlink\" href=\"#configuration\" title=\"Link to this heading\">#</a></h2><p>You can store accounts and their keys on disk to avoid having to pass them as\ncommand-line options.</p><p>Accounts may also be associated with names which may then be used in place of\nthe address throughout the client\u2019s commands. This is an entirely local feature\nfor convenience and may be done for any account \u2014 it does not require possession\nof the account\u2019s keys.</p>", "a[href=\"../smart-contracts/references/schema-json.html#u128-i128\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">U128</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I128</span></code><a class=\"headerlink\" href=\"#u128-i128\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string. The value must be within the bounds of the type.\nExample:</p>", "a[href=\"../smart-contracts-v0/guides/custom-errors.html#defining-and-deriving\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Defining and deriving<a class=\"headerlink\" href=\"#defining-and-deriving\" title=\"Link to this heading\">#</a></h2><p>Custom error codes help communicate why a contract rejects and can be returned\nboth during initialization and during updates.</p><p>On-chain, smart contracts return a numeric error code when rejecting. This is\nalso the case when using a custom error type. Therefore, a mapping from the\ncustom error type to <code class=\"docutils literal notranslate\"><span class=\"pre\">Reject</span></code>, in the form of an implementation of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">From&lt;MyError&gt;</span> <span class=\"pre\">for</span> <span class=\"pre\">Reject</span></code>, is needed. You can also derive it\nautomatically using <code class=\"docutils literal notranslate\"><span class=\"pre\">#[derive(Reject)]</span></code>:</p>", "a[href=\"guides/run-node-windows.html#connect-a-node-to-the-desktop-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Connect a node to the Desktop Wallet<a class=\"headerlink\" href=\"#connect-a-node-to-the-desktop-wallet\" title=\"Link to this heading\">#</a></h2><p>You can also verify that a node is running by connecting it to the Desktop Wallet.</p>", "a[href=\"guides/multisig-transfer.html#make-a-transfer-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Make a transfer proposal<a class=\"headerlink\" href=\"#make-a-transfer-proposal\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/run-node-macos.html#uninstall-a-macos-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Uninstall a macOS node<a class=\"headerlink\" href=\"#uninstall-a-macos-node\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/setup-env.html#sync-your-node\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Sync your node<a class=\"headerlink\" href=\"#sync-your-node\" title=\"Link to this heading\">#</a></h3><p>Start the syncing process of the testnet node by following the guide for your platform <a class=\"reference internal\" href=\"../net/nodes/ubuntu.html#ubuntu-node\"><span class=\"std std-ref\">Ubuntu</span></a>, <a class=\"reference internal\" href=\"../net/nodes/docker.html#docker-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"../net/nodes/windows.html#windows-node\"><span class=\"std std-ref\">Windows</span></a>, or <a class=\"reference internal\" href=\"../net/nodes/macos.html#macos-node\"><span class=\"std std-ref\">MacOS</span></a>. This step currently takes some time, potentially hours based on your device configuration, because your node is freshly started and needs to recover all the previous blocks.</p><p>You should find your node name on the <a class=\"reference external\" href=\"https://dashboard.testnet.concordium.com/\">Concordium testnet dashboard</a>. It will take less than a day until your testnet node is fully synced. You can observe the syncing process by watching the finalization length of your node. Wait until the <code class=\"docutils literal notranslate\"><span class=\"pre\">Fin</span> <span class=\"pre\">Length</span></code> (finalization length) of your node is the same as the highest value used by the majority of nodes. Once the height value is the same as the height in <a class=\"reference external\" href=\"https://testnet.ccdscan.io/blocks\">CCDScan</a>, then you can continue with the development.</p>", "a[href=\"references/concordium-client.html#example\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example:<a class=\"headerlink\" href=\"#example\" title=\"Link to this heading\">#</a></h4><p>Note that listed location of the configuration is the path inside the Docker\ncontainer.</p>", "a[href=\"installation/downloads.html#concordium-ledger-app\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium LEDGER App<a class=\"headerlink\" href=\"#concordium-ledger-app\" title=\"Link to this heading\">#</a></h2><p>Install the LEDGER App for use with the Desktop Wallet from LEDGER Live. For information, see <a class=\"reference internal\" href=\"guides/overview-desktop.html#install-ledger\"><span class=\"std std-ref\">Install the LEDGER app</span></a>.</p>", "a[href=\"guides/deciding-wallet.html#comparison\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison<a class=\"headerlink\" href=\"#comparison\" title=\"Link to this heading\">#</a></h2><p>The following table lists the major features of each wallet.</p>", "a[href=\"resources/ccd-scan-nodes.html#node-details\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node details<a class=\"headerlink\" href=\"#node-details\" title=\"Link to this heading\">#</a></h2><p>When you click a node name on the Nodes page, the following appears:</p><p>The following information is shown in the node details:</p>", "a[href=\"../smart-contracts/general/contract-schema.html#embed-schemas-on-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Embed schemas on-chain<a class=\"headerlink\" href=\"#embed-schemas-on-chain\" title=\"Link to this heading\">#</a></h2><p>Schemas are embedded into smart contract modules using the <a class=\"reference external\" href=\"https://webassembly.github.io/spec/core/appendix/custom.html\">custom\nsection</a> feature of Wasm modules.\nThis allows Wasm modules to include a named section of bytes, which does not\naffect the semantics of running the Wasm module.</p><p>The module can contain a schema in one of two different custom sections. This collection is a list of pairs, containing the name of the contract encoded\nin UTF-8 and the contract schema bytes. The section <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-schema</span></code> is the most common and is what the current tooling produces.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#concordium-tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium tools<a class=\"headerlink\" href=\"#concordium-tools\" title=\"Link to this heading\">#</a></h2>", "a[href=\"concepts/id-accounts.html#obtain-an-identity\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Obtain an identity<a class=\"headerlink\" href=\"#obtain-an-identity\" title=\"Link to this heading\">#</a></h3><p>You can <a class=\"reference internal\" href=\"guides/create-identity.html#create-initial-account\"><span class=\"std std-ref\">create identities</span></a> in the Desktop Wallet, Concordium Legacy Wallet, Concordium Wallet for Mobile, or Concordium Wallet for Web. Identity creation is an <a class=\"reference internal\" href=\"resources/glossary.html#term-Off-chain\"><span class=\"xref std std-term\">off-chain</span></a> action. If you are creating your first identity on a mobile device, Concordium strongly recommends using Concordium Wallet for Mobile.</p>", "a[href=\"references/transactions.html#shield-an-amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Shield an amount<a class=\"headerlink\" href=\"#shield-an-amount\" title=\"Link to this heading\">#</a></h3><p>The command to <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-amount\"><span class=\"xref std std-term\">shield</span></a> an amount with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">account</span>\n<span class=\"pre\">shield</span></code>. For example, an interaction to shield 10 CCD on account A looks like the following.</p><p>The command is:</p>", "a[href=\"../smart-contracts/guides/compile-module.html#non-verifiable-builds\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Non-verifiable builds<a class=\"headerlink\" href=\"#non-verifiable-builds\" title=\"Link to this heading\">#</a></h3><p>Omitting the <code class=\"docutils literal notranslate\"><span class=\"pre\">--verifiable</span></code> option from the build command will make a build on the host machine.\nThis is typically not verifiable since the Rust toolchain is affected by the build environment.\nHowever, for local development, non-verifiable builds can be useful.</p><p>By default, running the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">build</span></code> command will produce a smart contract module which can be found\nrelative to your project root folder in <code class=\"docutils literal notranslate\"><span class=\"pre\">./target/concordium/wasm32-unknown-unknown/release/my_module.wasm.v1</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">--out</span></code> option can be supplied also for non-verifiable builds.\nFor example, running the following command will output your smart contract module into the root folder of your project in a file called <code class=\"docutils literal notranslate\"><span class=\"pre\">my_module.wasm.v1</span></code>.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html#floating-point-numbers\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Floating point numbers<a class=\"headerlink\" href=\"#floating-point-numbers\" title=\"Link to this heading\">#</a></h4><p>Although Wasm does have support for floating point numbers, a smart contract is\ndisallowed to use them. The reason for this is that Wasm floating-point numbers\ncan have a special <code class=\"docutils literal notranslate\"><span class=\"pre\">NaN</span></code> (\u201cnot a number\u201d) value whose treatment can result in nondeterminism.</p><p>The restriction applies statically, meaning that smart contracts cannot contain\nfloating point types, nor can they contain any instructions that involve floating\npoint values.</p>", "a[href=\"guides/multi-credentials.html#add-more-credentials-on-an-account\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add more credentials on an account<a class=\"headerlink\" href=\"#add-more-credentials-on-an-account\" title=\"Link to this heading\">#</a></h2><p>This guide describes how you add more credentials to an account, and how you <a class=\"reference internal\" href=\"#guide-change-signature\"><span class=\"std std-ref\">change the signature threshold for transactions</span></a> on the account. For more information about the process of sharing an account, see <a class=\"reference internal\" href=\"guides/overview-shared-accounts.html#overview-shared-accounts\"><span class=\"std std-ref\">Overview of shared accounts with multiple credentials</span></a>.</p>", "a[href=\"guides/run-local-chain.html#generate-genesis-data-and-account-credentials\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate genesis data and account credentials<a class=\"headerlink\" href=\"#generate-genesis-data-and-account-credentials\" title=\"Link to this heading\">#</a></h3><p>Use the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-misc-tools/tree/main/genesis-creator\">genesis-creator</a> tool to generate genesis block data and credentials for the foundation and (initial) validator accounts.</p>", "a[href=\"snippets/delegation-faq.html#for-validators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For validators<a class=\"headerlink\" href=\"#for-validators\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/sft-minting/mint-xfer.html#view-contract-state-and-metadata\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View contract state and metadata<a class=\"headerlink\" href=\"#view-contract-state-and-metadata\" title=\"Link to this heading\">#</a></h2><p>Now check the state of your contract. Remember this is a state-keeping machine. You will use the extracted schema file to view what is going on with your smart contract. Run the following command; you will need to know your contract index and have the schema file.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#remove-the-bw\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Remove the Concordium Wallet for Web<a class=\"headerlink\" href=\"#remove-the-bw\" title=\"Link to this heading\">#</a></h2><p>Removing your wallet does not remove your data on the Concordium blockchain.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"../smart-contracts/tutorials/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tutorials<a class=\"headerlink\" href=\"#tutorials\" title=\"Link to this heading\">#</a></h1><p>You can go through a number of different tutorials to sharpen your skills as\na dApp (decentralized application) developer on the Concordium blockchain.</p><p>In <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the developer enviroment</span></a> you learn how to set up the development enviroment for working with smart contracts.</p>", "a[href=\"nodes/baker-docker.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/guides/no-std.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Compiling <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> without the <code class=\"docutils literal notranslate\"><span class=\"pre\">std</span></code> feature requires using the rust\nnightly toolchain, which can be installed using <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code>:</p>", "a[href=\"../smart-contracts/tutorials/voting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The Voting dApp<a class=\"headerlink\" href=\"#the-voting-dapp\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed voting dApp on testnet. The voting dApp example is intended to show how you can use Concordium to conduct an election using the Concordium Wallet for Web to enable users to cast their vote in your election.\nYou are going to write a basic web front-end example that can read from and write to the deployed smart contract on testnet.</p><p>If you want to try this example before starting the tutorial:</p>", "a[href=\"concepts/concepts-delegation.html#pools-and-rewards\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pools and Rewards<a class=\"headerlink\" href=\"#pools-and-rewards\" title=\"Link to this heading\">#</a></h2><p>A validator opens a <a class=\"reference internal\" href=\"resources/glossary.html#term-Staking-pool\"><span class=\"xref std std-term\">staking pool</span></a>, and other CCD holders delegate some stake to this pool. The probability that the validator running the pool is chosen to produce the next block is then proportional to the total stake in the pool. When the pool rewards are distributed, the validator takes a commission and the rest of the rewards are distributed to the pool members in proportion to their stakes in the pool. For example, suppose that a pool has 10,000 CCD. And suppose that in a 24 hour period this pool earns 30 CCD as reward and the commission of the validator is 10%. The validator receives 3 CCD as commission. The rest (27 CCD) is distributed to the members of the pool according to their relative stake in their pool. This means a party with 1,000 CCD in the pool will receive 2.7 CCD.</p><p>Pool rewards are in two categories: block rewards and transaction fee rewards. These can have separate commission rates. A validator sets the delegation commission for their pool. They can set both values to anything between 0% and 100%.</p>", "a[href=\"nodes/run-node-ubuntu.html#run-a-validator-node-on-ubuntu\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Ubuntu<a class=\"headerlink\" href=\"#run-a-validator-node-on-ubuntu\" title=\"Link to this heading\">#</a></h2><p>For information about how to configure a node to run as a validator, see <a class=\"reference internal\" href=\"nodes/baker-ubuntu.html#baker-ubuntu\"><span class=\"std std-ref\">Run a validator node on Ubuntu</span></a>.</p>", "a[href=\"web3-id/issuer.html#how-to-become-an-issuer\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How to become an issuer<a class=\"headerlink\" href=\"#how-to-become-an-issuer\" title=\"Link to this heading\">#</a></h2><p>An issuer needs to have the following components.</p>", "a[href=\"../smart-contracts/guides/custom-errors.html#using-custom-errors\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using custom errors<a class=\"headerlink\" href=\"#using-custom-errors\" title=\"Link to this heading\">#</a></h2><p>Return custom errors, as you would with any other error type:</p>", "a[href=\"../smart-contracts/guides/json-params.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Work with the JSON parameters<a class=\"headerlink\" href=\"#work-with-the-json-parameters\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to interact with the CIS-2 smart contract functions by providing input JSON parameters. This guide uses the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi smart contract</a> as a starting point, and then continues with a couple of custom input types.</p><p>A smart contract implementing CIS-2 must export the following functions: <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code>. This topic briefly describes what the required functions do and how to interact with them using JSON parameters one by one.</p>", "a[href=\"snippets/delegation-faq.html#for-delegators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For delegators<a class=\"headerlink\" href=\"#for-delegators\" title=\"Link to this heading\">#</a></h2>", "a[href=\"nodes/baker-ubuntu.html#verify-that-a-node-is-a-validator-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Verify that a node is a validator node<a class=\"headerlink\" href=\"#verify-that-a-node-is-a-validator-node\" title=\"Link to this heading\">#</a></h2><p>Two <a class=\"reference internal\" href=\"resources/glossary.html#term-Epoch\"><span class=\"xref std std-term\">epochs</span></a> must have elapsed before you can see the validator ID of the node on the dashboard.</p><p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> to see the status of the node. For more information, see <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">Concordium Client</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/build-smart-contract.html#build-the-contract-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build the contract module<a class=\"headerlink\" href=\"#build-the-contract-module\" title=\"Link to this heading\">#</a></h2><p>Make sure you are working in the correct directory, and create a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist</span></code> folder for your files: schema and smart contract compiled into Wasm. One small reminder here, remember CIS-2 is a standard that allows you to mint fungible, non-fungible and semi-fungible tokens. Concordium\u2019s token standard is applicable to all types of tokens. Once you have created the folder, run the following command.</p>", "a[href=\"concepts/id-accounts.html#about-identities\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">About identities<a class=\"headerlink\" href=\"#about-identities\" title=\"Link to this heading\">#</a></h2><p>Identities are issued by an <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>. There is a <a class=\"reference internal\" href=\"references/transactions.html#identity-commands\"><span class=\"std std-ref\">registry of selected identity providers and their contact information publicly accessible from the Concordium blockchain</span></a>. Concordium Foundation will maintain the list in the beginning.</p>", "a[href=\"installation/downloads.html#company-identity-management-tool-v1-0-2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Company identity management tool v1.0.2<a class=\"headerlink\" href=\"#company-identity-management-tool-v1-0-2\" title=\"Link to this heading\">#</a></h3><p>Use this tool to create a company identity, request accounts using a company identity, and recover a company identity.</p>", "a[href=\"guides/run-node-ubuntu.html#run-a-validator-node-on-ubuntu\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Ubuntu<a class=\"headerlink\" href=\"#run-a-validator-node-on-ubuntu\" title=\"Link to this heading\">#</a></h2><p>For information about how to configure a node to run as a validator, see <a class=\"reference internal\" href=\"nodes/baker-ubuntu.html#baker-ubuntu\"><span class=\"std std-ref\">Run a validator node on Ubuntu</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-transfer-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer</span></code> function<a class=\"headerlink\" href=\"#the-transfer-function\" title=\"Link to this heading\">#</a></h3><p>You can transfer the wCCD tokens from one address to another address.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-balanceof-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf</span></code> function<a class=\"headerlink\" href=\"#the-balanceof-function\" title=\"Link to this heading\">#</a></h3><p>You are ready now to invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf</span></code> function with the following command.</p>", "a[href=\"nodes/node-runner-service-configuration.html#rpc-port\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">rpc.port<a class=\"headerlink\" href=\"#rpc-port\" title=\"Link to this heading\">#</a></h3><p>(integer; optional)</p>", "a[href=\"concepts/concepts-transactions.html#the-mw-gen2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#the-mw-gen2\" title=\"Link to this heading\">#</a></h3><p>The Concordium Wallet for Mobile is a second generation digital smartphone wallet that enables you to create and manage your Concordium identities and accounts, to create simple and shielded transactions, validate and delegate, add and manage tokens, connect to dApps, and to export and import your accounts and identities.</p>", "a[href=\"nodes/run-node-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on a server with Ubuntu on Testnet<a class=\"headerlink\" href=\"#run-a-node-on-a-server-with-ubuntu-on-testnet\" title=\"Link to this heading\">#</a></h1><p>This guide describes how organizations can run a node on the Concordium network from a server and how to set up the node to run as a <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#baker-node-ubuntu\"><span class=\"std std-ref\">validator node</span></a>.</p><p>You can also watch the video to learn how to run a node with Ubuntu.</p>", "a[href=\"guides/run-node-windows.html#configure-the-concordium-node-service\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure the Concordium Node Service<a class=\"headerlink\" href=\"#configure-the-concordium-node-service\" title=\"Link to this heading\">#</a></h2><p>You can change the mainnet or testnet node configuration with the Configure Concordium Node Service.</p>", "a[href=\"desktop-wallet/single-sign-schedule.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer CCD with a schedule in Desktop Wallet<a class=\"headerlink\" href=\"#transfer-ccd-with-a-schedule-in-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>This topic describes how you can send CCD from an account with only one signer with a schedule. If you want to learn about sending CCD with a schedule when more co-signers are required, see <a class=\"reference internal\" href=\"guides/multisig-transfer.html#create-multisig-scheduled\"><span class=\"std std-ref\">Create a scheduled multi-signature CCD transfer in the Desktop Wallet</span></a>.</p><p>You can create two types of release schedules: a regular interval\nschedule and an explicit schedule.</p>", "a[href=\"guides/create-proofs.html#asking-a-user-to-reveal-attributes\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Asking a user to reveal attributes<a class=\"headerlink\" href=\"#asking-a-user-to-reveal-attributes\" title=\"Link to this heading\">#</a></h2><p>You can construct a reveal statement in which the wallet owner must consent to reveal one or more specific attributes.</p><p>In the example below, the wallet owner\u2019s country of residence is requested to be revealed.</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#building-a-smart-contract-module-with-cargo-concordium\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building a smart contract module with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code><a class=\"headerlink\" href=\"#building-a-smart-contract-module-with-cargo-concordium\" title=\"Link to this heading\">#</a></h2><p>The Rust compiler has good support for compiling to Wasm using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code> target.\nHowever, even when compiling with <code class=\"docutils literal notranslate\"><span class=\"pre\">--release</span></code> the resulting build includes\nlarge sections of debug information in custom sections, which are not useful for\nsmart contracts on-chain.</p><p>To optimize the build and allow for new features such as embedding schemas, Concordium\nrecommends using <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> to build smart contracts.</p>", "a[href=\"guides/run-local-chain.html#interact-with-the-local-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with the local chain<a class=\"headerlink\" href=\"#interact-with-the-local-chain\" title=\"Link to this heading\">#</a></h2><p>You can now interact with your local chain through the node via the <a class=\"reference internal\" href=\"references/grpc2.html#grpc2-documentation\"><span class=\"std std-ref\">Concordium Node gRPC API V2</span></a> exposed on port 20100 as you would with <a class=\"reference internal\" href=\"resources/glossary.html#term-Mainnet\"><span class=\"xref std std-term\">Mainnet</span></a> or <a class=\"reference internal\" href=\"resources/glossary.html#term-Testnet\"><span class=\"xref std std-term\">Testnet</span></a> nodes. Concordium provides various <a class=\"reference internal\" href=\"guides/sdks-apis.html#sdks-apis\"><span class=\"std std-ref\">SDKs and APIs</span></a> that facilitate this as well as the <a class=\"reference external\" href=\"guides/concordium-client\">Concordium Client</a> command-line tool. Assuming you have the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> binary version 5.1.1 or higher in your path, list the accounts using the <code class=\"docutils literal notranslate\"><span class=\"pre\">account</span> <span class=\"pre\">list</span></code> command:</p>", "a[href=\"../smart-contracts/references/crypto-primitives.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Cryptographic primitives<a class=\"headerlink\" href=\"#cryptographic-primitives\" title=\"Link to this heading\">#</a></h1><p>V1 smart contracts natively support a number of common cryptographic primitives.\nCompared to implementing the same functionality in the smart contract, using primitives is substantially cheaper.\nAt the same time, smart contract developers benefit from using a single, high-quality implementation of the primitives provided by the chain.</p><p>Since all contract inputs, as well as the contract state, on the Concordium blockchain are public, it is only reasonable to have primitives that take public inputs.\nThe currently supported primitives are:</p>", "a[href=\"guides/deciding-wallet.html#why-you-need-a-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Why you need a wallet<a class=\"headerlink\" href=\"#why-you-need-a-wallet\" title=\"Link to this heading\">#</a></h2><p>You need a <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> to interact with the Concordium blockchain and to manage your CCD. Currently, there are four first party wallets available: the Concordium Desktop Wallet, the Concordium Wallet for Mobile, Concordium Legacy Wallet, and the Concordium Wallet for Web. This topic outlines the major differences that you should be aware of when you decide which wallet to use.</p><p>The wallets are developed by Concordium Software and can only be used to hold <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a>, the native token of the Concordium blockchain. You can\u2019t use these wallets for any other cryptocurrencies.</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-path\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.path<a class=\"headerlink\" href=\"#log-path\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"concepts/concepts-baker.html#when-is-a-block-final\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">When is a block final?<a class=\"headerlink\" href=\"#when-is-a-block-final\" title=\"Link to this heading\">#</a></h2><p>A block is final when it cannot be rolled back any more, i.e., part of the authoritative chain. Validators sign a block when they have verified that it is valid, and their collective signatures are aggregated to form a <a class=\"reference internal\" href=\"resources/glossary.html#term-Quorum-certificate\"><span class=\"xref std std-term\">quorum certificate</span></a>. This quorum certificate is then included in the next block. When two blocks that are parent-child are in consecutive rounds in the same epoch and both have a quorum certificate, then the block in the first of these rounds (together with its ancestors) is considered final. Why isn\u2019t the child block considered to be final if it has a QC? This is to cover edge cases where network delays cause the QC of a block to not be received by the next block producer before a timeout. In that case, the block gets skipped by the next block producer and it cannot be considered final. To resolve this, only  the first among two consecutive certified blocks is considered to be final.</p><p>A block is final at a minimum of two seconds after its creation. A new block has to be created descended from that block for the new block to be final.</p>", "a[href=\"../smart-contracts/guides/interact-instance.html#interaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interaction<a class=\"headerlink\" href=\"#interaction\" title=\"Link to this heading\">#</a></h2><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the parameterless\nreceive function <code class=\"docutils literal notranslate\"><span class=\"pre\">my_receive</span></code> while allowing up to 10000 energy to be used,\nrun the following command:</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#getting-the-ccd-balance-of-an-address\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Getting the CCD balance of an address<a class=\"headerlink\" href=\"#getting-the-ccd-balance-of-an-address\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/wallet-faqs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Wallet FAQs<a class=\"headerlink\" href=\"#wallet-faqs\" title=\"Link to this heading\">#</a></h1><p>The wallet FAQs can help you decide which wallet is best for you.</p><p>Need help deciding which wallet to choose? Read <a class=\"reference internal\" href=\"guides/deciding-wallet.html#choosing-wallet\"><span class=\"std std-ref\">Deciding between the wallets</span></a>.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_iterator_next\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_iterator_next\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_iterator_next</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterator</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Return the next entry along the iterator, and advance the iterator.</p></dd>", "a[href=\"guides/create-proofs.html#range-proofs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Range proofs<a class=\"headerlink\" href=\"#range-proofs\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"resources/glossary.html#term-Range-proofs\"><span class=\"xref std std-term\">Range proofs</span></a> allow you to present a range of values to the user\u2019s wallet to determine whether the user meets the required attribute. For example, you might want to know if a user over 18 years of age but under 30 years of age. You can present this as a range proof to be verified by the wallet.</p><p>Relevant attributes for range proofs are:</p>", "a[href=\"../smart-contracts-v0/references/local-settings.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Local settings<a class=\"headerlink\" href=\"#local-settings\" title=\"Link to this heading\">#</a></h1><p>Local settings for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> are stored in a single folder, the\nlocation of which depends on the specific operating system used:</p>", "a[href=\"guides/run-node-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on a server with Ubuntu on Mainnet<a class=\"headerlink\" href=\"#run-a-node-on-a-server-with-ubuntu-on-mainnet\" title=\"Link to this heading\">#</a></h1><p>This guide describes how organizations can run a node on the Concordium network from a server and how to set up the node to run as a <a class=\"reference internal\" href=\"#baker-node-ubuntu\"><span class=\"std std-ref\">validator node</span></a>.</p><p>You can also watch the video to learn how to run a node with Ubuntu.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_entry_write\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_entry_write\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_entry_write</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">entry</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">location</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Write a section of the memory to the entry at a given offset.\nReturn the number of bytes written.\nThe offset must be less than or equal to the current entry size.</p></dd>", "a[href=\"nodes/troubleshoot-docker.html#database-invariant-violation-error\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Database invariant violation error<a class=\"headerlink\" href=\"#database-invariant-violation-error\" title=\"Link to this heading\">#</a></h2><p>This error occurs due to the node running out of memory during the protocol update, which is more memory intensive than normal operation.</p><p>Your node state directory should look something like this:</p>", "a[href=\"../smart-contracts-v0/references/local-settings.html#account-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account Names<a class=\"headerlink\" href=\"#account-names\" title=\"Link to this heading\">#</a></h3><p>Account names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">accounts/names.map</span></code> using a <em>custom</em>\nformat, and should look similar to the following:</p>", "a[href=\"indexers/subquery.html#getting-started\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Getting Started<a class=\"headerlink\" href=\"#getting-started\" title=\"Link to this heading\">#</a></h2><p>Take a look at this SubQuery Starter Project that introduces SubQuery\u2019s Concordium support by indexing <a class=\"reference external\" href=\"https://github.com/subquery/concordium-subql-starter/tree/main/Concordium/concordium-testnet-starter\">Concordium</a>.</p><p>You can also follow this <a class=\"reference external\" href=\"https://academy.subquery.network/quickstart/quickstart.html\">step-by-step guide</a> to get familiar with SubQuery.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#the-init-macro\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code> macro<a class=\"headerlink\" href=\"#the-init-macro\" title=\"Link to this heading\">#</a></h3><p>In <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> an init function can be specified as a regular function that is annotated\nwith a procedural macro from <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> called <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a>.\nThis allows you to create a new piggy bank as follows:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#test-smashing-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test smashing a piggy bank<a class=\"headerlink\" href=\"#test-smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Testing <code class=\"docutils literal notranslate\"><span class=\"pre\">smash</span></code> will follow the same pattern, but this time you will also use the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a> method to invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> receive function and check whether the state is smashed.</p><p>Start by creating a new test case, <code class=\"docutils literal notranslate\"><span class=\"pre\">test_smash_intact</span></code>, setup the chain and contract with the helper function, and update the contract by calling the <code class=\"docutils literal notranslate\"><span class=\"pre\">smash</span></code> entrypoint.</p>", "a[href=\"references/transactions.html#transfer-ccd\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer CCD<a class=\"headerlink\" href=\"#transfer-ccd\" title=\"Link to this heading\">#</a></h3><p>Use the following command for transfers:</p>", "a[href=\"desktop-wallet/accounts-desktop.html#terms-and-conditions\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Terms and conditions<a class=\"headerlink\" href=\"#terms-and-conditions\" title=\"Link to this heading\">#</a></h3><p>To view the latest version of the <em>License notices</em> and <em>Terms and conditions for the Desktop Wallet</em>:</p>", "a[href=\"guides/proofs.html#bw\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web<a class=\"headerlink\" href=\"#bw\" title=\"Link to this heading\">#</a></h2><p>When the wallet receives a request, a screen similiar to below appears.</p>", "a[href=\"../smart-contracts/guides/setup-tools.html#typescript-smart-contract-client-generator\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Typescript smart contract client generator<a class=\"headerlink\" href=\"#typescript-smart-contract-client-generator\" title=\"Link to this heading\">#</a></h3><p>The <a class=\"reference external\" href=\"https://www.npmjs.com/package/@concordium/ccd-js-gen\">Typescript smart contract client generator</a> helps you generate JavaScript/TypeScript clients for smart contracts on the Concordium blockchain, providing a lower development time and better type-safety.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"resources/ccd-scan.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan<a class=\"headerlink\" href=\"#ccdscan\" title=\"Link to this heading\">#</a></h1><p><a class=\"reference external\" href=\"https://ccdscan.io\">CCDScan</a> is a Concordium blockchain explorer. CCDScan effectively serves as a search engine for data on the Concordium blockchain and enables users to search for, explore, and analyze relevant on-chain data. CCDScan includes functionality to scan and gain insights into Concordium blockchain data, such as:</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#invoker\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">invoker</span></code><a class=\"headerlink\" href=\"#invoker\" title=\"Link to this heading\">#</a></h3><p>The account address which made the transaction triggering the invocation of the\nreceive function, by updating a smart contract instance.</p><p>Example:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#adding-the-testing-library\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding the testing library<a class=\"headerlink\" href=\"#adding-the-testing-library\" title=\"Link to this heading\">#</a></h2><p>Start by adding the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Cargo.toml</span></code> located in the project root.\nYou should add it under the section <code class=\"docutils literal notranslate\"><span class=\"pre\">[dev-dependencies]</span></code>, which are dependencies only needed during development, as it is only needed during testing.\nThe library requires the Rust edition <code class=\"docutils literal notranslate\"><span class=\"pre\">2021</span></code> or greater, which you must also set:</p>", "a[href=\"guides/run-node-windows.html#node-collector-configuration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node collector configuration<a class=\"headerlink\" href=\"#node-collector-configuration\" title=\"Link to this heading\">#</a></h2><p>Since version 5.3.2 of the node, the collector uses the GRPC V2 interface. Therefore, in order to run the collector, it is required that the node which the collector connects to has the GRPC V2 interface enabled. For information about how to do this, see <a class=\"reference internal\" href=\"#install-upgrade-node-windows\"><span class=\"std std-ref\">the note at the top of this topic</span></a>.</p>", "a[href=\"snippets/delegation-faq.html#for-validators-delegators-and-passive-delegators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For validators, delegators and passive delegators<a class=\"headerlink\" href=\"#for-validators-delegators-and-passive-delegators\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/run-local-chain.html#run-the-local-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run the local chain<a class=\"headerlink\" href=\"#run-the-local-chain\" title=\"Link to this heading\">#</a></h2><p>Your local chain will be run as a single validator node. The node uses a data and configuration directory to store its local state and configuration. In the following you will use the same directory for both. Create it and copy <code class=\"docutils literal notranslate\"><span class=\"pre\">genesis.dat</span></code> to it:</p>", "a[href=\"../smart-contracts/general/contract-instances.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"../net/resources/glossary.html#term-Instance\"><span class=\"xref std std-term\">smart contract instance</span></a> is a smart contract module together with a\nspecific state and an amount of CCD tokens. A smart contract instance is often just called an <em>instance</em>.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.invoke\"]": "<dt class=\"sig sig-object py\" id=\"concordium.invoke\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">invoke</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tag</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Invoke a host instruction which is either a <em>transfer to an account</em> or a <em>call to a\ncontract</em>.</p></dd>", "a[href=\"../smart-contracts-v0/references/references-on-chain.html#contract-instances\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Contract instances<a class=\"headerlink\" href=\"#contract-instances\" title=\"Link to this heading\">#</a></h2><p>Contract instances are referenced via their <em>address</em>.\nAn address consists of an <em>index</em> and a <em>subindex</em>, both of which are\nnon-negative integers.</p><p>Example of a contract instance address:</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#increment-and-decrement-counter\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Increment and decrement counter<a class=\"headerlink\" href=\"#increment-and-decrement-counter\" title=\"Link to this heading\">#</a></h2><h3>Increment counter<a class=\"headerlink\" href=\"#increment-counter\" title=\"Link to this heading\">#</a></h3><p>Then change the update function as described below. Remember that input needs to be parsed without any errors. The value must be positive, otherwise you will get an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::IncrementError</span></code>. The transaction must be triggered by the owner of the contract instance or it will throw <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>. And the function itself has to be a mutable function because you are going to change the state of the contract.</p>", "a[href=\"concepts/concepts-baker.html#validator-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Validator account<a class=\"headerlink\" href=\"#validator-account\" title=\"Link to this heading\">#</a></h3><p>Each account can use a set of validator keys to register a validator. Whenever a validator produces a valid block that gets included in the chain, a reward is paid to the validator\u2019s account (and the staking pool delegators if they have a pool) at <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. The reward is derived from transaction fees paid for transactions included in the block and its predecessors, as well as from newly-minted CCDs.</p><p>The account can be viewed in the Desktop Wallet, the Concordium Wallet for Mobile, the Concordium Legacy Wallet, or the Concordium Wallet for Web depending on where the account was created.</p>", "a[href=\"../smart-contracts-v0/guides/compile-module.html#compiling-to-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compiling to Wasm<a class=\"headerlink\" href=\"#compiling-to-wasm\" title=\"Link to this heading\">#</a></h2><p>To help building smart contract modules and to take advantage of features\nsuch as <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">contract schemas</span></a>, Concordium recommends using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> tool for building <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> smart contracts.</p><p>In order to build a smart contract, run:</p>", "a[href=\"../smart-contracts/references/host-fns.html#only-in-receive-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Only in receive function<a class=\"headerlink\" href=\"#only-in-receive-function\" title=\"Link to this heading\">#</a></h2><p>Functions only accessible for smart contract receive functions.</p>", "a[href=\"../smart-contracts-v0/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Link to this heading\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p>", "a[href=\"../smart-contracts/best-practices/development.html#recommended-structure\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Recommended structure<a class=\"headerlink\" href=\"#recommended-structure\" title=\"Link to this heading\">#</a></h3>", "a[href=\"references/query-node.html#id-layer\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">ID layer<a class=\"headerlink\" href=\"#id-layer\" title=\"Link to this heading\">#</a></h3><p>Display the list of identity providers or anonymity revokers at a given block,\ndefaulting to the <a class=\"reference internal\" href=\"resources/glossary.html#term-Best-block\"><span class=\"xref std std-term\">best block</span></a>.</p>", "a[href=\"../smart-contracts/references/local-settings.html#contract-instance-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Contract Instance Names<a class=\"headerlink\" href=\"#contract-instance-names\" title=\"Link to this heading\">#</a></h3><p>Contract instance names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">contracts/contractNames.map</span></code>\nas JSON, and should look similar to the following:</p>", "a[href=\"guides/multisig-transfer.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>A multi-signature transfer of CCD is a transaction that\nrequires two or more co-signers to sign with their private keys to\nauthorize the transaction.</p><p>To plan a multi-signature transfer ahead of time and to split the transfer into multiple releases, you can create a release schedule. Using a schedule, you specify the total amount of CCD to transfer and then the specific dates and times for each CCD release. In other words, you create one transfer with multiple releases.</p>", "a[href=\"release-notes/release-notes-lp.html#mw-gen1-for-android\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Legacy Wallet for Android<a class=\"headerlink\" href=\"#mw-gen1-for-android\" title=\"Link to this heading\">#</a></h3>", "a[href=\"mobile-wallet/update-baker-mw.html#update-validator-stake-and-restaking-preference\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Update validator stake and restaking preference<a class=\"headerlink\" href=\"#update-validator-stake-and-restaking-preference\" title=\"Link to this heading\">#</a></h2><p>You can change the <a class=\"reference internal\" href=\"concepts/concepts-baker.html#concepts-baker-stake\"><span class=\"std std-ref\">staked amount</span></a> on a validator account except during a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a>. If you increase the stake, the new stake takes effect at the next <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. If the change is made in the last epoch before pay day, then the change will not occur until the following pay day. However, if you decrease the stake, there is a longer cool-down period of three weeks before the new stake is applied. During this period, you\u2019ll not be able to remove the validator account or further update the stake. After the cool-down period, the amount you\u2019ve decreased the stake with is returned to your disposable balance at the next pay day.</p><p>When you change the stake it can influence your <a class=\"reference internal\" href=\"resources/glossary.html#term-Winning-probability\"><span class=\"xref std std-term\">chance of being selected to produce a block</span></a> and receive block rewards. If you decrease the stake, you decrease your chances of producing blocks. Likewise, if you increase the stake, you increase your chances of producing a block.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#deploying-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying a module<a class=\"headerlink\" href=\"#deploying-a-module\" title=\"Link to this heading\">#</a></h2><p>You are now set up to deploy the piggy bank module to the testnet chain. Give the module the name <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_bank_part2_module</span></code> so it can be referenced in this tutorial.</p>", "a[href=\"release-notes/release-notes-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Release notes<a class=\"headerlink\" href=\"#release-notes\" title=\"Link to this heading\">#</a></h1><h2>Wallets<a class=\"headerlink\" href=\"#wallets\" title=\"Link to this heading\">#</a></h2><h3>Concordium Wallet for Mobile for iOS<a class=\"headerlink\" href=\"#mw-gen2-for-ios\" title=\"Link to this heading\">#</a></h3>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#account-navigation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account navigation<a class=\"headerlink\" href=\"#account-navigation\" title=\"Link to this heading\">#</a></h3><p>When you tap on an account, you see the details for the specific account, including balances and transactions. The toolbar contains actions that can be performed on the account. Use the left and right arrows at the end of the toolbar to navigate the actions.</p>", "a[href=\"guides/multi-credentials.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Add credentials to an account<a class=\"headerlink\" href=\"#add-credentials-to-an-account\" title=\"Link to this heading\">#</a></h1><h2>Add more credentials on an account<a class=\"headerlink\" href=\"#add-more-credentials-on-an-account\" title=\"Link to this heading\">#</a></h2><p>This guide describes how you add more credentials to an account, and how you <a class=\"reference internal\" href=\"#guide-change-signature\"><span class=\"std std-ref\">change the signature threshold for transactions</span></a> on the account. For more information about the process of sharing an account, see <a class=\"reference internal\" href=\"guides/overview-shared-accounts.html#overview-shared-accounts\"><span class=\"std std-ref\">Overview of shared accounts with multiple credentials</span></a>.</p>", "a[href=\"references/manage-accounts.html#benefits-of-revealing-attributes\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Benefits of revealing attributes<a class=\"headerlink\" href=\"#benefits-of-revealing-attributes\" title=\"Link to this heading\">#</a></h4><p>Every account on the chain must be derived from an identity that is verified and\nsigned by an approved identity provider. It is publicly visible which identity\nprovider issued an identity for an account and who the anonymity revokers are\nfor the account and the identity. In addition to this basic information which\nenables regulatory compliance, an account owner can choose to publicly reveal\nother values on their account, such as their nationality or country of\nresidence. Since this information is publicly accessible, anybody can check it\nbefore interacting with an account. Moreover, being able to see who issued the\nidentity enables whoever wishes to interact with an account to judge the level\nof risk in the transaction.</p>", "a[href=\"nodes/troubleshoot-ubuntu.html#database-invariant-violation-error\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Database invariant violation error<a class=\"headerlink\" href=\"#database-invariant-violation-error\" title=\"Link to this heading\">#</a></h2><p>This error occurs due to the node running out of memory during the protocol update, which is more memory intensive than normal operation.</p><p>Your node state directory should look something like this:</p>", "a[href=\"guides/baker-windows.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/become-baker.html#configure-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a validator<a class=\"headerlink\" href=\"#configure-a-validator\" title=\"Link to this heading\">#</a></h2><p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">validator</span> <span class=\"pre\">configure</span></code> to configure a validator and open a staking pool. The following is an example of how <code class=\"docutils literal notranslate\"><span class=\"pre\">configure</span> <span class=\"pre\">validator</span></code> might be used:</p>", "a[href=\"../smart-contracts/general/contract-lifecycle.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Life cycle of a smart contract<a class=\"headerlink\" href=\"#life-cycle-of-a-smart-contract\" title=\"Link to this heading\">#</a></h1><p>A smart contract is first deployed to the chain as part of a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">contract\nmodule</span></a>. After this a smart contract can be <em>initialized</em> to\nobtain a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">smart contract instance</span></a>. Finally a smart\ncontract instance can be repeatedly updated according to its own logic.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">A Sponsored Transactions dApp<a class=\"headerlink\" href=\"#a-sponsored-transactions-dapp\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with how to implement a sponsored transaction mechanism in a smart contract, how to sign messages in a wallet and verify the signature in the smart contract,\nhow to send a transaction from a back-end server to the blockchain, and how to connect your Concordium Wallet for Mobile via walletConnect to the frontend.</p><p>The dApp consists of three components that you will explore as part of this tutorial:</p>", "a[href=\"resources/ccd-scan-transactions.html#transaction-details\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transaction details<a class=\"headerlink\" href=\"#transaction-details\" title=\"Link to this heading\">#</a></h2><p>When you click a transaction hash, transaction information appears. The information is different depending upon whether the transaction was successful or rejected.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To initialize an instance of the contract <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_contract</span></code> from the\nmodule with reference\n<code class=\"docutils literal notranslate\"><span class=\"pre\">9eb82a01d96453dbf793acebca0ce25c617f6176bf7a564846240c9a68b15fd2</span></code> with the\nparameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary format, run the following command:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint an NFT<a class=\"headerlink\" href=\"#mint-an-nft\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to mint an NFT on Concordium blockchain. First you will learn the basics to set up your development environment. Note that in this tutorial most of the commands are for UNIX-like systems and will not work on Windows.</p><p>All development is completed using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and includes the following examples:</p>", "a[href=\"guides/baker-pool.html#ccdscan\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan<a class=\"headerlink\" href=\"#ccdscan\" title=\"Link to this heading\">#</a></h2><p>The tool for both validator management and research is CCDScan. For more information, see <a class=\"reference internal\" href=\"resources/ccd-scan.html#ccd-scan\"><span class=\"std std-ref\">CCDScan</span></a>.</p>", "a[href=\"references/query-node.html#id5\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#id5\" title=\"Link to this heading\">#</a></h4><p>EMA and EMSD refer to Exponential Moving Average and Exponential Moving\nStandard Deviation, respectively.</p>", "a[href=\"../smart-contracts/references/host-fns.html#smart-contract-instance-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instance state<a class=\"headerlink\" href=\"#smart-contract-instance-state\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>First, check the initial state of the contract.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#testing-cause-of-rejection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing cause of rejection<a class=\"headerlink\" href=\"#testing-cause-of-rejection\" title=\"Link to this heading\">#</a></h2><p>You want to test that the piggy bank rejects in certain contexts, for example\nwhen someone besides the owner of the smart contract tries to smash it.</p><p>The test should:</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#creating-accounts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Creating accounts<a class=\"headerlink\" href=\"#creating-accounts\" title=\"Link to this heading\">#</a></h2><p>The next step is to create one or more <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Account.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Account</span></code></a> entities and add them to the chain.</p><p>Accounts have multiple constructors that allow you to specify more details.\nThe simplest one is <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Account.html#method.new\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Account::new</span></code></a>, which takes an <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.AccountAddress.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AccountAddress</span></code></a> and a total balance of the account.\nOnce constructed, use the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.create_account\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create_account</span></code></a> method to add it to the chain.\nThis step is important, as simply constructing an <code class=\"docutils literal notranslate\"><span class=\"pre\">Account</span></code> does not make the chain aware of it.</p>", "a[href=\"concepts/concepts-transactions.html#the-desktop-wallet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Desktop Wallet<a class=\"headerlink\" href=\"#the-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>The Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts from your desktop and to create transactions such as sending CCD, adding a validator, and exporting and importing account information.</p>", "a[href=\"web3-id/concordia.html#concordium-s-bots\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium\u2019s bots<a class=\"headerlink\" href=\"#concordium-s-bots\" title=\"Link to this heading\">#</a></h2><p>To verify that you are using the real Concordium bots configured in our channels, use this reference:</p><p>Telegram - Mainnet - @ConcordiaWeb3IDBot</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_self_balance\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_self_balance\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_self_balance</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Get the current balance of the contract instance.</p></dd>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_init_origin\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_init_origin\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_init_origin</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Get the address of the account that triggered the init function.</p></dd>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">eSealing dApp<a class=\"headerlink\" href=\"#esealing-dapp\" title=\"Link to this heading\">#</a></h1><p>You can explore the <a class=\"reference external\" href=\"https://esealing.testnet.concordium.com\">hosted eSealing service</a> or\nstart your own front-end by following the instructions in the README.md file of this\n<a class=\"reference external\" href=\"https://github.com/Concordium/concordium-browser-wallet/tree/main/examples/eSealing\">repository</a> to get an overview of the dApp flow.</p>", "a[href=\"nodes/node-runner-service-configuration.html#bootstrap-nodes\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">bootstrap_nodes<a class=\"headerlink\" href=\"#bootstrap-nodes\" title=\"Link to this heading\">#</a></h3><p>(string; required; common)</p>", "a[href=\"installation/downloads.html#auxiliary-tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auxiliary tools<a class=\"headerlink\" href=\"#auxiliary-tools\" title=\"Link to this heading\">#</a></h2><p>Auxiliary tools are a collection of tools that can be used to perform actions as needed.</p>", "a[href=\"guides/become-baker.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>For general information about validation concepts, see <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">Validators</span></a>.</p>", "a[href=\"nodes/baker-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on macOS<a class=\"headerlink\" href=\"#run-a-validator-node-on-macos\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a macOS node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"nodes/troubleshoot-docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on a server with Docker<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-a-server-with-docker\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to troubleshoot a node on the Concordium network running in Docker.</p>", "a[href=\"indexers/intro.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">What are indexers<a class=\"headerlink\" href=\"#what-are-indexers\" title=\"Link to this heading\">#</a></h1><p>Indexers, in a broad context, play a fundamental role in organizing and optimizing data retrieval within various systems. These tools act as navigational aids, allowing efficient access to specific information by creating structured indexes. In the realm of databases and information management, indexers enhance query performance by creating a roadmap to swiftly locate data entries.</p><p>In the context of blockchain and dApps, indexers go beyond traditional databases, facilitating streamlined access to on-chain data. This includes transaction histories, smart contract states, and event logs. In the dynamic and decentralized world of blockchain, indexers contribute to the efficiency of data queries, supporting real-time updates and ensuring the seamless functionality of diverse applications and platforms.</p>", "a[href=\"concepts/concepts-delegation.html#bounding-the-size-of-pools\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Bounding the size of pools<a class=\"headerlink\" href=\"#bounding-the-size-of-pools\" title=\"Link to this heading\">#</a></h3><p>Concordium imposes two caps on the amount of stake in a single pool. The first cap bounds the size of a pool with respect to a fraction of all stake in pools (i.e., excluding passive delegation). For example, with the capital bound cap a pool cannot have more than 5% of all the stake in staking pools. This limit ensures that the pools remain distributed and prevents the crash of one validator from affecting the whole system. A party with lots of capital can run multiple validators to avoid this cap. This would increase decentralization.</p><p>The second cap is on the amount of stake in a pool with respect to the stake of the validator. For example, the total stake of a pool can be at most 6 times the stake of the validator. This bound is for security reasons as it prevents a party with a small stake from controlling too large a part of the system. Every validator\u2019s power is thus still proportional to their own stake, which is crucial for cryptographic security to hold.</p>", "a[href=\"guides/company-identities.html#create-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Create account<a class=\"headerlink\" href=\"#create-account\" title=\"Link to this heading\">#</a></h3><p>After obtaining the <code class=\"docutils literal notranslate\"><span class=\"pre\">id-object.json</span></code> identity object from the identity provider you can create accounts on the chain. The Concordium Company ID tool requires the identity object returned by the identity provider to create accounts on chain.</p><p><strong>Create account</strong> can also be used to regenerate the keys for an old account. In this case, you would need <code class=\"docutils literal notranslate\"><span class=\"pre\">id-object.json</span></code> file again. If you have lost that file, use <a class=\"reference internal\" href=\"#id-recovery\"><span class=\"std std-ref\">Identity Recovery</span></a> to retrieve it so you can recover your accounts and save the account keys. After selecting Identity Recovery, enter your seed phrase. If there are accounts on chain related to the seed phrase, you will be able to store the keys of those accounts.</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-env\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.env.*<a class=\"headerlink\" href=\"#collector-env\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#invoke-contract-entrypoints\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke contract entrypoints<a class=\"headerlink\" href=\"#invoke-contract-entrypoints\" title=\"Link to this heading\">#</a></h2><p>The method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a> is similar to <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_update</span></code></a> in that it allows you to execute contract entrypoints.\nThe difference is that an invoke is <em>not a transaction and is not persisted</em>, so contract states, account balances, etc. remain unchanged after the call.\nFor seasoned Rust programmers, that is easily seen by its function signature, which takes an immutable reference to the chain (<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;self</span></code>), as opposed to the mutable reference (<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;mut</span> <span class=\"pre\">self</span></code>) used in the update method.\nThe primary purpose of <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a> is to get the return value of an entrypoint.</p><p>It has all the same parameters as a contract update, except for the <code class=\"docutils literal notranslate\"><span class=\"pre\">signer</span></code>, which is only needed for transactions.\nWhile the result of the invocation isn\u2019t saved on the chain, all the entities referred, e.g. contracts and accounts, must still exist in the <code class=\"docutils literal notranslate\"><span class=\"pre\">chain</span></code>.</p>", "a[href=\"desktop-wallet/reset-data.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Reset desktop wallet data<a class=\"headerlink\" href=\"#reset-desktop-wallet-data\" title=\"Link to this heading\">#</a></h1><p>All the local data of the desktop wallet is stored in a database in the user\u2019s applications data folder.</p><p>The desktop wallet does not remove your user data when it is uninstalled; this avoids users losing their data, and simplifies the update process for the application.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-sc.html#basic-setup\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic setup<a class=\"headerlink\" href=\"#basic-setup\" title=\"Link to this heading\">#</a></h2><p>The source code of your smart contract is going to be in the <code class=\"docutils literal notranslate\"><span class=\"pre\">src</span></code> directory, which already contains the file <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code>, assuming you follow the above guide\nto set up your project.</p><p>Open <code class=\"docutils literal notranslate\"><span class=\"pre\">src/lib.rs</span></code> in your editor and you\u2019ll see some code for <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/testing.html#piggy-bank-testing\"><span class=\"std std-ref\">writing tests</span></a>,\nwhich you can delete for now. You will come back to tests later in this tutorial.</p>", "a[href=\"references/manage-accounts.html#attributes\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Link to this heading\">#</a></h3><p>Each identity contains a number of cryptographic values and a number of\nuser-chosen attributes, such as nationality or country of residence. These\nattributes are certified by the identity provider. The cryptographic values are\na number of public and private keys, a signature from the identity provider, as\nwell as a number of secret values the user must use to be able to use the\nidentity to create accounts.</p><p>You are in control of which attributes are revealed to the public. You can choose not to reveal any attributes at all to maintain your anonymity, which is the general recommendation.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#empty\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Empty</span></code><a class=\"headerlink\" href=\"#empty\" title=\"Link to this heading\">#</a></h3><p>Supplied as an empty JSON array.</p><p>Example of empty fields in the Rust enum <code class=\"docutils literal notranslate\"><span class=\"pre\">Option</span></code>:</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-node-name\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.node_name<a class=\"headerlink\" href=\"#collector-node-name\" title=\"Link to this heading\">#</a></h3><p>(string; default: name)</p>", "a[href=\"web3-id/wallet.html#use-verifiable-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Use verifiable credentials<a class=\"headerlink\" href=\"#use-verifiable-credentials\" title=\"Link to this heading\">#</a></h2><p>In cases where a verifier asks to prove your verifiable credentials, you are asked to generate a <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-presentation\"><span class=\"xref std std-term\">verifiable presentation</span></a> in the Concordium Wallet for Web to prove or reveal information. Proofs or revealing information can be:</p>", "a[href=\"guides/low-code-nft-marketplace/minting-tool.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Low-code NFT minting tool<a class=\"headerlink\" href=\"#low-code-nft-minting-tool\" title=\"Link to this heading\">#</a></h1><p>For non-developers, Concordium has developed a minting tool to mint your NFT collections without minimal development effort. With this super simple dApp you will be able to:</p>", "a[href=\"../smart-contracts/tutorials/sft-minting/build-smart-contract.html#deploy-the-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy the smart contract<a class=\"headerlink\" href=\"#deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Now, deploy your contract with the following command.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#instance-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instance state<a class=\"headerlink\" href=\"#instance-state\" title=\"Link to this heading\">#</a></h2><p>Every smart contract instance holds its own state which is represented on-chain\nas a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Trie\">prefix tree</a>, where nodes in the\ntree can have data in the form of a byte array.\nThe instance uses functions provided by the host environment to create, delete,\nand find nodes in the tree.\nThe host also provides functions for reading, writing, and resizing the byte array\nheld by a particular node in the tree.</p>", "a[href=\"../smart-contracts/guides/upgradeable-contract.html#owner-can-upgrade\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Owner can upgrade<a class=\"headerlink\" href=\"#owner-can-upgrade\" title=\"Link to this heading\">#</a></h2><p>The code below will add an <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> endpoint to a smart contract, which allows the smart contract owner to trigger a smart contract upgrade.\nThe parameter for this endpoint takes the new module reference and optionally a name of an entrypoint with parameter to invoke in the upgraded smart contract instance.</p><p>Providing the optional entrypoint can be used for triggering a migration function in the new module.\nThis has the benefit of being in the same transaction as the upgrade itself, making the transaction revert the upgrade if the migration fails.</p>", "a[href=\"concepts/concepts-transactions.html#the-bw\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Wallet for Web<a class=\"headerlink\" href=\"#the-bw\" title=\"Link to this heading\">#</a></h3><p>The Concordium Wallet for Web is a web wallet extension that enables you to create and manage your Concordium identities and accounts, to create simple transactions, validate and delegate, and to connect to dApps.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#build-the-smart-contract\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Build the smart contract<a class=\"headerlink\" href=\"#build-the-smart-contract\" title=\"Link to this heading\">#</a></h3><p>Run the command below to create a Wasm compiled build file of your smart contract. It is a good habit to create a folder for the output files. For example, here the user created a parent folder named <cite>dist</cite> and a child folder named <cite>fungible</cite> inside of it.</p><p>You can embed the schema file in the module, which means you don\u2019t have to call it again and again for your future function calls. To build the contract and embed the schema file, use the command below.</p>", "a[href=\"concepts/concepts-baker.html#validation-with-mw-gen1-and-mw-gen2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Validation with Concordium Legacy Wallet and Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#validation-with-mw-gen1-and-mw-gen2\" title=\"Link to this heading\">#</a></h3><p>This overview describes the recommended scenario for running a node and becoming a validator on the Concordium blockchain when using Concordium Legacy Wallet or Concordium Wallet for Mobile and running a node.</p>", "a[href=\"../smart-contracts/guides/deploy-module.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and\nthat you have a <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">smart-contract module</span></a> ready to be deployed.</p><p>Since deploying a smart contract module is done in the form of a transaction,\nyou will also need to have <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> setup with an account with\nenough CCD to pay for the transaction.</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-roll-count\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.roll.count<a class=\"headerlink\" href=\"#log-roll-count\" title=\"Link to this heading\">#</a></h3><p>(integer; optional; default: 0)</p>", "a[href=\"desktop-wallet/transaction-log-filter.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Apply a transaction log filter in the Desktop Wallet<a class=\"headerlink\" href=\"#apply-a-transaction-log-filter-in-the-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>You can specify which transactions to show in the transaction log.</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a smart\ncontract <a class=\"reference internal\" href=\"../smart-contracts/guides/deploy-module.html#deploy-module\"><span class=\"std std-ref\">deployed</span></a> in some module on-chain.</p><p>Since initializing a smart contract is a transaction, you should also make sure\nto have <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> set up with an account with enough CCD to pay for\nthe transaction.</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#interacting-with-an-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interacting with an instance<a class=\"headerlink\" href=\"#interacting-with-an-instance\" title=\"Link to this heading\">#</a></h2><p>A smart contract can expose zero or more functions for interacting with an\ninstance, referred to as <em>receive functions</em>.</p><p>Just like with init functions, receive functions are triggered using\ntransactions, which contain some amount of CCD for the contract and an argument\nto the function in the form of bytes.</p>", "a[href=\"../smart-contracts-v0/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Link to this heading\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#viewing-the-piggy-bank-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Viewing the piggy bank state<a class=\"headerlink\" href=\"#viewing-the-piggy-bank-state\" title=\"Link to this heading\">#</a></h2><p>You can display the raw return value of your piggy bank smart contract with the following command.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#initialize-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize contracts<a class=\"headerlink\" href=\"#initialize-contracts\" title=\"Link to this heading\">#</a></h2><p>With the module deployed, you are ready to initialize a contract with the chain method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_init\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_init</span></code></a>.\nThe method has the following parameters:</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/walletConnect.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">WalletConnect<a class=\"headerlink\" href=\"#walletconnect\" title=\"Link to this heading\">#</a></h1><p>The Concordium Wallet for Mobile are in the process of being updated to support signing byte messages with the <code class=\"docutils literal notranslate\"><span class=\"pre\">signMessage</span></code> request.\nThis tutorial page will be available when the relevant version of Concordium Wallet for Mobile is released.</p>", "a[href=\"references/manage-accounts.html#about-accounts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">About accounts<a class=\"headerlink\" href=\"#about-accounts\" title=\"Link to this heading\">#</a></h2><p>An account on the Concordium blockchain is owned by one or more <a class=\"reference internal\" href=\"resources/glossary.html#term-Credential-holder\"><span class=\"xref std std-term\">credential holders</span></a> and consists of two parts: The <a class=\"reference internal\" href=\"resources/glossary.html#term-On-chain\"><span class=\"xref std std-term\">on-chain</span></a> part, which is publicly visible and maintained by the bakers, and the <a class=\"reference internal\" href=\"resources/glossary.html#term-Off-chain\"><span class=\"xref std std-term\">off-chain</span></a> part.</p><p>The on-chain part of the account consists of:</p>", "a[href=\"guides/shielded-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a shielded transfer on an account<a class=\"headerlink\" href=\"#make-a-shielded-transfer-on-an-account\" title=\"Link to this heading\">#</a></h1><p>A shielded transfer is a transfer between two accounts where the <strong>amount</strong> of the transfer is encrypted. When you make a shielded transfer, the amount you transfer is only known to you and the recipient. However, the sender, receiver, and potential memo will be publicly visible on the blockchain.</p>", "a[href=\"guides/run-local-chain.html#run-the-chain-as-a-docker-instance\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Run the chain as a Docker instance<a class=\"headerlink\" href=\"#run-the-chain-as-a-docker-instance\" title=\"Link to this heading\">#</a></h3><p>If you ran the validator node by invoking the node binary directly on your host, skip this section. To run the validator node as a Docker instance, first save the following <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose.yml</span></code> file to the working directory:</p>", "a[href=\"guides/change-identity-name.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change identity name<a class=\"headerlink\" href=\"#change-identity-name\" title=\"Link to this heading\">#</a></h1>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#slottime\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">slotTime</span></code><a class=\"headerlink\" href=\"#slottime\" title=\"Link to this heading\">#</a></h3><p>The slot time at the beginning of the current block as a JSON string in the\nformat of <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc3339\">RFC3339</a> with precision up to milliseconds.</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-args\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.args<a class=\"headerlink\" href=\"#collector-args\" title=\"Link to this heading\">#</a></h3><p>(array of strings; optional; common)</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#concordium-smart-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts<a class=\"headerlink\" href=\"#concordium-smart-contracts\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/deciding-wallet.html#how-to-backup-a-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How to backup a wallet<a class=\"headerlink\" href=\"#how-to-backup-a-wallet\" title=\"Link to this heading\">#</a></h2><p>Concordium strongly recommends that you make a backup of your wallet if you are using Concordium Legacy Wallet or Desktop Wallet. Backups are created in different ways in the wallets.</p>", "a[href=\"guides/run-node-windows.html#uninstall-a-node-running-on-windows\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Uninstall a node running on Windows<a class=\"headerlink\" href=\"#uninstall-a-node-running-on-windows\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/sft-minting/mint-xfer.html#transfer-the-token\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer the token<a class=\"headerlink\" href=\"#transfer-the-token\" title=\"Link to this heading\">#</a></h2><p>The final step is to send the token this account has to someone else. To do that, create another JSON file called <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer.json</span></code> to give the parameters as input.</p>", "a[href=\"nodes/troubleshoot-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on MacOS<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-macos\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to troubleshoot a node running on MacOS on the Concordium network.</p>", "a[href=\"guides/run-node.html#run-a-validator-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node<a class=\"headerlink\" href=\"#run-a-validator-node\" title=\"Link to this heading\">#</a></h2><p>For information about how to run a validator node for Linux/Docker, see <a class=\"reference internal\" href=\"nodes/baker-docker.html#baking-docker\"><span class=\"std std-ref\">Run a validator node on Docker</span></a>.</p>", "a[href=\"nodes/node-runner-service-configuration.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Windows node runner service configuration<a class=\"headerlink\" href=\"#concordium-windows-node-runner-service-configuration\" title=\"Link to this heading\">#</a></h1><p>You can change the mainnet or testnet node configuration with the Configure Concordium Node Service. The Concordium Node Runner Service (\u201cservice\u201d for short) is configured using a TOML file. This file is typically located at <code class=\"docutils literal notranslate\"><span class=\"pre\">C:\\ProgramData\\Concordium\\Node</span> <span class=\"pre\">Runner\\nodes.toml.</span></code> (The path on your system is determined by the <code class=\"docutils literal notranslate\"><span class=\"pre\">Config</span></code> value in the registry key <code class=\"docutils literal notranslate\"><span class=\"pre\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Concordium\\Node</span> <span class=\"pre\">Runner</span></code>.)</p><p>To run the app, search for <em>configure concordium node</em> in the <strong>Search</strong> bar, and then select <strong>Configure Concordium Node Service</strong>. If you see a message saying <em>Do you want to allow this app to make changes to your device?</em>, select <strong>Yes</strong>. The configuration file opens in Notepad or your default editor.</p>", "a[href=\"../smart-contracts/guides/setup-tools.html#vscode-extension\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">VSCode extension<a class=\"headerlink\" href=\"#vscode-extension\" title=\"Link to this heading\">#</a></h3><p>The <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=Concordium.concordium-smart-contracts\">VSCode extension</a> can help you develop Concordium smart contracts. The extension sets up the editor for development, installs the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> smart contract development tool for all supported platforms, and provides commands in the editor for the essential workflows, such as building and testing smart contracts.</p><p>You can watch a video about how to use the VSCode extension.</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a\n<a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To invoke an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the receive function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_receive</span></code> with a parameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary\nformat, run the following command:</p>", "a[href=\"installation/downloads.html#concordium-desktop-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Desktop Wallet<a class=\"headerlink\" href=\"#concordium-desktop-wallet\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"guides/multisig-transfer.html#export-a-transaction-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Export a transaction proposal<a class=\"headerlink\" href=\"#export-a-transaction-proposal\" title=\"Link to this heading\">#</a></h2><p>To propose a transaction to other co-signers, you have to share a file with them of the type JSON, which contains the transaction information.</p>", "a[href=\"../smart-contracts/references/schema-json.html#struct\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Struct</span></code><a class=\"headerlink\" href=\"#struct\" title=\"Link to this heading\">#</a></h3><p>Supplied as the fields directly, see below.</p>", "a[href=\"../smart-contracts/guides/custom-errors.html#defining-and-deriving\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Defining and deriving<a class=\"headerlink\" href=\"#defining-and-deriving\" title=\"Link to this heading\">#</a></h2><p>Custom error codes help communicate why a contract rejects and can be returned\nboth during initialization and during updates.</p><p>On-chain, smart contracts return <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/#signalling-errors\">a numeric error code and an optional serialized\nreturn value when rejecting</a>. This is also the case when using a custom error type.\nTherefore, a mapping from the custom error type to <code class=\"docutils literal notranslate\"><span class=\"pre\">Reject</span></code>, in the\nform of an implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">From&lt;MyError&gt;</span> <span class=\"pre\">for</span> <span class=\"pre\">Reject</span></code>, is needed.\nYou can derive the implementation automatically with <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/derive.Reject.html\">#[derive(Reject)]</a> if\nthe type also implements <code class=\"docutils literal notranslate\"><span class=\"pre\">Serial</span></code> (also derivable). The <code class=\"docutils literal notranslate\"><span class=\"pre\">Serial</span></code> instance is\nneeded because the whole data type is serialized and included as the optional\nreturn value.\nHere is a typical example:</p>", "a[href=\"nodes/node-runner-service-configuration.html#enabled\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">enabled<a class=\"headerlink\" href=\"#enabled\" title=\"Link to this heading\">#</a></h3><p>(boolean; default: true)</p>", "a[href=\"nodes/troubleshoot-ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshoot a node on a server with Ubuntu<a class=\"headerlink\" href=\"#troubleshoot-a-node-on-a-server-with-ubuntu\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to troubleshoot a node on the Concordium network from a server with Ubuntu.</p>", "a[href=\"references/query-node.html#validator-queries\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Validator queries<a class=\"headerlink\" href=\"#validator-queries\" title=\"Link to this heading\">#</a></h2><h3>Earliest time a validator may be expected to produce a block<a class=\"headerlink\" href=\"#earliest-time-a-validator-may-be-expected-to-produce-a-block\" title=\"Link to this heading\">#</a></h3><p>Get the projected earliest time at which a particular validator will be required to produce a block.</p><p>If the validator is not a validator for the current reward period, this returns a timestamp at the\nstart of the next reward period. If the validator is a validator for the current reward period, the\nearliest win time is projected from the current round forward, assuming that each round after\nthe last finalized round will take the minimum block time. (If blocks take longer, or timeouts\noccur, the actual time may be later, and the reported time in subsequent queries may reflect\nthis.) At the end of an epoch (or if the validator is not projected to produce a block before the end of the\nepoch) the earliest win time for a (current) validator will be projected as the start of the next\nepoch.</p>", "a[href=\"guides/run-node.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node with Docker<a class=\"headerlink\" href=\"#run-a-node-with-docker\" title=\"Link to this heading\">#</a></h1><p>In this guide, you learn how to run a node on your Linux computer that\nparticipates in the Concordium network. This means that you receive\nblocks and transactions from other nodes, as well as propagate\ninformation about blocks and transactions to the nodes in the Concordium\nnetwork. After following this guide, you will be able to:</p>", "a[href=\"installation/downloads.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads<a class=\"headerlink\" href=\"#downloads\" title=\"Link to this heading\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Mainnet and Testnet.</p>", "a[href=\"../smart-contracts/guides/json-params.html#balanceof-and-contractbalanceofqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">balanceOf() and ContractBalanceOfQueryParams<a class=\"headerlink\" href=\"#balanceof-and-contractbalanceofqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code> function to get a balance of a token in a given address. The <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code> function is essentially a view function that returns <code class=\"docutils literal notranslate\"><span class=\"pre\">ContractBalanceOfQueryResponse</span></code> which is an array of the token amounts of given addresses.</p>", "a[href=\"guides/multisig-transfer.html#generate-the-transaction-proposal-without-signing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate the transaction proposal without signing<a class=\"headerlink\" href=\"#generate-the-transaction-proposal-without-signing\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#test-smashing-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test smashing a piggy bank<a class=\"headerlink\" href=\"#test-smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Testing <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_smash</span></code> will follow the same pattern, but this time you will need\nto populate the context since this function uses the context for getting the\ncontract owner, the sender of the message triggering the function, and the\nbalance of contract.</p><p>If you only supply the function with an empty context it will fail, so instead\ndefine the context as mutable:</p>", "a[href=\"nodes/node-requirements.html#system-requirements-to-run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">System requirements to run a node<a class=\"headerlink\" href=\"#system-requirements-to-run-a-node\" title=\"Link to this heading\">#</a></h2><p>The following are the minimum system requirements for running a node. If your system does not meet or exceed these requirements, you might not be able to run the node properly.</p><p>You need a broadband connection to run a node, and Concordium strongly recommends that the node is running around the clock in a reliable place. This is especially important if you\u2019re running a validator node.</p>", "a[href=\"guides/export-import.html#upgrade\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrade<a class=\"headerlink\" href=\"#upgrade\" title=\"Link to this heading\">#</a></h3><p>Concordium is continuously improving the security and reliability of its products, so it is vital to ensure that your Concordium Legacy Wallet or Desktop Wallet is upgraded to the latest version available. To check which version of your Concordium Wallet is currently available, refer to the <a class=\"reference internal\" href=\"release-notes/release-notes-lp.html#release-notes\"><span class=\"std std-ref\">release notes</span></a>.</p>", "a[href=\"../smart-contracts/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#find-and-share-your-account-address\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Find and share your account address<a class=\"headerlink\" href=\"#find-and-share-your-account-address\" title=\"Link to this heading\">#</a></h3>", "a[href=\"resources/ccd-scan-staking.html#top-delegators-view\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Top delegators view<a class=\"headerlink\" href=\"#top-delegators-view\" title=\"Link to this heading\">#</a></h2><p>If you select <strong>Top delegaators</strong> you see a list of all delegators sorted by their staked amount. You can see account details, including details about the delegation target (staking pool or passive delegation), and so on. The table contains the following:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#the-init-macro\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code> macro<a class=\"headerlink\" href=\"#the-init-macro\" title=\"Link to this heading\">#</a></h3><p>In <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> an init function can be specified as a regular function that is annotated\nwith a procedural macro from <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> called <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a>.\nThis allows you to create a new piggy bank as follows:</p>", "a[href=\"references/query-node.html#earliest-time-a-validator-may-be-expected-to-produce-a-block\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Earliest time a validator may be expected to produce a block<a class=\"headerlink\" href=\"#earliest-time-a-validator-may-be-expected-to-produce-a-block\" title=\"Link to this heading\">#</a></h3><p>Get the projected earliest time at which a particular validator will be required to produce a block.</p><p>If the validator is not a validator for the current reward period, this returns a timestamp at the\nstart of the next reward period. If the validator is a validator for the current reward period, the\nearliest win time is projected from the current round forward, assuming that each round after\nthe last finalized round will take the minimum block time. (If blocks take longer, or timeouts\noccur, the actual time may be later, and the reported time in subsequent queries may reflect\nthis.) At the end of an epoch (or if the validator is not projected to produce a block before the end of the\nepoch) the earliest win time for a (current) validator will be projected as the start of the next\nepoch.</p>", "a[href=\"desktop-wallet/accounts-desktop.html#desktop-wallet-settings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Desktop Wallet settings<a class=\"headerlink\" href=\"#desktop-wallet-settings\" title=\"Link to this heading\">#</a></h2><p>The Desktop Wallet has a number of settings such as password and node settings that you access by going to the <strong>Settings</strong> page.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-front-end-set-up.html#bw\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web<a class=\"headerlink\" href=\"#bw\" title=\"Link to this heading\">#</a></h2><p>A browser wallet is a piece of code that can be added as an extension to supported browsers such as <code class=\"docutils literal notranslate\"><span class=\"pre\">Chrome</span></code>.\nThe browser wallet allows you to interact with the chain and make transactions.\nCurrently, the Concordium Wallet for Web does this by connecting to a (gRPC) server that communicates with a node.\nThe Concordium Wallet for Web hosts the private keys corresponding to the accounts of the user.</p><p>Your front end code that is run in the browser constructs the transaction object\nand sends it to the Concordium Wallet for Web. The transaction object is signed by the private key hosted in the Concordium Wallet for Web\nand transmitted to the server via <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTPS</span></code>. This server has access to a Concordium node and converts\nthe request (including the signed transaction object) that comes via <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTPS</span></code> from the Concordium Wallet for Web\nto a request that the Concordium node can execute. The signed transaction is\ntransmitted via peer-to-peer communication to other Concordium nodes and becomes\npart of the Concordium blockchain.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#building-the-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building the schema<a class=\"headerlink\" href=\"#building-the-schema\" title=\"Link to this heading\">#</a></h2><p>Now, you are ready to build the actual schema using <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, and you\nhave the options to embed the schema and/or write the schema to a file and/or print the schema to the console.</p>", "a[href=\"references/query-node.html#block-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Block state<a class=\"headerlink\" href=\"#block-state\" title=\"Link to this heading\">#</a></h2><h3>Inspect specific block<a class=\"headerlink\" href=\"#inspect-specific-block\" title=\"Link to this heading\">#</a></h3><p>Display information about a specific block. Note that some fields (e.g. slot\ntime) are objective (i.e. all nodes participating in the Concordium network will\nagree on these) while others (e.g. arrival time) are specific to the local node:</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#miscellaneous\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/guides/build-schema.html#embedding-the-schema\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Embedding the schema<a class=\"headerlink\" href=\"#embedding-the-schema\" title=\"Link to this heading\">#</a></h3><p>In order to embed the schema into the smart contract module, add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-embed</span></code> to the build command by using</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_iterator_key_size\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_iterator_key_size\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_iterator_key_size</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterator</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Get the length of the key that the iterator is currently pointing at.</p></dd>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#make-a-transfer-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Make a transfer proposal<a class=\"headerlink\" href=\"#make-a-transfer-proposal\" title=\"Link to this heading\">#</a></h2>", "a[href=\"concepts/concepts-delegation.html#time-and-cool-downs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Time and cool-downs<a class=\"headerlink\" href=\"#time-and-cool-downs\" title=\"Link to this heading\">#</a></h2><p>Changes to the pools take effect every 24 hours at <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. So opening a pool, increasing the stake, moving the stake between pools or between passive delegation and a stakiing pool all take effect at the <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. At pay day, rewards gathered over a 24 hour period are distributed at the same time. If, however, you make a change in delegation in the last <a class=\"reference internal\" href=\"resources/glossary.html#term-Epoch\"><span class=\"xref std std-term\">epoch</span></a> before pay day, then the change has to wait until the second pay day.</p><p>But decreasing the stake (whether for delegators or validators) is subject to a cool-down period. In other words, once the transaction has been included in a block the cool-down period starts. Unstaking takes effect at the pay day event after the cool-down has elapsed, and the party\u2019s stake will be unlocked. During the cool down, the stake is still invested in the pool and earns rewards as before.</p>", "a[href=\"guides/gallery/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The gallery with ID authentication<a class=\"headerlink\" href=\"#the-gallery-with-id-authentication\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you will learn how to write a gallery which requires the user to prove something using their identity to access the images on the site.\nThe gallery consists of a basic React web front end example that displays the images and communicates with a wallet and a Rust backend that can verify the proofs given by the wallet.</p><p>In the <a class=\"reference internal\" href=\"guides/gallery/gallery-backend.html#gallery-backend\"><span class=\"std std-ref\">first part</span></a>, you will learn how the backend works.</p>", "a[href=\"references/manage-accounts.html#account-sequence-number\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account sequence number<a class=\"headerlink\" href=\"#account-sequence-number\" title=\"Link to this heading\">#</a></h3><p>Each account on the Concordium blockchain has a <a class=\"reference internal\" href=\"resources/glossary.html#term-Transaction-Sequence-Number\"><span class=\"xref std std-term\">sequence number</span></a> and each\ntransaction signed by the account must have a sequence number. For a transaction\nto be considered valid its sequence number must be the next available one for\nthe account. The sequence number is maintained by all the bakers in order to\nvalidate transactions.</p><p>You can <a class=\"reference internal\" href=\"references/transactions.html#account-seqno\"><span class=\"std std-ref\">look up the sequence number</span></a> from an up to date node using Concordium Client.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#invoke-operations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke operations<a class=\"headerlink\" href=\"#invoke-operations\" title=\"Link to this heading\">#</a></h2><p>A receive function can use the host environment to invoke two types of\noperations during its execution.\nThe possible operations that a contract can perform are:</p>", "a[href=\"mobile-wallet/update-baker-mw.html#update-pool-settings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Update pool settings<a class=\"headerlink\" href=\"#update-pool-settings\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/guides/build-schema.html#including-schemas-for-init\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including schemas for init<a class=\"headerlink\" href=\"#including-schemas-for-init\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for the parameter, the errors, and/or the events for the init function, set the\noptional <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">event</span></code> attributes for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(..)]</span></code>-macro:</p>", "a[href=\"../smart-contracts-v0/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"guides/account-activities-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Account activities<a class=\"headerlink\" href=\"#account-activities\" title=\"Link to this heading\">#</a></h1><p>If you need to know how to send CCDs, connect dApps, manage fungible and non-fungible tokens, or more, all the information you need is right here.</p>", "a[href=\"references/query-node.html#inspect-specific-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect specific account<a class=\"headerlink\" href=\"#inspect-specific-account\" title=\"Link to this heading\">#</a></h3><p>Display all publicly available information of a specific account as of a\nspecific block. For accounts for which secret keys are available this command\ncan also decrypt the shielded balance.</p>", "a[href=\"../smart-contracts-v0/guides/inspect-instance.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write integration-tests for your piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.\nThe library simulates part of a blockchain <em>locally</em> to allow you to create one or more contracts and interact with them in the tests.</p>", "a[href=\"nodes/baker-ubuntu.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/host-fns.html#function-parameter\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function parameter<a class=\"headerlink\" href=\"#function-parameter\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"guides/multisig-transfer.html#add-a-release-schedule\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add a release schedule<a class=\"headerlink\" href=\"#add-a-release-schedule\" title=\"Link to this heading\">#</a></h2><p>You can now create a release schedule and specify when you want the transfer to take place. You can choose between a regular interval schedule and an explicit schedule.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_owner\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_owner\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_owner</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Get the address of the account, which created the contract instance.</p></dd>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#processing-multiple-action-descriptions\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Processing multiple action descriptions<a class=\"headerlink\" href=\"#processing-multiple-action-descriptions\" title=\"Link to this heading\">#</a></h3><p>You can chain action descriptions using the <strong>and</strong> combinator.\nAn action-description sequence <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code> <strong>and</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code></p>", "a[href=\"references/transactions.html#add-delegation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Add delegation<a class=\"headerlink\" href=\"#add-delegation\" title=\"Link to this heading\">#</a></h3><p>The command to add delegation on an account with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">add</span></code>. For example, an interaction to add delegation on an account looks like the following:</p><p>The command is:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#initorigin\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">initOrigin</span></code><a class=\"headerlink\" href=\"#initorigin\" title=\"Link to this heading\">#</a></h3><p>The account address which triggered the invocation of the init function, by\ninstantiating the smart contract.</p><p>Example:</p>", "a[href=\"../smart-contracts-v0/guides/no-std.html#building-the-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building the module<a class=\"headerlink\" href=\"#building-the-module\" title=\"Link to this heading\">#</a></h2><p>In order to use the nightly toolchain, add <code class=\"docutils literal notranslate\"><span class=\"pre\">+nightly</span></code> right after\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span></code>:</p>", "a[href=\"references/concordium-client.html#commands-and-help\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands and help<a class=\"headerlink\" href=\"#commands-and-help\" title=\"Link to this heading\">#</a></h2><p>The commands supported by the tool are divided into two categories: the\nhigh-level and low-level commands. The high-level commands provide a streamlined\nand consistent user interface, automatically handling as much complexity as\npossible. While most of the common operations are available via high-level\ncommands, the low-level commands provide a more direct interface to the node,\nand some information and capabilities are not available in high-level commands.</p><p>The high-level commands are grouped by topic (<code class=\"docutils literal notranslate\"><span class=\"pre\">account</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">validator</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code>\netc.). The low-level commands are grouped in the <code class=\"docutils literal notranslate\"><span class=\"pre\">raw</span></code> category and have\nCamelCase names.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#owner\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">owner</span></code><a class=\"headerlink\" href=\"#owner\" title=\"Link to this heading\">#</a></h3><p>JSON string containing the account address of the owner of the smart contract\ninstance.</p><p>Example:</p>", "a[href=\"guides/overview-shared-accounts.html#share-accounts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Share accounts<a class=\"headerlink\" href=\"#share-accounts\" title=\"Link to this heading\">#</a></h2><p>The following is an overview of the tasks that are needed to add more credentials to an account with links to more information about each task.</p>", "a[href=\"../smart-contracts/references/schema-json.html#timestamp\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Timestamp</span></code><a class=\"headerlink\" href=\"#timestamp\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string using the <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc3339\">RFC3339</a> format with the precision of\nmilliseconds. Example:</p>", "a[href=\"../smart-contracts/references/schema-json.html#empty\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Empty</span></code><a class=\"headerlink\" href=\"#empty\" title=\"Link to this heading\">#</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Empty</span></code> is supplied as an empty JSON array.</p><p>See <a class=\"reference internal\" href=\"#enum\"><span class=\"std std-ref\">enum</span></a> for an example.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#set-up-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a piggy bank<a class=\"headerlink\" href=\"#set-up-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Now you will write the function to set up a new piggy bank, which in turn means\nspecifying the init function for a smart contract.\nA smart contract must specify an init function, which is called when new\ninstances of the contract are created, and is used to set up the initial state of\nthe contract instance.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#testing-cause-of-rejection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing cause of rejection<a class=\"headerlink\" href=\"#testing-cause-of-rejection\" title=\"Link to this heading\">#</a></h2><p>You want to test that the piggy bank rejects in certain contexts, for example\nwhen someone besides the owner of the smart contract tries to smash it.</p><p>The test should:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#smart-contract-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract errors<a class=\"headerlink\" href=\"#smart-contract-errors\" title=\"Link to this heading\">#</a></h3><p>Ensure that the <code class=\"docutils literal notranslate\"><span class=\"pre\">--sender</span></code> flag uses the &lt;account-name&gt;\nthat initialized the piggy bank smart contract instance (the owner of this smart contract instance).\nYou can find explanations about the behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point in this <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#smashing-the-piggy-bank-writing\"><span class=\"std std-ref\">guide</span></a>.\nIf you invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point with a different account than the owner, it will print the below error message.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_delete_entry\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_delete_entry\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_delete_entry</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Delete the entry.</p></dd>", "a[href=\"references/developer-tools.html#getting-your-private-key-from-an-account-already-imported-to-the-concordium-client\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Getting your private key from an account already imported to the <cite>concordium-client</cite><a class=\"headerlink\" href=\"#getting-your-private-key-from-an-account-already-imported-to-the-concordium-client\" title=\"Link to this heading\">#</a></h2><p>Display your keys with the following command:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#mint-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Mint function<a class=\"headerlink\" href=\"#mint-function\" title=\"Link to this heading\">#</a></h2><p>As discussed earlier, you have new inputs in <code class=\"docutils literal notranslate\"><span class=\"pre\">MintParams</span></code>, so when you get the JSON parameter as the input you expect an object that holds both metadata and another struct that holds the maximum supply and the amount to be minted. That is why there is <code class=\"docutils literal notranslate\"><span class=\"pre\">token_info</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">token_info.0</span></code> will represent the <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadata</span></code> struct and <code class=\"docutils literal notranslate\"><span class=\"pre\">token_info.1</span></code> will represent <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenParams</span></code>.</p><p>Unlike the NFT tutorials, this time you actually want the token to be mintable with the same ID. Just keep it less than the maximum value. That is why you commented on the first ensure statement which makes sure that the tokenId is unique for a token.</p>", "a[href=\"../smart-contracts/guides/migrate-contracts.html#migrating-init-methods\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Migrating <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> methods<a class=\"headerlink\" href=\"#migrating-init-methods\" title=\"Link to this heading\">#</a></h2><p>To migrate a typical <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> method you must change the following:</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Events<a class=\"headerlink\" href=\"#events\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#initialize-the-smart-contract\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize the smart contract<a class=\"headerlink\" href=\"#initialize-the-smart-contract\" title=\"Link to this heading\">#</a></h3><p>Using the Module reference hash value, create a contract instance with the command below. This command is structured to use the Concordium testnet node described above. If you are using your own local node, adjust the command accordingly.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/index.html#what-are-sponsored-transactions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are sponsored transactions?<a class=\"headerlink\" href=\"#what-are-sponsored-transactions\" title=\"Link to this heading\">#</a></h2><p>Sponsored transactions are a mechanism for a sponsor address (third-party) to submit a transaction\nto a smart contract on behalf of a sponsoree account (user/client). The user/client\nshould sign its intended action in the Concordium Wallet for Web (or Concordium Wallet for Mobile that uses WalletConnect) to authorize the third-party to execute a specific action on its behalf.\nAfter the user/client signed its action, the signature is communicated to the third-party. The third-party account (invoker to the smart contract)\npays for the transaction fees and submits the transaction on-chain. The signature is verified in the smart\ncontract to ensure the action was authorized by the user/client.</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upgrading smart contracts on Concordium<a class=\"headerlink\" href=\"#upgrading-smart-contracts-on-concordium\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with how to upgrade a smart contract natively. You will explore how to\nmigrate the smart contract state from your old contract to the upgraded contract.</p><p>An important desired feature of blockchains is that smart contracts, once deployed, are immutable by default.\nHistory has shown that development teams are looking for mutable smart contract options as well if they want to have\nthe capabilities to fix bugs, or to have the option to add additional\nfeatures to their smart contract protocol in the future.\nOther blockchain require complex <code class=\"docutils literal notranslate\"><span class=\"pre\">proxy-implementation</span></code> patterns to achieve upgradability on the by default immutable smart contracts.\nConcordium makes this process easier by exposing an upgrade mechanism to natively upgrade the smart contract.\nUpgradability is an opt-in on Concordium, meaning you can continue to write immutable contracts on Concordium if you prefer to do so.</p>", "a[href=\"../smart-contracts-v0/guides/deploy-module.html#naming-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Naming a module<a class=\"headerlink\" href=\"#naming-a-module\" title=\"Link to this heading\">#</a></h2><p>A module can be given a local alias, or <em>name</em>, which makes referencing it\neasier.\nThe name is only stored locally by <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, and is not\nvisible on-chain.</p>", "a[href=\"release-notes/release-notes-lp.html#libraries\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Libraries<a class=\"headerlink\" href=\"#libraries\" title=\"Link to this heading\">#</a></h2><h3>Smart contract Libraries<a class=\"headerlink\" href=\"#smart-contract-libraries\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/recovery.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Backup and recovery<a class=\"headerlink\" href=\"#backup-and-recovery\" title=\"Link to this heading\">#</a></h1><p>It can be necessary to recover your wallet, for example if you get a new computer or mobile device. It is important to know how you can recover your wallet on a device if necessary. There are differences between what the wallets require for recovery.</p>", "a[href=\"../smart-contracts/references/host-fns.html#only-in-init-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Only in init function<a class=\"headerlink\" href=\"#only-in-init-function\" title=\"Link to this heading\">#</a></h2><p>Functions only accessible for smart contract init functions. If called from\na receive function execution will abort.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_self_address\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_self_address\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_self_address</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Get the address of the contract instance, running the receive function.</p></dd>", "a[href=\"guides/learn-about-concordium.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Learn about Concordium<a class=\"headerlink\" href=\"#learn-about-concordium\" title=\"Link to this heading\">#</a></h1><p>The Concordium blockchain is a compliance ready blockchain backed by science that enables private and public transactions. It offers high throughput, fast transactions, and predictable fees, allowing businesses, developers, and traders to harness blockchain\u2019s true power and potential.</p><p>Before you start using the Concordium blockchain, it\u2019s a good idea to understand some basic concepts about our unique blockchain, such as <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>. The <a class=\"reference internal\" href=\"resources/glossary.html#glossary\"><span class=\"std std-ref\">glossary</span></a> is also a useful resource.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#selfbalance\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">selfBalance</span></code><a class=\"headerlink\" href=\"#selfbalance\" title=\"Link to this heading\">#</a></h3><p>A JSON string with the balance of the smart contract instance in micro CCD.</p><p>Example:</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-front-end-set-up.html#running-the-web-front-end\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running the web front end<a class=\"headerlink\" href=\"#running-the-web-front-end\" title=\"Link to this heading\">#</a></h2><p>You have successfully added the Concordium Wallet for Web to your browser in the previous section.\nIn the next step of the tutorial, you are going to clone a wCCD demo front end written with the <a class=\"reference external\" href=\"https://reactjs.org/\">React library</a>\nand run it locally. The demo front end has the required packages installed to connect to the Concordium Wallet for Web\nand implements common flows to deal with the different states that the Concordium Wallet for Web could be in. For example,\nthe front end will display a <code class=\"docutils literal notranslate\"><span class=\"pre\">connect</span> <span class=\"pre\">wallet</span></code> button when loading the website. Furthermore, the front end has flows\nto react to the events when the user switches the account in the browser wallet or\nconnects/disconnects an account in the Concordium Wallet for Web to update the front end state accordingly.</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke a smart contract instance<a class=\"headerlink\" href=\"#invoke-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to invoke a smart contract instance, which\nmeans triggering a receive function and viewing its return value. Invoking an\ninstance is <em>not a transaction</em> and it <em>does not change the state of a contract</em>.\nInvoking can be useful to either view information about the instance or to test\na receive method before running an update. Because invoking is not a transaction, there is no fee to run <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.\nThe view functions are regular receive functions that return information about\nthe contract, ideally with schemas on the return values.</p><p>There is no limit to the number of logs per invocation (apart from energy).</p>", "a[href=\"guides/run-node-macos.html#install-upgrade-and-run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install/upgrade and run a node<a class=\"headerlink\" href=\"#install-upgrade-and-run-a-node\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#smashing-a-piggy-bank\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smashing a piggy bank<a class=\"headerlink\" href=\"#smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h3><p>Now that you can insert CCD into a piggy bank, you are only left to define how to\nsmash one.\nRemember, you only want the owner of the piggy bank (smart contract\ninstance) to be able to call this and only if the piggy bank has not already\nbeen smashed.\nIt should set its state to be smashed and transfer all of its CCD to the owner.</p><p>Again you use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a> macro to define the smash function:</p>", "a[href=\"../smart-contracts/guides/initialize-contract.html#naming-a-contract-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Naming a contract instance<a class=\"headerlink\" href=\"#naming-a-contract-instance\" title=\"Link to this heading\">#</a></h2><p>A contract instance can be given a local alias, or <em>name</em>, which makes\nreferencing it easier.\nThe name is only stored locally by <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, and is not visible\non-chain.</p>", "a[href=\"installation/downloads.html#cargo-concordium\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code><a class=\"headerlink\" href=\"#cargo-concordium\" title=\"Link to this heading\">#</a></h2><p>For information about installing <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, see <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a>.</p>", "a[href=\"nodes/node-runner-service-configuration.html#baker-credentials\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">baker_credentials<a class=\"headerlink\" href=\"#baker-credentials\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure you completed the previous parts of the tutorial and have a running testnet node that has caught up to the head of the blockchain and an account with some CCD setup.</p>", "a[href=\"../smart-contracts-v0/guides/local-simulate.html#simulating-instantiation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Simulating instantiation<a class=\"headerlink\" href=\"#simulating-instantiation\" title=\"Link to this heading\">#</a></h2><p>To simulate the instantiation of a smart contract instance using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, run the following command:</p>", "a[href=\"guides/gallery/gallery-frontend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create the public front end<a class=\"headerlink\" href=\"#create-the-public-front-end\" title=\"Link to this heading\">#</a></h1><p>The front end is a simple webpage in React that can display the images of the gallery and let the user authenticate.</p><p>When the page is initially opened, it displays the items of the gallery but without the actual images.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#interact-with-the-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with the contract<a class=\"headerlink\" href=\"#interact-with-the-contract\" title=\"Link to this heading\">#</a></h2><h3>View function<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>First, check the initial state of the contract.</p>", "a[href=\"references/transactions.html#commands-for-delegation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands for delegation<a class=\"headerlink\" href=\"#commands-for-delegation\" title=\"Link to this heading\">#</a></h2><h3>Add delegation<a class=\"headerlink\" href=\"#add-delegation\" title=\"Link to this heading\">#</a></h3><p>The command to add delegation on an account with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">add</span></code>. For example, an interaction to add delegation on an account looks like the following:</p><p>The command is:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#the-receive-macro\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...)]</span></code> macro<a class=\"headerlink\" href=\"#the-receive-macro\" title=\"Link to this heading\">#</a></h3><p>In Rust, receive functions can be specified using the procedural macro\n<a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a>, which, like <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a>, is used to annotate a function and sets up an\nexternal function and supplies you with an interface for accessing the context.\nBut, unlike the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a> macro, the function for <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a> is also supplied with\na mutable reference to the current state of the instance:</p>", "a[href=\"guides/overview-shared-accounts.html#signature-threshold\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Signature threshold<a class=\"headerlink\" href=\"#signature-threshold\" title=\"Link to this heading\">#</a></h2><p>Once you\u2019ve added more credentials on an account, you can also specify the number of signatures that are needed to sign a transaction. This is the signature threshold. For example, three users can have a shared account where two of them are needed to authorize a transaction, or three users can have a shared account where only one of them is needed to authorize a transaction.</p>", "a[href=\"guides/run-node.html#troubleshooting\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Link to this heading\">#</a></h2><p>The above configuration describes a basic configuration and has been tested on\nUbuntu 20.04. Other Linux distributions might require some modifications. Below\nare some common issues.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#chain-meta-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Chain meta data<a class=\"headerlink\" href=\"#chain-meta-data\" title=\"Link to this heading\">#</a></h2><p>Both the init- and receive-context contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code> section containing\ninformation of the blockchain at the block the smart contract is executed in.\nThis block is referred to as the <em>current block</em> below.</p><p>Example:</p>", "a[href=\"references/transactions.html#consensus-commands\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Consensus commands<a class=\"headerlink\" href=\"#consensus-commands\" title=\"Link to this heading\">#</a></h2><h3>Show chain parameters<a class=\"headerlink\" href=\"#show-chain-parameters\" title=\"Link to this heading\">#</a></h3><p>Use the consensus command <code class=\"docutils literal notranslate\"><span class=\"pre\">show-chain-parameters</span></code> to show a number of parameters for the last known block or a specific block.</p>", "a[href=\"guides/run-node.html#mounting-host-directories-under-selinux\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Mounting host directories under SELinux<a class=\"headerlink\" href=\"#mounting-host-directories-under-selinux\" title=\"Link to this heading\">#</a></h3><p>When mounting host directories on distributions running <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux\">SELinux</a> special considerations apply.\nIn particular, this includes Fedora and its derivatives. See <a class=\"reference external\" href=\"https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label\">the Docker documentation</a> for details on how to proceed.</p>", "a[href=\"guides/run-local-chain.html#install-the-node-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Install the node distribution<a class=\"headerlink\" href=\"#install-the-node-distribution\" title=\"Link to this heading\">#</a></h3><p>Concordium Node releases exist for Ubuntu, MacOS, Windows and Docker. See the <a class=\"reference internal\" href=\"nodes/node-requirements.html#node-requirements\"><span class=\"std std-ref\">Node Requirements</span></a> section for information on system requirements and detailed instructions on how to obtain, run, and manage a node. To run a validator, you either need a Concordium node binary supplied with your appropriate distribution in your path or a working Docker installation. This depends on whether you want to run the Node binary directly on your host or as a Docker instance. The details below assume the former, but if you want to run a Docker instance, you can skip to the next section.</p><p>The name of the binary has <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-</span></code> as its prefix but depends on the distribution, so you may have to confer with the installation instructions to figure out the exact name. Upon successful installation of the distribution, verify that the binary exists in your path at the required version:</p>", "a[href=\"guides/deciding-wallet.html#no-import-of-identities-and-accounts-from-one-wallet-to-another\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">No import of identities and accounts from one wallet to another<a class=\"headerlink\" href=\"#no-import-of-identities-and-accounts-from-one-wallet-to-another\" title=\"Link to this heading\">#</a></h2><p>Before you decide which wallet to use, it\u2019s important to know that you can\u2019t import identities and accounts from the Concordium Legacy Wallet, Concordium Wallet for Mobile, or Concordium Wallet for Web into the Desktop Wallet. Conversely, you can\u2019t import identities and accounts from the Desktop Wallet into Concordium Legacy Wallet, Concordium Wallet for Mobile, or Concordium Wallet for Web. You also can\u2019t import identities and accounts between Concordium Legacy Wallet and Concordium Wallet for Mobile. This is because they handle private keys in different ways as <a class=\"reference internal\" href=\"#store-private-keys\"><span class=\"std std-ref\">described later</span></a> in this topic. It\u2019s therefore essential that you choose between the wallets before you start creating identities and accounts.</p><p>You can only exchange identities and accounts between the Concordium Wallet for Web and the Concordium Wallet for Mobile.</p>", "a[href=\"guides/create-proofs.html#general-rules\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">General rules<a class=\"headerlink\" href=\"#general-rules\" title=\"Link to this heading\">#</a></h2><p>For the dApp or service developer there are some general rules about proofs that you have to follow.</p>", "a[href=\"resources/ccd-scan.html#delegation-and-staking-pools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation and staking pools<a class=\"headerlink\" href=\"#delegation-and-staking-pools\" title=\"Link to this heading\">#</a></h2><p>The CCDScan tool allows validators to view information that helps them to <a class=\"reference internal\" href=\"guides/baker-pool.html#baker-pool\"><span class=\"std std-ref\">manage their validator and pool responsibly</span></a>. It also allows potential delegators to <a class=\"reference internal\" href=\"guides/baker-pool.html#baker-pool\"><span class=\"std std-ref\">research validators and pools</span></a>.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>.</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a smart\ncontract <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/deploy-module.html#deploy-module-v0\"><span class=\"std std-ref\">deployed</span></a> in some module on-chain.</p><p>Since initializing a smart contract is a transaction, you should also make sure\nto have <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> set up with an account with enough CCD to pay for\nthe transaction.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/index.html#concordium-interoperability-standard-cis-2\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Interoperability Standard (CIS-2)<a class=\"headerlink\" href=\"#concordium-interoperability-standard-cis-2\" title=\"Link to this heading\">#</a></h2><p>Unlike some other Layer-1 token standards, <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html\">CIS-2</a> represents more than one type of token with one standard including fungible tokens, non-fungible tokens, semi-fungible tokens, and soulbound tokens. You can read more information about the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/blob/main/concordium-cis2/src/lib.rs\">implementation of the CIS-2 standard library at this link</a>.</p><p>A standard interface for both fungible and non-fungible tokens is implemented in a smart contract. The interface provides functions for transferring token ownership; allowing other addresses to transfer tokens; and querying token balances, operators and token metadata. It allows off-chain applications to track token balances and the location of token metadata using logged events.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"guides/overview-shared-accounts.html#overview-shared-accounts\"><span class=\"std std-ref\">Shared accounts with multiple credentials in Desktop Wallet</span></a> explains the steps involved to set up a multiple signature (shared) account.</p>", "a[href=\"web3-id/index.html#support-for-issuers-and-verifiers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Support for issuers and verifiers<a class=\"headerlink\" href=\"#support-for-issuers-and-verifiers\" title=\"Link to this heading\">#</a></h2><p>Concordium understands that issuers and verifiers may not have the resources to create a smart contract from scratch and the other tooling needed to issue and prove verifiable credentials.\nSo tooling is provided that enables you to become an issuer and verify credentials as painlessly as possible.</p>", "a[href=\"nodes/node-runner-service-configuration.html#node-env\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">node.env.*<a class=\"headerlink\" href=\"#node-env\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"references/manage-accounts.html#the-mw-gen2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#the-mw-gen2\" title=\"Link to this heading\">#</a></h3><p>The Concordium Wallet for Mobile is a second generation digital smartphone wallet that enables you to create and manage your Concordium identities and accounts, to create simple and shielded transactions, produce blocks (validation) and delegate, and to export and import your accounts and identities.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#identityprovider\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">identityProvider</span></code><a class=\"headerlink\" href=\"#identityprovider\" title=\"Link to this heading\">#</a></h3><p>The id of the identity provider as a JSON number.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#u8-u16-u32-u64-i8-i16-i32-i64\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">U8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U16</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U32</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U64</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I16</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I32</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I64</span></code><a class=\"headerlink\" href=\"#u8-u16-u32-u64-i8-i16-i32-i64\" title=\"Link to this heading\">#</a></h3><p>Give a JSON number within the size of the schema type.</p>", "a[href=\"guides/run-node-windows.html#install-upgrade-and-run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install/upgrade and run a node<a class=\"headerlink\" href=\"#install-upgrade-and-run-a-node\" title=\"Link to this heading\">#</a></h2>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#wallet-settings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Wallet settings<a class=\"headerlink\" href=\"#wallet-settings\" title=\"Link to this heading\">#</a></h3><p>In the Wallet settings <a class=\"reference internal\" href=\"../_images/settings.png\"><img alt=\"gear wheel\" src=\"../_images/settings.png\" style=\"width: 40px;\"/></a> you have the following options.</p>", "a[href=\"guides/overview-desktop.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Desktop Wallet<a class=\"headerlink\" href=\"#set-up-the-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>The Concordium Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts, and to create transactions such as sending CCD, adding a validator, and exporting and importing account information.</p><p>The Desktop Wallet also supports storing of your private keys on a hardware device. Currently, the LEDGER NANO S, LEDGER NANO S Plus, and LEDGER Nano X are supported.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-wrap-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">wrap</span></code> function<a class=\"headerlink\" href=\"#the-wrap-function\" title=\"Link to this heading\">#</a></h3><p>Wrapping CCD refers to the process of converting the native currency CCD into\na <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code> compliant token (wCCD) at a 1:1 ratio by sending CCD to the wCCD smart\ncontract and getting wCCD in return.\nYou can specify with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--amount</span></code> flag how much CCD you want to wrap.</p><p>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">wrap.json</span></code> file and insert the JSON object\nfrom option 1 (Receiver is an account) or option 2 (Receiver is a smart contract).</p>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html#interaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interaction<a class=\"headerlink\" href=\"#interaction\" title=\"Link to this heading\">#</a></h2><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the parameterless\nreceive function <code class=\"docutils literal notranslate\"><span class=\"pre\">my_receive</span></code> while allowing up to 1000 energy to be used,\nrun the following command:</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#request-your-identity-and-account\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Request your identity and account<a class=\"headerlink\" href=\"#request-your-identity-and-account\" title=\"Link to this heading\">#</a></h2><p>Having set up your passcode and your secret recovery phrase, you must then submit a request for an identity and an account.</p>", "a[href=\"guides/run-node-windows.html#view-the-node-log\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View the node log<a class=\"headerlink\" href=\"#view-the-node-log\" title=\"Link to this heading\">#</a></h2><p>You can find the node logs here:</p>", "a[href=\"../smart-contracts/guides/fallback-entrypoints.html#what-are-fallback-entrypoints\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are fallback entrypoints<a class=\"headerlink\" href=\"#what-are-fallback-entrypoints\" title=\"Link to this heading\">#</a></h2><p>A fallback entrypoint is a special kind of entrypoint for a contract.\nIf defined for a given contract, it acts as a catchall for handling invocations\nof entrypoints that do not exist in the contract.</p><p>Consider the contract <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code>, which has two entrypoints, <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code> and a fallback\nentrypoint.\nIf you invoke <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code> on <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code> is simply invoked.\nBut if you invoke <em>any other</em> entrypoint, for example <code class=\"docutils literal notranslate\"><span class=\"pre\">bar</span></code>, then the fallback\nentrypoint is invoked.\nThe fallback entrypoint will then have access to the parameter, amount, and,\nnotably, the name of the entrypoint you attempted to invoke (<code class=\"docutils literal notranslate\"><span class=\"pre\">bar</span></code>).</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#create-an-account\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Create an account<a class=\"headerlink\" href=\"#create-an-account\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/baker-windows.html#configure-a-validator-node-on-windows\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a validator node on Windows<a class=\"headerlink\" href=\"#configure-a-validator-node-on-windows\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/baker-windows.html#other-options-for-running-a-validator-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Other options for running a validator node<a class=\"headerlink\" href=\"#other-options-for-running-a-validator-node\" title=\"Link to this heading\">#</a></h2><p>If you\u2019re not using Windows, you can run a node by using <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#run-node-ubuntu\"><span class=\"std std-ref\">Ubuntu</span></a>, or <a class=\"reference internal\" href=\"guides/run-node-macos.html#run-node-macos\"><span class=\"std std-ref\">macOS</span></a>.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.log_event\"]": "<dt class=\"sig sig-object py\" id=\"concordium.log_event\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">log_event</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Adds a log item from an array of bytes.\nIf not enough data can be read then this function will trap and abort\nexecution of the smart contract.</p></dd>", "a[href=\"../smart-contracts/references/simulate-context.html#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code><a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>JSON Object containing the chain meta data, see <a class=\"reference internal\" href=\"#context-metadata\"><span class=\"std std-ref\">Chain meta data</span></a> for a\nreference of the fields.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.verify_ed25519_signature\"]": "<dt class=\"sig sig-object py\" id=\"concordium.verify_ed25519_signature\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">verify_ed25519_signature</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">public_key</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signature</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">message</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">message_len</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Verify an ed25519 signature.</p></dd>", "a[href=\"../smart-contracts/guides/json-params.html#tokenmetadata-and-contracttokenmetadataqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">tokenMetadata() and ContractTokenMetadataQueryParams<a class=\"headerlink\" href=\"#tokenmetadata-and-contracttokenmetadataqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code> function to retrieve the metadata URL of a token. It is a view function that returns a vector of <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadataQueryResponse</span></code> which holds a <code class=\"docutils literal notranslate\"><span class=\"pre\">MetadataUrl</span></code> struct that stores the URL and the hash.</p>", "a[href=\"../smart-contracts/references/schema-json.html#unnamed\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Unnamed</span></code><a class=\"headerlink\" href=\"#unnamed\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array, with the fields as items corresponding to the types in\nthe field schema.</p><p>Example of unnamed fields in the Rust struct:</p>", "a[href=\"../smart-contracts/guides/quick-start.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts quick start guide<a class=\"headerlink\" href=\"#concordium-smart-contracts-quick-start-guide\" title=\"Link to this heading\">#</a></h1><p>This guide is intended to be used by experienced developers who want to get up and running quickly with a smart contract deployed on chain with which they can interact.</p><p>Before starting, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"guides/become-baker.html#update-the-staked-amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Update the staked amount<a class=\"headerlink\" href=\"#update-the-staked-amount\" title=\"Link to this heading\">#</a></h3><p>To update the validator stake run</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#map\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Map</span></code><a class=\"headerlink\" href=\"#map\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with key-value pairs, depending on the type of\nthe key and the type of value. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Map(AccountAddress,</span> <span class=\"pre\">U64)</span></code>:</p>", "a[href=\"nodes/run-node-ubuntu.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/best-practices/development.html#denial-of-service\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Denial-of-service<a class=\"headerlink\" href=\"#denial-of-service\" title=\"Link to this heading\">#</a></h3><p>This section presents situations when a smart contract ends up in a blocked state making it unusable permanently or for some period of time.</p>", "a[href=\"../smart-contracts/references/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Link to this heading\">#</a></h1><p>A number of references exist to help you when creating and testing smart contracts.</p><p>It is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"concepts/concepts-baker.html#tools-to-be-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Tools to be a validator<a class=\"headerlink\" href=\"#tools-to-be-a-validator\" title=\"Link to this heading\">#</a></h2><p>Validation is possible with Concordium Wallet for Web, Concordium Wallet for Mobile, Concordium Legacy Wallet, <code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium-client</span></code>, and Desktop Wallet, however the process differs between them. The overviews below give a brief description of the process.</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#request-identity\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Request identity<a class=\"headerlink\" href=\"#request-identity\" title=\"Link to this heading\">#</a></h3><p>If your identity request is rejected, you see a message. Tap <strong>Make new identity request</strong> to create a new identity request. You can choose another identity provider.</p>", "a[href=\"concepts/concepts-baker.html#validation-with-desktop-wallet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Validation with Desktop Wallet<a class=\"headerlink\" href=\"#validation-with-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>This overview describes the recommended scenario for running a node and becoming a validator on the Concordium blockchain using Desktop Wallet in combination with a LEDGER device to generate validator keys.</p>", "a[href=\"concepts/concepts-baker.html#next-steps\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Next steps<a class=\"headerlink\" href=\"#next-steps\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/proofs.html#example-dapp\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Example dApp<a class=\"headerlink\" href=\"#example-dapp\" title=\"Link to this heading\">#</a></h2><p>Concordium provides the following example demo app on testnet for you to see how the functionality works:</p>", "a[href=\"nodes/node-requirements.html#synchronize-a-node-with-the-network\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Synchronize a node with the network<a class=\"headerlink\" href=\"#synchronize-a-node-with-the-network\" title=\"Link to this heading\">#</a></h2><p>When you start a node for the first time, it can take a while to synchronize\nthe node with the rest of the network, since it has to get all blocks from\nits peers.</p><p>The startup time of the node can be improved by downloading the blocks from\nan out-of-band catchup service before starting the node. While it will still\ntake time to process the blocks, it will typically be faster than requesting\nthem from peers.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#policy\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Policy<a class=\"headerlink\" href=\"#policy\" title=\"Link to this heading\">#</a></h2><p>Both the init- and receive-context contain a list of policies of the sender.\nSuch a policy is represented as a JSON Object.</p><p>Example:</p>", "a[href=\"references/query-node.html#inspect-consensus-status\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect consensus status<a class=\"headerlink\" href=\"#inspect-consensus-status\" title=\"Link to this heading\">#</a></h3><p>Display key blocks along with various statistics related to block production.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">senderPolicies</span></code><a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3><p>JSON array of the policies of the sender, see <a class=\"reference internal\" href=\"#context-sender-policy\"><span class=\"std std-ref\">Policy</span></a> for a\nreference a policy.</p>", "a[href=\"../smart-contracts/best-practices/development.html#concordium-rust-smart-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Rust Smart Contracts<a class=\"headerlink\" href=\"#concordium-rust-smart-contracts\" title=\"Link to this heading\">#</a></h2><p>This section provides recommendations for developing smart contracts in Rust.\nSee <a class=\"reference internal\" href=\"../smart-contracts/general/introduction.html#introduction\"><span class=\"std std-ref\">Introduction to smart contracts</span></a> for basic information.</p>", "a[href=\"desktop-wallet/proposed-transactions.html#view-a-list-of-multi-signature-proposals\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View a list of multi-signature proposals<a class=\"headerlink\" href=\"#view-a-list-of-multi-signature-proposals\" title=\"Link to this heading\">#</a></h2><p>The list of proposals gives you an overview of all the multi-signature proposals you\u2019ve created and their status. The proposals are shown in chronological order. By default, you can view the latest 50 transactions, but you have the possibility of viewing more if needed.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#limits\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Limits<a class=\"headerlink\" href=\"#limits\" title=\"Link to this heading\">#</a></h2><p>When initializing, updating, or invoking a smart contract, the following limits are enforced:</p>", "a[href=\"../smart-contracts/guides/on-chain-index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain guides<a class=\"headerlink\" href=\"#on-chain-guides\" title=\"Link to this heading\">#</a></h1><p>There are several on-chain guides to help you with smart contract actions.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"mobile-wallet/setup-mobile-wallet.html#get-started\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get started<a class=\"headerlink\" href=\"#get-started\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/setup-env.html#setup-a-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setup a wallet<a class=\"headerlink\" href=\"#setup-a-wallet\" title=\"Link to this heading\">#</a></h2><p>Now you need a Concordium wallet. Use the Concordium Wallet for Web. The Concordium Wallet for Web uses a 24 word secret recovery phrase to secure your wallet. Make sure to protect your 24 word secret recovery phrase and store it in a secure place. Anyone who knows the secret recovery phrase can access your wallet.</p><p>Use <a class=\"reference external\" href=\"https://chrome.google.com/webstore/detail/concordium-wallet/mnnkpffndmickbiakofclnpoiajlegmg?hl=en-US\">this link</a> to install a Concordium Wallet for Web in a chromium web browser. Follow <a class=\"reference internal\" href=\"../net/browser-wallet/setup-browser-wallet.html#setup-bw\"><span class=\"std std-ref\">these instructions</span></a> to install the extension. Configure it to run on testnet with an identity created from the Concordium testnet IP (shown below) and an account based on that identity. You don\u2019t have to provide an ID to create an identity on testnet when selecting <code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium</span> <span class=\"pre\">testnet</span> <span class=\"pre\">IP</span></code>. Test identities are meant for testnet testing only.</p>", "a[href=\"guides/wallets-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium wallets<a class=\"headerlink\" href=\"#concordium-wallets\" title=\"Link to this heading\">#</a></h1><p>Concordium offers its wallets for several different platforms, enabling you to manage CCDs, develop dApps, and more in the way that suits you best.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.</p>", "a[href=\"../smart-contracts/references/references-on-chain.html#modules\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Modules<a class=\"headerlink\" href=\"#modules\" title=\"Link to this heading\">#</a></h2><p>Modules are referenced via their <em>module reference</em>.\nA reference for a module is simply its SHA256 hash.</p><p>Example of a module reference:</p>", "a[href=\"mobile-wallet/inspect-release-schedule-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a release schedule<a class=\"headerlink\" href=\"#inspect-a-release-schedule\" title=\"Link to this heading\">#</a></h1><p>By inspecting the release schedule, you can see when the releases are unlocked.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write unit tests for your piggy bank smart\ncontract and how to setup and locally simulate an invocation of a smart\ncontract.</p>", "a[href=\"references/transactions.html#account-aliases\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account aliases<a class=\"headerlink\" href=\"#account-aliases\" title=\"Link to this heading\">#</a></h3><p>In protocol versions 1 and 2 accounts and account addresses have a one-to-one relationship. In protocol version 3 each account has 16777216 addresses, namely a so-called canonical account address together with\nmatching account <a class=\"reference internal\" href=\"resources/glossary.html#term-Alias\"><span class=\"xref std std-term\">aliases</span></a>. The canonical account address is derived when an account is created on chain. The other 16 million addresses with matching initial 29 bytes are referred to as account aliases for\nthe same account. Thus, accounts can be referred to by any address whose initial 29 bytes match.</p><p>This allows each account to have aliases for different uses and creates a kind of sub-account structure. An account owner can give out different aliases for different uses to keep track of transfers and assign them meaning.</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html#invocation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Invocation<a class=\"headerlink\" href=\"#invocation\" title=\"Link to this heading\">#</a></h2><p>To invoke an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> (the subindex defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>) using the parameterless\nentrypoint <code class=\"docutils literal notranslate\"><span class=\"pre\">my_receive</span></code>, run the following command:</p>", "a[href=\"guides/create-identity.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an identity<a class=\"headerlink\" href=\"#create-an-identity\" title=\"Link to this heading\">#</a></h1><p>Before you can start using a Wallet and submit transactions to the blockchain, you need an identity issued by an identity provider, and, in the case of Concordium Legacy Wallet and Desktop Wallet, an initial account issued by the identity provider. The identity provider submits the initial account to the chain and knows the identity of the owner of the initial account, but not of any other accounts that you create. For Concordium Wallet for Web and Concordium Wallet for Mobile, an initial account is not submitted by the identity provider.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">Accounts</span></a>.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.upgrade\"]": "<dt class=\"sig sig-object py\" id=\"concordium.upgrade\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">upgrade</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">module</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Upgrade to a new module. This will change the smart contract module used for\nthis smart contract instance.</p></dd>", "a[href=\"../smart-contracts-v0/references/schema-json.html#accountaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AccountAddress</span></code><a class=\"headerlink\" href=\"#accountaddress\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string. Example:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#testing-instantiation-of-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing instantiation of a piggy bank<a class=\"headerlink\" href=\"#testing-instantiation-of-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>The first test is to verify that the piggy bank contract can be initialized correctly.\nWriting it also teaches you the basics of using the testing library.</p><p>Start by creating three constants that you will use in most of the upcoming test cases.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#deploying-and-initializing-smart-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying and initializing smart contracts<a class=\"headerlink\" href=\"#deploying-and-initializing-smart-contracts\" title=\"Link to this heading\">#</a></h2>", "a[href=\"references/concordium-client.html#import-accounts-and-keys-from-the-wallet-apps\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Import accounts and keys from the Wallet apps<a class=\"headerlink\" href=\"#import-accounts-and-keys-from-the-wallet-apps\" title=\"Link to this heading\">#</a></h4><p>Import the keys of one or more accounts from a JSON file exported from the\nConcordium Legacy Wallet.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--name</span></code> option selects which account to import and imports it with this\nname. If it\u2019s omitted, all accounts in the file are imported under their\nexisting names.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-sc.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The voting smart contract<a class=\"headerlink\" href=\"#the-voting-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts/tutorials/voting/index.html#voting-dapp\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract development. In this part you will focus on how to write a smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/voting\">voting smart contract</a> allows for conducting an election with several voting options. An <cite>end_time</cite> is set when the election is initialized. Only accounts are eligible to vote. Each account can change its selected voting option as often as it desires until the <cite>end_time</cite> is reached. No voting is possible after the <cite>end_time</cite>.</p>", "a[href=\"../smart-contracts/references/crypto-primitives.html#references\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/schema-json.html#uleb128\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ULeb128</span></code><a class=\"headerlink\" href=\"#uleb128\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string containing an unsigned integer.\nThe number of bytes for the encoding of the integer is bound to a constraint (<code class=\"docutils literal notranslate\"><span class=\"pre\">u32</span></code>) in the schema.\nAs each byte of the encoding contains 7 bits of information, a constraint of <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> puts an upper bound of <code class=\"docutils literal notranslate\"><span class=\"pre\">2^(n</span> <span class=\"pre\">*</span> <span class=\"pre\">7)</span> <span class=\"pre\">-</span> <span class=\"pre\">1</span></code> for the unsigned integer.</p><p>Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">ILeb128(4)</span></code>:</p>", "a[href=\"nodes/node-runner-service-configuration.html#node-exe\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">node.exe<a class=\"headerlink\" href=\"#node-exe\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"nodes/node-requirements.html#system-requirements\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">System requirements<a class=\"headerlink\" href=\"#system-requirements\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/run-node-macos.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run and manage a node on macOS<a class=\"headerlink\" href=\"#run-and-manage-a-node-on-macos\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to run and manage a node on macOS. You can also run a node using <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#run-node-ubuntu\"><span class=\"std std-ref\">Ubuntu</span></a>, or <a class=\"reference internal\" href=\"guides/run-node-windows.html#run-node-windows\"><span class=\"std std-ref\">Windows</span></a>.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#validto\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">validTo</span></code><a class=\"headerlink\" href=\"#validto\" title=\"Link to this heading\">#</a></h3><p>The year and month of the date this policy is valid to, given as a JSON string\nin the format <em>YYYYMM</em>.</p>", "a[href=\"nodes/docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Docker nodes<a class=\"headerlink\" href=\"#docker-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Docker.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-dapp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the front end<a class=\"headerlink\" href=\"#setting-up-the-front-end\" title=\"Link to this heading\">#</a></h1><p>In this part, you will create a web front end. Users can interact with the smart contract more easily\nusing a front end compared to interacting with the node directly.\nNon-tech users might find it inconvenient to interact with smart contracts via the Concordium node\nand some users may choose not to host their own Concordium node locally. This tutorial part shows you\na setup that eliminates the need for the user to host their own Concordium node.</p><p>You can lower the bar for entry by coding an appealing front end that provides additional information\nto your potential customers. Web front ends are a familiar sight nowadays, but to use\nthe front end, users will also need to download a web wallet as a browser extension.\nThe installation and safe usage of the Concordium Wallet for Web might be new for people using your front end.\nProviding comprehensive explanations and step-by-step guides on your website on topics\nrelated to the Concordium Wallet for Web is important for a good user experience. The Concordium Wallet for Web\nconnects via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a> to a server that is connected to a Concordium node. This setup alleviates the\nneed for the user to host their own Concordium node.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#increment-counter\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Increment counter<a class=\"headerlink\" href=\"#increment-counter\" title=\"Link to this heading\">#</a></h3><p>Then change the update function as described below. Remember that input needs to be parsed without any errors. The value must be positive, otherwise you will get an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::IncrementError</span></code>. The transaction must be triggered by the owner of the contract instance or it will throw <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>. And the function itself has to be a mutable function because you are going to change the state of the contract.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Link to this heading\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"release-notes/release-notes-lp.html#testnet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Testnet<a class=\"headerlink\" href=\"#testnet\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_policy_section\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_policy_section\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_policy_section</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">policy_bytes</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Read a section of the policy to the given location.\nReturn the number of bytes read.\nAssumes the location has enough memory to write the requested length into.</p></dd>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html#initialize-cis2-nft-contract-template\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize Cis2-NFT contract template<a class=\"headerlink\" href=\"#initialize-cis2-nft-contract-template\" title=\"Link to this heading\">#</a></h2><p>You will use <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> that you installed in the first part to initialize the template.</p><p>First, you need to install the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-generate</span></code> tool and then initialize the folder. By default, it\u2019ll create a cis2-nft contract template.</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/smartContractUpgrade.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Native upgradability<a class=\"headerlink\" href=\"#native-upgradability\" title=\"Link to this heading\">#</a></h1><p>The goal of this tutorial is to deploy a <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>, upgrade its logic, and migrate its state to <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code>.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version1\">contract-version1</a>\nincludes an <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> function and the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version2\">contract-version2</a>\nincludes a <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function. These functions are explored in the next two sections.</p>", "a[href=\"../smart-contracts/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#set-up-the-mw-gen2\" title=\"Link to this heading\">#</a></h1><p>The Concordium Wallet for Mobile is a digital <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"concepts/concepts-delegation.html#pool-reliability\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pool reliability<a class=\"headerlink\" href=\"#pool-reliability\" title=\"Link to this heading\">#</a></h3><p>The rewards earned by a pool depend greatly on the reliability of the validator. If they miss producing a block they were selected to produce, or if they go offline, then less rewards will be distributed to the entire pool. If a validator misses a block, the blockchain knows who missed it. To help a delegator choose the best pool possible, statistics are available on <a class=\"reference external\" href=\"https://ccdscan.io\">CCDScan</a> about the performance of the different pools, the reliability of the validator, and the size of the pool.</p>", "a[href=\"../smart-contracts/best-practices/development.html#external-call-failure\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">External call failure<a class=\"headerlink\" href=\"#external-call-failure\" title=\"Link to this heading\">#</a></h4><p>Sending funds back to an unknown contract address as part of some complex operation could block this operation from succeeding.\nThe contract you call might fail for various reasons.\nIf the contract call fails, the whole operation also fails.</p><p>Consider splitting withdrawal of funds from the rest of the contract logic.\nYou could create a separate entrypoint allowing users, which could be smart contracts, to request funds back.\nThis pattern is called <em>Pull over Push</em>, where <em>Pull</em> corresponds to the user explicitly requesting funds and <em>Push</em> to sending the funds back as part of some other operation.</p>", "a[href=\"../smart-contracts/references/host-fns.html#identity-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Identity data<a class=\"headerlink\" href=\"#identity-data\" title=\"Link to this heading\">#</a></h2><p>Functions for reading identity information.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/frontend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up a front end<a class=\"headerlink\" href=\"#setting-up-a-front-end\" title=\"Link to this heading\">#</a></h1><p>As an alternative to interacting with smart contracts directly,\nusers might have a better experience using a web-based application.</p><p>For the Piggybank example, such an application is available in <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-piggybank/\">this repository</a>.\nThe application is able to perform contract updates on behalf of the user,\neither using the Concordium Wallet for Web or Concordium Wallet for Mobile via\n<a class=\"reference external\" href=\"https://docs.walletconnect.com/2.0/\">Wallet Connect (v2)</a>.</p>", "a[href=\"guides/multi-credentials.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"guides/overview-shared-accounts.html#overview-shared-accounts\"><span class=\"std std-ref\">Shared accounts with multiple credentials in Desktop Wallet</span></a> explains the steps involved to set up a multiple signature (shared) account.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html#explore-your-public-key\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Explore your public key<a class=\"headerlink\" href=\"#explore-your-public-key\" title=\"Link to this heading\">#</a></h2><p>You can export your keys file from the Concordium Wallet for Web as follows:</p>", "a[href=\"references/manage-accounts.html#the-desktop-wallet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Desktop Wallet<a class=\"headerlink\" href=\"#the-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>The Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts from your desktop and to create transactions such as sending CCD, adding a validator, and exporting and importing account information.</p>", "a[href=\"guides/run-node.html#migration-docker-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Migration from the previous Docker distribution<a class=\"headerlink\" href=\"#migration-docker-distribution\" title=\"Link to this heading\">#</a></h3><p>In the past Concordium provided a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-software</span></code> package which\ncontained a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> binary which orchestrated downloading a Docker\nimage and running the node. To migrate from that setup:</p>", "a[href=\"../smart-contracts/references/simulate-context.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"../smart-contracts/guides/local-simulate.html#local-simulate\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"references/transactions.html#make-a-shielded-transfer\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Make a shielded transfer<a class=\"headerlink\" href=\"#make-a-shielded-transfer\" title=\"Link to this heading\">#</a></h3><p>A <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transfer</span></a> is a transfer from a <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a> to a shielded\nbalance of another account. The command is very similar to a standard transfer.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#set-up-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a piggy bank<a class=\"headerlink\" href=\"#set-up-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Now you will write the function to set up a new piggy bank, which in turn means\nspecifying the init function for a smart contract.\nA smart contract must specify an init function, which is called when new\ninstances of the contract are created, and is used to set up the initial state of\nthe contract instance.</p>", "a[href=\"../smart-contracts-v0/references/references-on-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"guides/company-identities.html#using-the-concordium-company-id-tool\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using the Concordium Company ID tool<a class=\"headerlink\" href=\"#using-the-concordium-company-id-tool\" title=\"Link to this heading\">#</a></h2><p>Once you have dowloaded the Concordium Company ID tool for your platform and installed it, you should choose your network, either Mainnet or Testnet. A default Concordium node URL is used, but you can enter your node URL, if desired.</p>", "a[href=\"guides/tokens.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Tokens in the wallet<a class=\"headerlink\" href=\"#tokens-in-the-wallet\" title=\"Link to this heading\">#</a></h1><p>You can add, inspect, and send tokens in the Concordium Wallet for Web and Concordium Wallet for Mobile.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#generate-the-transaction-proposal-without-signing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate the transaction proposal without signing<a class=\"headerlink\" href=\"#generate-the-transaction-proposal-without-signing\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code><a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>JSON Object containing the chain meta data, see <a class=\"reference internal\" href=\"#context-metadata-v0\"><span class=\"std std-ref\">Chain meta data</span></a> for a\nreference of the fields.</p>", "a[href=\"guides/overview-shared-accounts.html#step-2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Step 2<a class=\"headerlink\" href=\"#step-2\" title=\"Link to this heading\">#</a></h3><p>The account owner shares the account address with the user or users whose credentials are going to be added to the account.</p>", "a[href=\"guides/baker-pool.html#recommendations-for-staking-pool-owners\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Recommendations for staking pool owners<a class=\"headerlink\" href=\"#recommendations-for-staking-pool-owners\" title=\"Link to this heading\">#</a></h3><p>If you are running a staking pool, you are responsible for managing your pool to maximize returns, both for yourself and those who have delegated stake to your pool.</p><p>To help potential delegators with their choice, it is a good idea to create a site with information and add this URL to your staking pool configuration. This information is published on <a class=\"reference internal\" href=\"resources/ccd-scan-staking.html#home-screen-baker\"><span class=\"std std-ref\">CCDScan</span></a> so that potential delegators can read about the pool and understand your goals. Having a URL on your staking pool configuration is not required.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize, build, and deploy the smart contract<a class=\"headerlink\" href=\"#initialize-build-and-deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h1><p>Now you are ready to build your smart contract. You\u2019ll be using the <code class=\"docutils literal notranslate\"><span class=\"pre\">cis2-nft</span></code> contract template provided by Concordium.</p>", "a[href=\"../smart-contracts-v0/guides/compile-module.html#caveats\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Caveats<a class=\"headerlink\" href=\"#caveats\" title=\"Link to this heading\">#</a></h3><p>The above will likely not fix the issue if the <code class=\"docutils literal notranslate\"><span class=\"pre\">rust-src</span></code> component is\ninstalled for the Rust toolchain. This component is needed by some Rust tools\nsuch as the <a class=\"reference external\" href=\"https://github.com/rust-analyzer/rust-analyzer\">rust-analyzer</a>.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#outputting-a-schema-file\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Outputting a schema file<a class=\"headerlink\" href=\"#outputting-a-schema-file\" title=\"Link to this heading\">#</a></h3><p>To output the schema into a file, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span> <span class=\"pre\">FILE</span></code>\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">FILE</span></code> is a path and filename. The path\nmust exist and the file will be created in following command</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#contractname\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ContractName</span></code><a class=\"headerlink\" href=\"#contractname\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with a <code class=\"docutils literal notranslate\"><span class=\"pre\">contract</span></code> field of type JSON string.\nExample:</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_parameter_size\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_parameter_size\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_parameter_size</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">i</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Get the byte size of the <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code>-th parameter to the call. The 0-th parameter is\nalways the original parameter that the method was invoked with. Invoking\nother contracts with <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code> adds additional parameters to the stack.</p></dd>", "a[href=\"guides/run-node-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run and manage a node on Windows<a class=\"headerlink\" href=\"#run-and-manage-a-node-on-windows\" title=\"Link to this heading\">#</a></h1><p>This guide describes how you can run and manage a node on the Concordium network from a Windows computer. You can also run a node using <a class=\"reference internal\" href=\"guides/run-node.html#run-a-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"guides/run-node-ubuntu.html#run-node-ubuntu\"><span class=\"std std-ref\">Ubuntu</span></a>, or <a class=\"reference internal\" href=\"guides/run-node-macos.html#run-node-macos\"><span class=\"std std-ref\">macOS</span></a>.</p><p>If you want to run a validator node on Windows, see <a class=\"reference internal\" href=\"guides/baker-windows.html#baker-windows\"><span class=\"std std-ref\">Configure a node on Windows as validator</span></a>.</p>", "a[href=\"references/manage-accounts.html#the-bw\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Wallet for Web<a class=\"headerlink\" href=\"#the-bw\" title=\"Link to this heading\">#</a></h3><p>The Concordium Wallet for Web is a web wallet extension that enables you to create and manage your Concordium identities and accounts, to create simple transactions, produce blocks (validation) and delegate, and to connect to dApps.</p>", "a[href=\"desktop-wallet/accounts-desktop.html#preferences\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Preferences<a class=\"headerlink\" href=\"#preferences\" title=\"Link to this heading\">#</a></h3><p>The Desktop Wallet provides a set of multi-signature transactions called Foundation transactions that only members of the Concordium Foundation can sign.</p><p>These transactions are disabled by default, and if you\u2019re not a member of the Concordium Foundation it is strongly recommended that you don\u2019t enable them. If you do enable the transactions, they will be listed on the multi-signature transactions page. However, you\u2019ll not be able to actually sign or submit any of these transactions.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.hash_keccak_256\"]": "<dt class=\"sig sig-object py\" id=\"concordium.hash_keccak_256\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">hash_keccak_256</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data_len</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">output</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Compute the Keccak-256 digest of the data.</p></dd>", "a[href=\"../smart-contracts-v0/references/schema-json.html#enum\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Enum</span></code><a class=\"headerlink\" href=\"#enum\" title=\"Link to this heading\">#</a></h3><p>An enum variant is supplied as an JSON object containing a single\nproperty, where the name of the variant as the property and the fields as the\nvalue. More about the fields below.</p><p>Example of JSON for an enum <code class=\"docutils literal notranslate\"><span class=\"pre\">Option</span></code>:</p>", "a[href=\"web3-id/wallet.html#backup-verifiable-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Backup verifiable credentials<a class=\"headerlink\" href=\"#backup-verifiable-credentials\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#sender\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code><a class=\"headerlink\" href=\"#sender\" title=\"Link to this heading\">#</a></h3><p>The address of the sender of the message triggering the receive function.\nCan be either a smart contract instance or an account address, given as a JSON\nobject.</p><p>Example of account address:</p>", "a[href=\"../smart-contracts/tutorials/setup-env.html#install-concordium-client\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install Concordium Client<a class=\"headerlink\" href=\"#install-concordium-client\" title=\"Link to this heading\">#</a></h2><p>The tutorials use <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> as a command line tool to deploy, mint, and transfer. <a class=\"reference internal\" href=\"../net/installation/downloads.html#concordium-node-and-client-download-testnet\"><span class=\"std std-ref\">Download it here</span></a>. Rename the package to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> in case it has some version annotation.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#concordium-std-crate-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium-std</span></code> crate errors<a class=\"headerlink\" href=\"#concordium-std-crate-errors\" title=\"Link to this heading\">#</a></h3><p>Ensure that you don\u2019t send any CCD to the smart contract instance.\nYou can find explanations about the behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point in this <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#smashing-the-piggy-bank-writing\"><span class=\"std std-ref\">guide</span></a>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point is <code class=\"docutils literal notranslate\"><span class=\"pre\">non-payable</span></code> and will print the below error message if you send CCD with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--amount</span></code> flag.\nThe opposite is not true and you can omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">--amount</span></code> flag when interacting\nwith a <code class=\"docutils literal notranslate\"><span class=\"pre\">payable</span></code> function without raising an error because in that case 0 CCD is sent to the <code class=\"docutils literal notranslate\"><span class=\"pre\">payable</span></code> entry point.</p>", "a[href=\"resources/ccd-scan-staking.html#validator-details\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Validator details<a class=\"headerlink\" href=\"#validator-details\" title=\"Link to this heading\">#</a></h2><p>When you click a validator ID, the following appears:</p>", "a[href=\"guides/export-import.html#final-notes\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Final Notes<a class=\"headerlink\" href=\"#final-notes\" title=\"Link to this heading\">#</a></h2><p>If the wallet does not have the keys for some accounts and you have previously made a wallet backup using the export functionality, uninstall and reinstall the Concordium Legacy Wallet or Desktop Wallet. You can then import your wallet backup into the new wallet.</p><p>If the wallet does not have the keys from some accounts and you do not have a backup of the keys on an exported file, these accounts cannot be used. Therefore, you should ensure that you never ask anyone to transfer CCD to such accounts. Instead, go through a new identification process and generate new accounts that can be used in the future. And remember to export a new backup of the account keys each time you have generated a new account in the app.</p>", "a[href=\"../smart-contracts/general/contract-module.html#floating-point-numbers\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Floating point numbers<a class=\"headerlink\" href=\"#floating-point-numbers\" title=\"Link to this heading\">#</a></h4><p>Although Wasm does have support for floating point numbers, a smart contract is\ndisallowed to use them. The reason for this is that Wasm floating-point numbers\ncan have a special <code class=\"docutils literal notranslate\"><span class=\"pre\">NaN</span></code> (\u201cnot a number\u201d) value whose treatment can result in nondeterminism.</p><p>The restriction applies statically, meaning that smart contracts cannot contain\nfloating point types, nor can they contain any instructions that involve floating\npoint values.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#smashing-a-piggy-bank\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smashing a piggy bank<a class=\"headerlink\" href=\"#smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h3><p>Now that you can insert CCD into a piggy bank, you also need to define how to\nsmash one.\nRemember, you only want the owner of the piggy bank (smart contract\ninstance) to be able to smash it and only if it isn\u2019t already smashed.\nIt should set its state to be smashed and transfer all of its CCD to the owner.</p><p>Again you use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a> macro to define the smash function:</p>", "a[href=\"web3-id/index.html#issuer\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Issuer<a class=\"headerlink\" href=\"#issuer\" title=\"Link to this heading\">#</a></h3><p>An issuer will typically consist of the following components.</p>", "a[href=\"nodes/troubleshoot-windows.html#event-viewer\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Event viewer<a class=\"headerlink\" href=\"#event-viewer\" title=\"Link to this heading\">#</a></h2><p>Use the Event viewer to get more information about the problem. In the <strong>Search</strong> bar, search for <strong>Event viewer</strong>. In the <strong>Windows Logs</strong> click <strong>Application</strong>. Use the warnings and errors to diagnose the issue.</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html#naming-a-contract-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Naming a contract instance<a class=\"headerlink\" href=\"#naming-a-contract-instance\" title=\"Link to this heading\">#</a></h2><p>A contract instance can be given a local alias, or <em>name</em>, which makes\nreferencing it easier.\nThe name is only stored locally by <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, and is not visible\non-chain.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.hash_sha3_256\"]": "<dt class=\"sig sig-object py\" id=\"concordium.hash_sha3_256\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">hash_sha3_256</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data_len</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">output</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Compute the SHA3-256 digest of the data.</p></dd>", "a[href=\"resources/ccd-scan-staking.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Staking overview<a class=\"headerlink\" href=\"#ccdscan-staking-overview\" title=\"Link to this heading\">#</a></h1><p>The Staking overview shows information about validators during the selected time range in the filter:</p>", "a[href=\"concepts/concepts-delegation.html#where-delegation-is-available\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Where delegation is available<a class=\"headerlink\" href=\"#where-delegation-is-available\" title=\"Link to this heading\">#</a></h2><p>You can <a class=\"reference internal\" href=\"guides/add-delegation.html#add-delegation\"><span class=\"std std-ref\">delegate CCDs</span></a> in the Desktop Wallet, Concordium Legacy Wallet, Concordium Wallet for Mobile, and Concordium Wallet for Web. You can also delegate from <a class=\"reference internal\" href=\"references/transactions.html#transactions\"><span class=\"std std-ref\">Concordium Client</span></a>. It is recommended that you use <a class=\"reference internal\" href=\"resources/ccd-scan.html#ccd-scan\"><span class=\"std std-ref\">CCDScan</span></a> to research the various validators and pools prior to delegation if you plan to delegate to a specific pool.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">senderPolicies</span></code><a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3><p>JSON array of the policies of the sender, see <a class=\"reference internal\" href=\"#context-sender-policy-v0\"><span class=\"std std-ref\">Policy</span></a> for a\nreference a policy.</p>", "a[href=\"guides/become-baker.html#remove-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Remove a validator<a class=\"headerlink\" href=\"#remove-a-validator\" title=\"Link to this heading\">#</a></h2><p>The controlling account can choose to de-register its validator on the chain. To do\nso you have to execute:</p>", "a[href=\"guides/run-node-macos.html#view-node-logs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View node logs<a class=\"headerlink\" href=\"#view-node-logs\" title=\"Link to this heading\">#</a></h2><p>There are two ways to view the logs:</p>", "a[href=\"desktop-wallet/update-application.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update the Desktop Wallet<a class=\"headerlink\" href=\"#update-the-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>The Desktop Wallet installs updates automatically on <strong>MacOS</strong>, <strong>Windows</strong>, and <strong>Linux</strong> (though only for the AppImage distribution).</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#list\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">List</span></code><a class=\"headerlink\" href=\"#list\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with items, depending on the\nnested type. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">List(U16)</span></code>:</p>", "a[href=\"references/concordium-client.html#update-keys-of-an-account\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Update keys of an account<a class=\"headerlink\" href=\"#update-keys-of-an-account\" title=\"Link to this heading\">#</a></h4><p>Update a sign/verify key-pair on a specific account. The <code class=\"docutils literal notranslate\"><span class=\"pre\">KEYS</span></code> parameter must be\na JSON file that contains the keys that will be added in the same format as for adding keys.</p>", "a[href=\"guides/run-local-chain.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a local chain<a class=\"headerlink\" href=\"#run-a-local-chain\" title=\"Link to this heading\">#</a></h1><p>This guide details how to run your own instance of the Concordium blockchain. This is useful when developing and testing smart contracts. Running your own chain also lets you control various aspects, such as the genesis parameters, anonymity revokers, identity providers, and foundation accounts.</p><p>The chain is run by a network of validator nodes that produce blocks. In the following minimal example you will set up a network comprised of a single validator node that runs <em>locally</em> on your system and <em>does not connect to mainnet or testnet</em>. Note, however, that the concepts demonstrated here equally apply to any number of validator nodes configured in a LAN or WAN setting.</p>", "a[href=\"../smart-contracts/guides/no-std.html#setting-up-the-module-for-no-std\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the module for <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#setting-up-the-module-for-no-std\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library exposes a <code class=\"docutils literal notranslate\"><span class=\"pre\">std</span></code> feature, which enables the use\nof the rust standard library.\nThis feature is enabled by default.</p><p>To disable it, one must simply disable default features for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> in the dependencies of your module.\nYou can update your <cite>Cargo.toml</cite> file by using:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#the-receive-macro\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...)]</span></code> macro<a class=\"headerlink\" href=\"#the-receive-macro\" title=\"Link to this heading\">#</a></h3><p>In Rust, receive functions can be specified using the procedural macro\n<a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a>, which, like <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a>, is used to annotate a function and sets up an\nexternal function and supplies you with an interface for accessing the context.\nBut, unlike the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.init.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[init]</span></code></a> macro, the function for <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a> is supplied with\na reference to the host (through which you can access the state of the instance):</p>", "a[href=\"guides/gallery/gallery-backend.html#verify-proof\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Verify Proof<a class=\"headerlink\" href=\"#verify-proof\" title=\"Link to this heading\">#</a></h2><p>When the user wants to obtain a token they must send in a proof that can be verified. This endpoint expects a POST request with a body containing:</p>", "a[href=\"guides/multisig-transfer.html#send-ccd-with-a-schedule\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Send CCD with a schedule<a class=\"headerlink\" href=\"#send-ccd-with-a-schedule\" title=\"Link to this heading\">#</a></h2><p>This guide describes how you create a multi-signature transfer with a schedule. For information about multi-signature transfer without a schedule, see <a class=\"reference internal\" href=\"desktop-wallet/multisig-simple-transfer.html#create-multisig\"><span class=\"std std-ref\">Create a multi-signature CCD transfer in the Desktop Wallet</span></a>.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#creating-a-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Creating a chain<a class=\"headerlink\" href=\"#creating-a-chain\" title=\"Link to this heading\">#</a></h2><p>The primary construct used for testing is the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Chain</span></code></a> type, which you should only create one of per test.\nIt represents the blockchain and has methods for creating accounts and deploying and working with contracts.</p><p>Use the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.new\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Chain::new</span></code></a> method to create a chain with default settings.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/mint-xfer.html#transfer-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer function<a class=\"headerlink\" href=\"#transfer-function\" title=\"Link to this heading\">#</a></h2><p>Now you will transfer the token and check the balance of your account and the other wallet in the following steps.</p><p>Before you transfer the NFT, you should change the sender account and receiver account in the  <code class=\"docutils literal notranslate\"><span class=\"pre\">../nft-artifacts/transfer-params.json</span></code> file. Make sure you make the adjustments of addresses accordingly as shown below. You can create another account on your wallet to transfer this token to that.</p>", "a[href=\"guides/shielded-transfer.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>Your transaction is now submitted to the chain. It might take a little while for it to finalize on the chain, and you can follow the status of the transaction in the log.</p>", "a[href=\"guides/remove-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Remove delegation to a staking pool or passive delegation<a class=\"headerlink\" href=\"#remove-delegation-to-a-staking-pool-or-passive-delegation\" title=\"Link to this heading\">#</a></h1><p>You can remove the delegation on an account to stop delegating.</p><p>If you remove the delegation, there is a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a> before the delegation is stopped. During this period, you continue to earn rewards; you cannot change the delegation amount, but you can change other delegation settings. The delegation stop is not effective until the next pay day after cool-down period ends. At that time the amount you had delegated is returned to your disposable balance.</p>", "a[href=\"guides/low-code-nft-marketplace/minting-tool.html#mint\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Mint<a class=\"headerlink\" href=\"#mint\" title=\"Link to this heading\">#</a></h2><p>Concordium provides a <a class=\"reference external\" href=\"https://github.com/bogacyigitbasi/sample-images/blob/main/NFTs.zip\">library of sample images you can download</a> and use to practice minting NFTs.</p>", "a[href=\"../smart-contracts/references/schema-json.html#bytelist\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ByteList</span></code><a class=\"headerlink\" href=\"#bytelist\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string containing a variable-sized list of bytes encoded in lowercase hex.\nNotice each byte is encoded using two charactors in hex.</p><p>Example:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#string\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">String</span></code><a class=\"headerlink\" href=\"#string\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string.</p>", "a[href=\"guides/export-import.html#how-to-back-up-and-import\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How to back up and import<a class=\"headerlink\" href=\"#how-to-back-up-and-import\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/host-fns.html#chain-data\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Chain data<a class=\"headerlink\" href=\"#chain-data\" title=\"Link to this heading\">#</a></h2><p>Functions for reading information about the chain.</p>", "a[href=\"release-notes/release-notes-lp.html#ccdscan\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan<a class=\"headerlink\" href=\"#ccdscan\" title=\"Link to this heading\">#</a></h3>", "a[href=\"release-notes/release-notes-lp.html#mw-gen1-for-ios\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Legacy Wallet for iOS<a class=\"headerlink\" href=\"#mw-gen1-for-ios\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/references/host-fns.html#logging-events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Logging events<a class=\"headerlink\" href=\"#logging-events\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html#accounts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accounts<a class=\"headerlink\" href=\"#accounts\" title=\"Link to this heading\">#</a></h2><p>Solana accounts are somewhat similar to files and can hold arbitrary data.\nSome accounts are marked as <em>executable</em> and contain program code.\nThese accounts themselves are immutable, but programs stored in their data can modify data in accounts they own.</p><p>Concordium, on the other hand, has a strict separation between user accounts and smart contracts.\nBoth accounts and smart contracts have CCD balances associated with them.\nMoreover, smart contracts can have state \u2013 structured data associated with the contract.\nThis data can be updated directly only by the smart contract code it belongs to.\nThe only way of interacting with the contract state from outside is through the interface that the smart contract provides.\nThis interface consists of entrypoints.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-unwrap-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">unwrap</span></code> function<a class=\"headerlink\" href=\"#the-unwrap-function\" title=\"Link to this heading\">#</a></h3><p>Unwrapping CCD refers to the opposite process of converting the <code class=\"docutils literal notranslate\"><span class=\"pre\">CIS-2</span></code>\ncompliant wCCD token at a 1:1 ratio back to the native currency CCD by burning the\nwCCD token in the wCCD smart contract and getting CCD in return.</p>", "a[href=\"concepts/concepts-baker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validators<a class=\"headerlink\" href=\"#validators\" title=\"Link to this heading\">#</a></h1><p>Validation is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> is a validator node when it participates actively in the network by creating new <a class=\"reference internal\" href=\"resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> nodes. A <a class=\"reference internal\" href=\"resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> collects, orders, and validates the <a class=\"reference internal\" href=\"resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a> that are included in a block to maintain the integrity of the blockchain. The validators sign each block that they produce so that the block can be verified and executed by the other validators in the network.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#basic-navigation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic navigation<a class=\"headerlink\" href=\"#basic-navigation\" title=\"Link to this heading\">#</a></h2><p>Click <a class=\"reference internal\" href=\"../_images/hamburger-menu.png\"><img alt=\"three horizontal lines\" src=\"../_images/hamburger-menu.png\" style=\"width: 20px;\"/></a> to change between pages.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-full-dApp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Running your first full dApp<a class=\"headerlink\" href=\"#running-your-first-full-dapp\" title=\"Link to this heading\">#</a></h1><p>You are running your own local dApp now. If you want, you can compare it with our\n<a class=\"reference external\" href=\"https://wccd.testnet.concordium.com/\">testnet wCCD dApp</a> hosted on testnet or <a class=\"reference external\" href=\"https://wccd.mainnet.concordium.software/\">mainnet wCCD dApp</a> hosted on mainnet. You can use your Concordium Wallet for Web\nto connect to the dApp.</p>", "a[href=\"../smart-contracts/references/schema-json.html#unit\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Unit</span></code><a class=\"headerlink\" href=\"#unit\" title=\"Link to this heading\">#</a></h3><p>No bytes are produced no matter the value given here.</p>", "a[href=\"references/query-node.html#id4\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#id4\" title=\"Link to this heading\">#</a></h4>", "a[href=\"../smart-contracts/guides/fallback-entrypoints.html#using-fallback-entrypoints\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using fallback entrypoints<a class=\"headerlink\" href=\"#using-fallback-entrypoints\" title=\"Link to this heading\">#</a></h2><p>You can create fallback entrypoints by making a new entrypoint and adding\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">fallback</span></code> attribute to it:</p>", "a[href=\"../smart-contracts/references/local-settings.html#local-names\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Local Names<a class=\"headerlink\" href=\"#local-names\" title=\"Link to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> allows the user to add local aliases, or <em>names</em>, to\naccounts, contract instances, and modules in order to make referencing them\neasier.</p>", "a[href=\"references/concordium-client.html#run-concordium-client\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run Concordium Client<a class=\"headerlink\" href=\"#run-concordium-client\" title=\"Link to this heading\">#</a></h2><p>Run Concordium Client from the command line. On MacOS or Linux, access the command line with the Terminal application. On Windows, use the Power Shell or Command Prompt application. If you run it outside of the command line (e.g., by double clicking in Windows Explorer), then the Concordium Client will exit immediately without doing anything useful.</p><p>To run the Concordium Client, you have to specify its full path unless you are in the same directory. If using MacOS the installation puts it in $PATH so that you can type <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> from anywhere. You must specify the file name, including the version number. For example, assuming that you saved the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client_5.1.1.exe</span></code> in the Downloads folder of a user called User, then the full path is probably <code class=\"docutils literal notranslate\"><span class=\"pre\">C:\\Users\\User\\Downloads\\concordium-client_5.1.1.exe</span></code>. So you enter the full path at the prompt in the terminal.</p>", "a[href=\"nodes/node-requirements.html#platforms\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Platforms<a class=\"headerlink\" href=\"#platforms\" title=\"Link to this heading\">#</a></h3><p>You can run a node on <a class=\"reference internal\" href=\"nodes/ubuntu.html#ubuntu-node\"><span class=\"std std-ref\">Ubuntu</span></a>, <a class=\"reference internal\" href=\"nodes/docker.html#docker-node\"><span class=\"std std-ref\">Docker</span></a>, <a class=\"reference internal\" href=\"nodes/windows.html#windows-node\"><span class=\"std std-ref\">Windows</span></a>, or <a class=\"reference internal\" href=\"nodes/macos.html#macos-node\"><span class=\"std std-ref\">MacOS</span></a>.</p>", "a[href=\"installation/downloads.html#vscode-extension\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">VSCode extension<a class=\"headerlink\" href=\"#vscode-extension\" title=\"Link to this heading\">#</a></h3><p>You can <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=Concordium.concordium-smart-contracts\">install the VSCode extension</a> for smart contract development from the VSCode marketplace.</p><p>For information about using the VSCode extension, <a class=\"reference external\" href=\"https://www.youtube.com/watch?v=9qjcsGDeveg\">watch the video</a>.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#createdat\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">createdAt</span></code><a class=\"headerlink\" href=\"#createdat\" title=\"Link to this heading\">#</a></h3><p>The year and month of the date this policy was created at, given as a JSON\nstring in the format <em>YYYYMM</em>.</p>", "a[href=\"../smart-contracts/references/schema-json.html#accountaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AccountAddress</span></code><a class=\"headerlink\" href=\"#accountaddress\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string. Example:</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html#why-use-a-contract-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Why use a contract schema<a class=\"headerlink\" href=\"#why-use-a-contract-schema\" title=\"Link to this heading\">#</a></h2><p>Data on the blockchain, such as the state of an instance and parameters passed\nto init and receive functions, is serialized as a sequence of bytes.\nThe serialization is optimized for efficiency, rather than human readability.</p><p>Usually these bytes have structure and this structure is known to the smart\ncontract as part of the contract functions, but outside of these functions it\ncan be difficult to make sense of the bytes. This is especially the case when\ninspecting a complex state of a contract instance or when passing complex\nparameters to a smart contract function. In the latter case, the bytes should\neither be serialized from structured data or written manually.</p>", "a[href=\"../smart-contracts/guides/inspect-instance.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#setup-the-contract-for-a-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the contract for a schema<a class=\"headerlink\" href=\"#setup-the-contract-for-a-schema\" title=\"Link to this heading\">#</a></h2><p>In order to build a contract schema, you first have to prepare our smart\ncontract for building the schema.</p><p>You can choose which parts of the smart contract to include in the schema.\nFor each init function, you can choose to include a schema for the parameter, the errors, and/or the events.\nAnd for each receive function, you can choose to include a schema for the parameter,\nthe return value, and/or the errors.</p>", "a[href=\"browser-wallet/browser-wallet-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web FAQ<a class=\"headerlink\" href=\"#bw-faq\" title=\"Link to this heading\">#</a></h1>", "a[href=\"../smart-contracts/tutorials/sft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer semi-fungible token<a class=\"headerlink\" href=\"#mint-and-transfer-semi-fungible-token\" title=\"Link to this heading\">#</a></h1><p>You have a contract instance which means you have an empty state and are ready to mint some tokens! You will be using <a class=\"reference external\" href=\"https://gateway.pinata.cloud/ipfs/QmZ3939dLLFzvYZjFnkdqACe2n9TQA8Rx4efbjaYTXteeu\">this metadata</a> and minting 100 of <a class=\"reference external\" href=\"https://ipfs.io/ipfs/QmNqv1QnZw6j6N3ueqCA6VotciHUopRAvZqY8JBnheoLk6\">this cool image</a>.</p><p>Create a folder called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-artifacts</span></code> and create a JSON file called <code class=\"docutils literal notranslate\"><span class=\"pre\">mint-params.json</span></code> in the folder to execute these steps properly. In the JSON file, you are going to give the minting parameters to the MintParams which you worked on a little in the beginning.</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/smartContractUpgrade.html#the-upgrade-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> function<a class=\"headerlink\" href=\"#the-upgrade-function\" title=\"Link to this heading\">#</a></h2><p>A native smart contract upgrade can be triggered on the <code class=\"docutils literal notranslate\"><span class=\"pre\">host</span></code> as seen in the code snippet below:</p>", "a[href=\"guides/send-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Send CCD<a class=\"headerlink\" href=\"#send-ccd\" title=\"Link to this heading\">#</a></h1><p>This topic describes how you can send CCD from an account when only one participant is required to sign the transfer.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_lookup_entry\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_lookup_entry\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_lookup_entry</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Lookup an entry with the given key.</p></dd>", "a[href=\"guides/create-proofs.html#tool-to-verify-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Tool to verify credentials<a class=\"headerlink\" href=\"#tool-to-verify-credentials\" title=\"Link to this heading\">#</a></h2><p>Concordium has developed a verifier tool which is a self-contained service that handles the retrieval of credentials from the chain, and the cryptographic verification of presentations.\nThe tool is generic and the API exposed is minimal.\nThe verifier has a single POST endpoint and is meant to be used by another service, such as a dApp.</p><p>The response to the request will be status code 200 together with a JSON body that contains the request (i.e., challenge and statement for which the presentation is valid) together with the timestamp and block in which the verification took place. In case of an invalid request the HTTP status code will be in the 4** range, either 404 if credentials cannot be found, or 400 for invalid proofs or otherwise malformed requests.</p>", "a[href=\"guides/run-node.html#migration-from-the-previous-docker-distribution\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Migration from the previous Docker distribution<a class=\"headerlink\" href=\"#migration-from-the-previous-docker-distribution\" title=\"Link to this heading\">#</a></h3><p>In the past Concordium provided a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-software</span></code> package which\ncontained a <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> binary which orchestrated downloading a Docker\nimage and running the node. To migrate from that setup:</p>", "a[href=\"guides/run-node.html#run-a-mainnet-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a mainnet node<a class=\"headerlink\" href=\"#run-a-mainnet-node\" title=\"Link to this heading\">#</a></h2><p>The same steps apply as for the testnet node, except the following sample\nconfiguration file should be used.</p><p>The main differences from the testnet configuration are:</p>", "a[href=\"../smart-contracts/general/introduction.html#auction-smart-contract-example\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auction smart contract example<a class=\"headerlink\" href=\"#auction-smart-contract-example\" title=\"Link to this heading\">#</a></h2><p>A use case for smart contracts could be for holding an auction; here you program\nthe smart contract to accept different bids from anyone and have it keep track\nof the highest bidder.\nWhen the auction is over, the smart contract sends the winner bid CCD to the seller and all other bids back. The seller then should send the item to the winner.</p><p>The smart contract replaces the main role of the auctioneer. The contract itself\nonly governs the bidding part, and the on-chain distribution of CCDs. It will\nlikely also need some logic for reimbursing the highest bidder if the seller\ndoes not fulfil their obligations. This will most likely mean that the contract\nneeds to support some notion of proof that the seller has indeed fulfilled their\nobligation, or some way for the highest bidder to file a complaint. Smart\ncontracts cannot resolve these real-world issues automatically, and the best\nsolution is likely going to depend on the specifics of the auction.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#slottime\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">slotTime</span></code><a class=\"headerlink\" href=\"#slottime\" title=\"Link to this heading\">#</a></h3><p>The slot time at the beginning of the current block as a JSON string in the\nformat of <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc3339\">RFC3339</a> with precision up to milliseconds.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#testing-instantiation-of-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing instantiation of a piggy bank<a class=\"headerlink\" href=\"#testing-instantiation-of-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>The first test to add is to verify a piggy bank is set up with the correct\nstate.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/index.html#what-are-the-use-cases-of-sponsored-transactions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are the use cases of sponsored transactions?<a class=\"headerlink\" href=\"#what-are-the-use-cases-of-sponsored-transactions\" title=\"Link to this heading\">#</a></h2><p>Sponsored transactions are a useful tool for third-party service providers to onboard conventional clients/users that\ndon\u2019t want to acquire crypto (such as CCD) from an exchange.\nThe third-party can have a traditional fiat channel open (off-chain) with the conventional clients/users to charge for its service of\noffering to submit transactions on behalf of the user on-chain.The third-party\nservice provider has its own wallet funded with some CCD at the backend to submit the user\u2019s transaction on-chain.\nThe third-party pays the transaction fee to execute the transaction on-chain.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#smart-contract-instance-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instance state<a class=\"headerlink\" href=\"#smart-contract-instance-state\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html#submit-a-sponsored-transfer-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Submit a sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer</span></code> transaction<a class=\"headerlink\" href=\"#submit-a-sponsored-transfer-transaction\" title=\"Link to this heading\">#</a></h2><p>The GIF shows an example of input parameters that can be used to successfully execute a sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer</span></code> transaction.\nThe transaction should be successfully submitted by the back end to the blockchain which can be checked on the\nblockchain explorer by clicking the transaction hash displayed at the front end. You can also check that your <code class=\"docutils literal notranslate\"><span class=\"pre\">to</span></code> account is now the owner of the <code class=\"docutils literal notranslate\"><span class=\"pre\">token_id</span></code>.</p><p>When exploring the code, you will realize that the input parameter to the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function\nand the <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> that is signed in the wallet are rather complex. For example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> for the sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer</span></code> transaction is as follows:</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#get-started\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get started<a class=\"headerlink\" href=\"#get-started\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/run-node.html#running-upgrading-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running/upgrading a node<a class=\"headerlink\" href=\"#running-upgrading-a-node\" title=\"Link to this heading\">#</a></h2><p>Concordium provides two Docker images, a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/mainnet-node\">mainnet</a> one and a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/testnet-node\">testnet</a> one.\nThese images are designed to be used together with docker-compose, or a similar driver. This guide provides a sample configuration using <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose</span></code>.</p><p>The node requires a database which must be stored on the host system so that it persists when the docker container is stopped. It is up to the user to select the location of the database on their host system. In the guide the location used is <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-mainnet</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-testent</span></code> but any location to which the user that runs the Docker command has access to will do.</p>", "a[href=\"web3-id/wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web3 ID in the Concordium Wallet for Web<a class=\"headerlink\" href=\"#web3-id-in-the-bw\" title=\"Link to this heading\">#</a></h1><p>Web3 <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> are available in the Concordium Wallet for Web. They might have any of the following states:</p>", "a[href=\"../smart-contracts/guides/build-schema.html#converting-a-binary-schema-to-json\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Converting a binary schema to JSON<a class=\"headerlink\" href=\"#converting-a-binary-schema-to-json\" title=\"Link to this heading\">#</a></h3><p>These commands are available in <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span></code> version 2.6.0 or newer.</p><p>To convert an existing binary schema (obtained via <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span></code>) use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">schema-json</span></code> subcommand, e.g.,</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"../smart-contracts-v0/guides/unit-test-contract.html#writing-unit-tests\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Writing unit tests<a class=\"headerlink\" href=\"#writing-unit-tests\" title=\"Link to this heading\">#</a></h2><p>Unit tests typically follow a three-part structure in which you: set up some\nstate, run some unit of code, and make assertions about the state and output of\nthe code.</p><p>If the contract functions are written using <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(..)]</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(..)]</span></code>, you can test these functions directly in the unit test.</p>", "a[href=\"../smart-contracts/guides/json-params.html#operatorof-and-operatorofqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">operatorOf() and OperatorOfQueryParams<a class=\"headerlink\" href=\"#operatorof-and-operatorofqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code> function to check whether an address is an operator of a given contract address added by the <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>. It is a view function that returns <code class=\"docutils literal notranslate\"><span class=\"pre\">OperatorOfQueryResponse</span></code> which is an array of booleans for the given addresses (if the address <code class=\"docutils literal notranslate\"><span class=\"pre\">is_operator()</span></code> of the given contract index <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>, else <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>).</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#receivename\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReceiveName</span></code><a class=\"headerlink\" href=\"#receivename\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with the fields <code class=\"docutils literal notranslate\"><span class=\"pre\">contract</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code>, both of\ntype JSON string. Example:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#named\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Named</span></code><a class=\"headerlink\" href=\"#named\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object, with the field names as properties and corresponding\nvalues as property values.\nThe ordering of the fields in JSON is rearranged according to the order in the\nschema field type.</p><p>Example of named fields in the Rust struct:</p>", "a[href=\"../smart-contracts-v0/guides/deploy-module.html#deployment\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Link to this heading\">#</a></h2><p>To deploy a smart contract module <code class=\"docutils literal notranslate\"><span class=\"pre\">my_module.wasm</span></code> using the account\nwith name account-name, run the following command:</p>", "a[href=\"../smart-contracts/general/contract-module.html#limitations\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Limitations<a class=\"headerlink\" href=\"#limitations\" title=\"Link to this heading\">#</a></h3><p>The blockchain environment is very particular in the sense that each node must\nbe able to execute the contract in exactly the same way, using exactly the same\namount of resources. Otherwise, nodes would fail to reach consensus on the\nstate of the chain. For this reason, smart contracts need to be written in a restricted\nsubset of Wasm.</p>", "a[href=\"../smart-contracts/best-practices/development.html#general-recommendations\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">General recommendations<a class=\"headerlink\" href=\"#general-recommendations\" title=\"Link to this heading\">#</a></h4>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#including-function-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including function parameters<a class=\"headerlink\" href=\"#including-function-parameters\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for parameters for init and\nreceive functions, set the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter</span></code> attribute for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(..)]</span></code>- and <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(..)]</span></code>-macro:</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#building-the-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building the schema<a class=\"headerlink\" href=\"#building-the-schema\" title=\"Link to this heading\">#</a></h2><p>Now, you are ready to build the actual schema using <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, and you\nhave the options to embed the schema and/or write the schema to a file.</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#embedding-the-schema\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Embedding the schema<a class=\"headerlink\" href=\"#embedding-the-schema\" title=\"Link to this heading\">#</a></h3><p>In order to embed the schema into the smart contract module, add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-embed</span></code> to the build command</p>", "a[href=\"desktop-wallet/single-sign-schedule.html#option-1-create-a-regular-interval-schedule\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Option 1: Create a regular interval schedule<a class=\"headerlink\" href=\"#option-1-create-a-regular-interval-schedule\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/gallery/gallery-backend.html#serve-images\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Serve Images<a class=\"headerlink\" href=\"#serve-images\" title=\"Link to this heading\">#</a></h2><p>When receiving requests for an image, the provided token is verified to have been issued and that it has not expired yet. If the token is valid, the image of the item is returned.\nFor simplicity in this example, the response is a redirect to an image hosting that returns a random image, instead of having specific images for each item.</p><p>This is done by the <em>handle_image_access</em> function in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/gallery/verifier/src/handlers.rs\">handlers file</a>.</p>", "a[href=\"guides/multi-credentials.html#export-the-transaction-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Export the transaction proposal<a class=\"headerlink\" href=\"#export-the-transaction-proposal\" title=\"Link to this heading\">#</a></h2><p>If you already have more than one credential on the account, it means that more than one signature is needed to sign the proposal. You must therefore share a file of the type JSON with the co-signers. In the <strong>Signatures</strong> pane, you can see how many signatures are required before you can submit the transaction to the blockchain. When you have the necessary number of signatures, you can generate and sign the transaction.</p>", "a[href=\"web3-id/wallet.html#recover-verifiable-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Recover verifiable credentials<a class=\"headerlink\" href=\"#recover-verifiable-credentials\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/create-proofs.html#example-dapp\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Example dApp<a class=\"headerlink\" href=\"#example-dapp\" title=\"Link to this heading\">#</a></h2><p>Concordium provides the following example demo app and repository for inspriation:</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#concordium-tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium tools<a class=\"headerlink\" href=\"#concordium-tools\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/run-node.html#id3\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Retrieve node logs<a class=\"headerlink\" href=\"#id3\" title=\"Link to this heading\">#</a></h4><p>The sample configuration presented above logs data using Docker\u2019s default\nlogging infrastructure. To retrieve the logs for the node run:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#test-inserting-ccd-into-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test inserting CCD into a piggy bank<a class=\"headerlink\" href=\"#test-inserting-ccd-into-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Next you should test the different functions for interacting with a piggy bank.\nThis is done in the same way as initializing, except you use <code class=\"docutils literal notranslate\"><span class=\"pre\">ReceiveContextTest</span></code>\nto construct the context.</p><p>To test <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_insert</span></code> you also need some amount of CCD and the current state\nof your smart contract instance:</p>", "a[href=\"../smart-contracts/references/schema-json.html#enum\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Enum</span></code><a class=\"headerlink\" href=\"#enum\" title=\"Link to this heading\">#</a></h3><p>An enum variant is supplied as an JSON object containing a single\nproperty, where the name of the variant as the property and the fields as the\nvalue. More about the fields below.</p><p>Example of JSON for an enum <code class=\"docutils literal notranslate\"><span class=\"pre\">Option</span></code>:</p>", "a[href=\"release-notes/release-notes-lp.html#bw\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web<a class=\"headerlink\" href=\"#bw\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/guides/deploy-module.html#naming-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Naming a module<a class=\"headerlink\" href=\"#naming-a-module\" title=\"Link to this heading\">#</a></h2><p>A module can be given a local alias, or <em>name</em>, which makes referencing it\neasier.\nThe name is only stored locally by <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>, and is not\nvisible on-chain.</p>", "a[href=\"guides/multi-credentials.html#select-an-identity-and-an-account\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Select an identity and an account<a class=\"headerlink\" href=\"#select-an-identity-and-an-account\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQ for Ethereum developers<a class=\"headerlink\" href=\"#faq-for-ethereum-developers\" title=\"Link to this heading\">#</a></h1><p>The following Frequently Asked Questions about Concordium\nfocuses on helping developers with an Ethereum/solidity\nbackground to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"nodes/baker-macos.html#configure-a-node-as-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a node as a validator<a class=\"headerlink\" href=\"#configure-a-node-as-a-validator\" title=\"Link to this heading\">#</a></h2><p>Once you have generated validator keys, you then need to move the generated validator keys file to a location accessible by the node, and finally specify this location in the service file for the Concordium Node.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#metadata\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code><a class=\"headerlink\" href=\"#metadata\" title=\"Link to this heading\">#</a></h3><p>JSON Object containing the chain meta data, see <a class=\"reference internal\" href=\"#context-metadata-v0\"><span class=\"std std-ref\">Chain meta data</span></a> for a\nreference of the fields.</p>", "a[href=\"resources/glossary.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary of Concordium Terms<a class=\"headerlink\" href=\"#glossary-of-concordium-terms\" title=\"Link to this heading\">#</a></h1><p>Also see the Concordium <a class=\"reference external\" href=\"https://go.concordium.com/hubfs/White%20paper%20-%20RWR/Concordium%20White%20Paper%20v1.8.pdf\">whitepaper</a> for more details on the terms described below.</p>", "a[href=\"../smart-contracts-v0/guides/compile-module.html#removing-host-information-from-build\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Removing host information from build<a class=\"headerlink\" href=\"#removing-host-information-from-build\" title=\"Link to this heading\">#</a></h2><p>The compiled Wasm module can contain information from the host machine building\nthe binary; information such as the absolute path of the <code class=\"docutils literal notranslate\"><span class=\"pre\">.cargo</span></code> directory.</p><p>For most people this is not sensitive information, but it is important to be\naware of it.</p>", "a[href=\"concepts/concepts-baker.html#validation-with-concordium-client\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Validation with <code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium-client</span></code><a class=\"headerlink\" href=\"#validation-with-concordium-client\" title=\"Link to this heading\">#</a></h3><p>For information about configuring and managing validation in <code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium-client</span></code>, see <a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">Become a validator using the Concordium Client</span></a>.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#standards\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Standards<a class=\"headerlink\" href=\"#standards\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/guides/contract-dev-guides.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract development guides<a class=\"headerlink\" href=\"#contract-development-guides\" title=\"Link to this heading\">#</a></h1><p>The contract development guides help you get started writing smart contracts. Here you have guides to help you set up your tools, test your contract, and more.</p><p>Once you are familiar with smart contracts, it is a good idea to read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#contract-mint-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Contract mint function<a class=\"headerlink\" href=\"#contract-mint-function\" title=\"Link to this heading\">#</a></h3><p>You will compare the circulating supply, maximum supply and the amount to be minted. If the mint amount + circulating supply is more than the maximum supply you will not allow minting.</p><p>In the <code class=\"docutils literal notranslate\"><span class=\"pre\">contact_mint</span></code> function below see the following changes accordingly. First, the parameters are read as a form of JSON. See the <code class=\"docutils literal notranslate\"><span class=\"pre\">MintParams</span></code> struct for the details of the parameters. In the first <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> clause, it first checks if the token exists in the state. If not, meaning you are going to mint this token for the first time, you will set the maximum supply by calling the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_max_supply()</span></code> function. The max_supply value is in the <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenParam</span></code> struct as the second item.</p>", "a[href=\"../smart-contracts/general/contract-module.html#contract-on-the-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contracts on the chain<a class=\"headerlink\" href=\"#contract-on-the-chain\" title=\"Link to this heading\">#</a></h2><p>A smart contract on the chain is a collection of functions exported from a deployed\nmodule. The concrete mechanism used for this is the <a class=\"reference external\" href=\"https://webassembly.org/\">Web Assembly</a> export\nsection. A smart contract must export one function for initializing new\ninstances and can export zero or more functions for updating the instance.</p><p>Since a smart contract module can export functions for multiple different smart\ncontracts, you associate the functions using a naming scheme:</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"guides/run-local-chain.html#build-the-tool\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Build the tool<a class=\"headerlink\" href=\"#build-the-tool\" title=\"Link to this heading\">#</a></h4><p>To build the tool you need a working <a class=\"reference external\" href=\"https://www.rust-lang.org/tools/install\">Rust compiler</a> with version 1.65 or higher. After installing it, verify that <code class=\"docutils literal notranslate\"><span class=\"pre\">rustc</span></code> exists in your path at the required version:</p>", "a[href=\"concepts/concepts-transactions.html#command-line-tool\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Command-line tool<a class=\"headerlink\" href=\"#command-line-tool\" title=\"Link to this heading\">#</a></h3><p>The Concordium distribution ships with a command-line tool named <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. It is designed as a low-level interface to the Concordium blockchain. It cannot be used to create identities, but it can <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import accounts</span></a> exported from the other wallets. Once an account has been imported, the tool can be used to do CCD transfers from the account, as well as send all other <a class=\"reference internal\" href=\"references/transactions.html#transactions\"><span class=\"std std-ref\">transaction</span></a> types supported by the Concordium blockchain.</p><p>To learn more about the differences between the wallets, see <a class=\"reference internal\" href=\"guides/deciding-wallet.html#choosing-wallet\"><span class=\"std std-ref\">Deciding between the wallets</span></a>.</p>", "a[href=\"guides/proofs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Proofs and revealing information<a class=\"headerlink\" href=\"#proofs-and-revealing-information\" title=\"Link to this heading\">#</a></h1><p>Some dApps or services may require you to prove that you are over a certain age, that you reside in a specific range of countries or area without revealing your exact age or country of residence, or that you have a certain type of education. You can choose whether you want to prove these <a class=\"reference internal\" href=\"resources/glossary.html#term-Attributes\"><span class=\"xref std std-term\">attributes</span></a> to the dApp or service using your <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> or <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a>. The dApp or service uses a <a class=\"reference internal\" href=\"resources/glossary.html#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">zero-knowledge proof</span></a> to request the attributes necessary for their service. This means that the dApp or service does not get any exact attributes, only proof that you live up to their requirements. You can choose which account (and thus identity) to use to fulfill the proof request for <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a> using the drop-down above the proof.</p>", "a[href=\"../smart-contracts/guides/interact-instance.html#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a\n<a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the receive function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_receive</span></code> with a parameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary\nformat, run the following command:</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#init-context\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Init context<a class=\"headerlink\" href=\"#init-context\" title=\"Link to this heading\">#</a></h2><p>The context accessible in an init function.</p><p>Example of context</p>", "a[href=\"../smart-contracts/references/local-settings.html#module-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Module Names<a class=\"headerlink\" href=\"#module-names\" title=\"Link to this heading\">#</a></h3><p>Module names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">contracts/moduleNames.map</span></code> as JSON, and\nshould look similar to the following:</p>", "a[href=\"references/manage-accounts.html#initial-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Initial account<a class=\"headerlink\" href=\"#initial-account\" title=\"Link to this heading\">#</a></h3><p>The user gets an <a class=\"reference internal\" href=\"resources/glossary.html#term-Initial-Account\"><span class=\"xref std std-term\">initial account</span></a> at the same time as an <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identity</span></a> has been issued by an <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>. As the initial account is submitted to the chain by the identity provider, the identity provider knows the owner of the initial account. For this reason, you may not want to use the initial account and create a regular account instead. There can only be one initial account for one identity.</p><p>The user additionally <a class=\"reference internal\" href=\"guides/export-import.html#export-import\"><span class=\"std std-ref\">creates account keys</span></a> for an initial account, which the user stores privately. The identity provider then verifies that the attributes in the user identity information\nare valid for the user and stores them locally in an identity object that is specific to the user. Identity objects are only held by identity providers. The identity provider then opens an\naccount, the initial account, on behalf of the user. At the end of the identity verification process, the user receives a user identity certificate that can be used for creating\nadditional accounts and the user gets access to the initial account on the Concordium Platform. These certificates are valid for a given period. You can obtain a new certificate\nby creating a new identity and going through the identity verification process again with an identity provider.</p>", "a[href=\"references/developer-tools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Auxiliary Tools<a class=\"headerlink\" href=\"#auxiliary-tools\" title=\"Link to this heading\">#</a></h1><h2>Decrypt encrypted output<a class=\"headerlink\" href=\"#decrypt-encrypted-output\" title=\"Link to this heading\">#</a></h2><p>Some Concordium tools, such as the Concordium Legacy Wallet, sometimes produce encrypted output. These files can be decrypted and inspected using the <strong>utils</strong> tool . You can download the tool from <a class=\"reference internal\" href=\"installation/downloads.html#downloads\"><span class=\"std std-ref\">Installation downloads</span></a>.</p><p>To encrypt, enter:</p>", "a[href=\"../smart-contracts/best-practices/development.html#mindset\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Mindset<a class=\"headerlink\" href=\"#mindset\" title=\"Link to this heading\">#</a></h2><p>Smart contract development involves many risks that do not show up in, for example, web programming:</p>", "a[href=\"../smart-contracts/general/introduction.html#next-steps\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Next steps<a class=\"headerlink\" href=\"#next-steps\" title=\"Link to this heading\">#</a></h2><h3>Additional reading<a class=\"headerlink\" href=\"#additional-reading\" title=\"Link to this heading\">#</a></h3><p>For information about the lifecycle of smart contracts, see <a class=\"reference internal\" href=\"../smart-contracts/general/contract-lifecycle.html#sc-lifecycle\"><span class=\"std std-ref\">Lifecycle of a smart contract</span></a>. You can also continue reading about <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">contract modules</span></a>, <a class=\"reference internal\" href=\"../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">contract instances</span></a>, and <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>. Also, read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"references/concordium-client.html#display-contents\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Display contents<a class=\"headerlink\" href=\"#display-contents\" title=\"Link to this heading\">#</a></h3><p>Display the full contents of the persistent configuration. This will display the\nstored keys that are used for signing transactions (under the <code class=\"docutils literal notranslate\"><span class=\"pre\">Account</span> <span class=\"pre\">Keys</span></code>\nsection) and the stored key for sending shielded transfers (under the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Encryption</span> <span class=\"pre\">secret</span> <span class=\"pre\">key</span></code> section) when they are present.</p>", "a[href=\"guides/run-node.html#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant by\nenabling inbound connections. The sample configuration above makes the node\nlisten on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> for inbound connections. Depending on your network and\nplatform configuration you will either need to forward an external port to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> on your router, open it in your firewall, or both. The details of how\nthis is done will depend on your configuration.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sponsored Transactions Smart Contract<a class=\"headerlink\" href=\"#sponsored-transactions-smart-contract\" title=\"Link to this heading\">#</a></h1><p>The goal of this part of the tutorial is to understand how the sponsored\ntransaction mechanism is implemented in the smart contract and how to create and verify an Ed25519 signature in the smart contract code.</p><p>Clone the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis3-nft-sponsored-txs\">sponsored transaction example</a>\nwhich you will modify in this tutorial.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_slot_time\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_slot_time\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_slot_time</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Get time in milliseconds at the beginning of this block.</p></dd>", "a[href=\"../smart-contracts/references/schema-json.html#bytearray\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ByteArray</span></code><a class=\"headerlink\" href=\"#bytearray\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string containing a fixed-sized list of bytes encoded in lowercase hex.\nNotice the length of the list is specified as the number of bytes, and each byte is encoded using two charactors in hex.</p><p>Example of a fixed list of 8 bytes (<code class=\"docutils literal notranslate\"><span class=\"pre\">ByteArray(8)</span></code>):</p>", "a[href=\"guides/multi-credentials.html#change-the-signature-threshold\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Change the signature threshold<a class=\"headerlink\" href=\"#change-the-signature-threshold\" title=\"Link to this heading\">#</a></h2><p>You can either keep the current signature threshold as is or change it.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html#deploy-your-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy your smart contract<a class=\"headerlink\" href=\"#deploy-your-smart-contract\" title=\"Link to this heading\">#</a></h2><p>To deploy your smart contract you will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span> <span class=\"pre\">client</span></code> command line tool.</p><p>Before deploying your smart contract, make sure that you have imported your wallet. When you export it from your wallet run the command below in the same directory where your wallet export is.</p>", "a[href=\"../smart-contracts-v0/references/references-on-chain.html#modules\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Modules<a class=\"headerlink\" href=\"#modules\" title=\"Link to this heading\">#</a></h2><p>Modules are referenced via their <em>module reference</em>.\nA reference for a module is simply its SHA256 hash.</p><p>Example of a module reference:</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-roll-pattern\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.roll.pattern<a class=\"headerlink\" href=\"#log-roll-pattern\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_invoker\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_invoker\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_invoker</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Get the address of the account that initiated the top-level transaction\nwhich lead to triggering the receive function.</p></dd>", "a[href=\"../smart-contracts/references/schema-json.html#string\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">String</span></code><a class=\"headerlink\" href=\"#string\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#createdat\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">createdAt</span></code><a class=\"headerlink\" href=\"#createdat\" title=\"Link to this heading\">#</a></h3><p>The year and month of the date this policy was created at, given as a JSON\nstring in the format <em>YYYYMM</em>.</p>", "a[href=\"concepts/concepts-delegation.html#passive-delegation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passive delegation<a class=\"headerlink\" href=\"#passive-delegation\" title=\"Link to this heading\">#</a></h3><p>For CCD holders who do not want to regularly check the performance of their pool, but just want a safe way of earning interest, <a class=\"reference internal\" href=\"resources/glossary.html#term-Passive-delegation\"><span class=\"xref std std-term\">passive delegation</span></a> offers a low-risk low-reward alternative. Passive delegation is not associated with a specific validator; it can be thought of as distributing its capital to each staking pool in proportion to the pool\u2019s stake. It is not affected by the poor performance of a single validator. But the parameters are set in such a way that a party delegating to passive delegation earns less than by delegating to a reliable validator.</p><p>The commission rates for passive delegation are fixed at 25% for both block commissions and transaction commissions.</p>", "a[href=\"references/manage-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Accounts<a class=\"headerlink\" href=\"#accounts\" title=\"Link to this heading\">#</a></h1><p>Accounts and <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> are strongly linked on the Concordium Platform. To be able to hold, send, or receive <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a> or become a <a class=\"reference internal\" href=\"resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> on the Concordium blockchain, you need an account and an identity. This is regardless of whether you are using the Concordium Wallet for Mobile, the Concordium Legacy Wallet, Desktop Wallet, or Concordium Client for your transactions.</p><p>You must have a verified identity and a user identity certificate issued by an authorized <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> to create accounts on the Concordium Platform. For more information about identities, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities</span></a>.</p>", "a[href=\"references/manage-accounts.html#account-concepts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Account concepts<a class=\"headerlink\" href=\"#account-concepts\" title=\"Link to this heading\">#</a></h2><h3>Account balances<a class=\"headerlink\" href=\"#account-balances\" title=\"Link to this heading\">#</a></h3><p>Each account has two balances, the <em>public balance</em> which can be <em>seen</em> by anyone, and a <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded\nbalance</span></a>. The shielded balance is only known to the owner of the account. It\ncan only be used in <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transfers</span></a> to\nother accounts.</p><p>The public balance of the account is always used for payment of transaction fees,\nproducing blocks, and transfers, even for shielded transfers.</p>", "a[href=\"references/transactions.html#transaction-commands\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transaction commands<a class=\"headerlink\" href=\"#transaction-commands\" title=\"Link to this heading\">#</a></h2><p>Each of these commands have a number of parameters specific to them, but share a common set of flags and configuration to control how they build transactions.</p><p>Depending on the exact context, all flags are currently optional:</p>", "a[href=\"references/transactions.html#commands-for-transferring-ccd\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands for transferring CCD<a class=\"headerlink\" href=\"#commands-for-transferring-ccd\" title=\"Link to this heading\">#</a></h2><p>The commands for transferring CCD (both plain transfers and shielded transfers)\nare described in the following table.</p><p>The add, remove, and configure bakers commands are described in the topic <a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">becoming a baker using the Concordium Client</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/upload-nft.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upload the NFT<a class=\"headerlink\" href=\"#upload-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now you need to upload your asset and give it metadata. For this tutorial you will use the InterPlanetary File System (IPFS).</p>", "a[href=\"../smart-contracts-v0/guides/unit-test-contract.html#running-tests-in-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running tests in Wasm<a class=\"headerlink\" href=\"#running-tests-in-wasm\" title=\"Link to this heading\">#</a></h2><p>Compiling the tests to native machine code is sufficient for most cases, but it\nis also possible to compile the tests to Wasm and run them using the exact\ninterpreter that is used by the nodes.\nThis makes the test environment closer to the run environment on-chain and could\nin some cases catch more bugs.</p><p>The development tool <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> includes a test runner for Wasm, which\nuses the same Wasm-interpreter as the one shipped in the Concordium nodes.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#deploy-the-smart-contract\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy the smart contract<a class=\"headerlink\" href=\"#deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h3><p>If you don\u2019t have your own testnet node running, Concordium provides a running testnet gRPC node that is available at <code class=\"docutils literal notranslate\"><span class=\"pre\">node.testnet.concordium.com</span></code> on port 20000 (gRPCv2 and gRPC-web). You can use this node for API calls of <em>chain methods only</em>. This node is maintained by Concordium, but Concordium does not guarantee availability. The status of this node is available on the <a class=\"reference external\" href=\"https://status.testnet.concordium.software\">Testnet status page</a>. For some use cases you might need to run your own local node due to the limitations of this one.</p><p>Run the command below to deploy the smart contract. This command is structured to use the Concordium testnet node described above. If you are using your own local node, adjust the command accordingly.</p>", "a[href=\"web3-id/index.html#web3-id\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Web3 ID<a class=\"headerlink\" href=\"#web3-id\" title=\"Link to this heading\">#</a></h2><p>Web3 ID is an extension of the existing ID 2.0 infrastructure in Concordium to allow issuance of many different types of <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> in addition to the existing <a class=\"reference internal\" href=\"resources/glossary.html#term-Account-credential\"><span class=\"xref std std-term\">account credentials</span></a>. Web3 ID allows you to add <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifiable-credential\"><span class=\"xref std std-term\">verifiable credentials</span></a> to your Concordium Wallet for Web, such as club memberships, education credentials, employment history, rewards programs, customer loyalty programs, and more. <a class=\"reference internal\" href=\"resources/glossary.html#term-Zero-knowledge-proof\"><span class=\"xref std std-term\">Proofs</span></a> can be made to verify these credentials, if necessary.</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#handling-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Handling errors<a class=\"headerlink\" href=\"#handling-errors\" title=\"Link to this heading\">#</a></h3><p>Use the <strong>or</strong> combinator to execute an action in case that a previous action fails.\nAn action description <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code> <strong>or</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code></p>", "a[href=\"guides/how-to-earn.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Staking with Concordium<a class=\"headerlink\" href=\"#staking-with-concordium\" title=\"Link to this heading\">#</a></h1><p>To earn more CCDs, you can stake either as a delegator or validator. There are advantages and disadvantages to both options.</p>", "a[href=\"installation/downloads.html#node-performance-monitoring\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Node performance monitoring<a class=\"headerlink\" href=\"#node-performance-monitoring\" title=\"Link to this heading\">#</a></h3><p>You can use the <a class=\"reference external\" href=\"https://prometheus.io/download/\">Prometheus monitoring system</a> to export node metrics for monitoring your node performance. For information about configuration and the exposed metrics, see the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-node/blob/main/docs/prometheus-exporter.md\">documentation in the repository</a>.</p><p>For node runners using Grafana\u00ae, Concordium provides a node performance dashboard using the exposed Prometheus metrics. You can <a class=\"reference external\" href=\"https://grafana.com/grafana/dashboards/18983-concordium-node-external/\">download it from the Grafana marketplace</a>.</p>", "a[href=\"guides/export-import.html#how-to-proceed\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How to proceed<a class=\"headerlink\" href=\"#how-to-proceed\" title=\"Link to this heading\">#</a></h2><h3>Upgrade<a class=\"headerlink\" href=\"#upgrade\" title=\"Link to this heading\">#</a></h3><p>Concordium is continuously improving the security and reliability of its products, so it is vital to ensure that your Concordium Legacy Wallet or Desktop Wallet is upgraded to the latest version available. To check which version of your Concordium Wallet is currently available, refer to the <a class=\"reference internal\" href=\"release-notes/release-notes-lp.html#release-notes\"><span class=\"std std-ref\">release notes</span></a>.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_sender\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_sender\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_sender</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Get the address of the account or contract, triggering the receive function.</p></dd>", "a[href=\"../smart-contracts/guides/json-params.html#transfer-and-transferparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">transfer() and TransferParams<a class=\"headerlink\" href=\"#transfer-and-transferparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code> function to transfer some amount of token A from one account to another. The parameter to the transfer function is an array of <code class=\"docutils literal notranslate\"><span class=\"pre\">Transfer</span></code> s which is defined in CIS-2.</p>", "a[href=\"references/concordium-client.html#remove-keys-of-an-account\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Remove keys of an account<a class=\"headerlink\" href=\"#remove-keys-of-an-account\" title=\"Link to this heading\">#</a></h4><p>Remove sign/verify key-pairs from a specific credential of an account. The <code class=\"docutils literal notranslate\"><span class=\"pre\">CREDENTIALINDEX</span></code> specifies the credential that the key pairs should be removed from, and the space-seperated list of key indices specify which of the key pairs that should be removed.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#owner\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">owner</span></code><a class=\"headerlink\" href=\"#owner\" title=\"Link to this heading\">#</a></h3><p>JSON string containing the account address of the owner of the smart contract\ninstance.</p><p>Example:</p>", "a[href=\"guides/multi-credentials.html#option-2-generate-and-sign-the-transaction-on-the-ledger-device\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Option 2: Generate and sign the transaction on the LEDGER device<a class=\"headerlink\" href=\"#option-2-generate-and-sign-the-transaction-on-the-ledger-device\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/guides/compile-module.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure to have Rust and Cargo installed and the <code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code>\ntarget, together with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> and the Rust source code for a smart\ncontract module, you wish to compile.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html#submit-a-sponsored-updateoperator-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Submit a sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code> transaction<a class=\"headerlink\" href=\"#submit-a-sponsored-updateoperator-transaction\" title=\"Link to this heading\">#</a></h2><p>The GIF shows an example of input parameters that can be used to successfully execute a sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code> transaction.\nThe transaction should be successfully submitted by the back end to the blockchain which can be checked on the\nblockchain explorer by clicking the transaction hash displayed at the front end.</p><p>When exploring the code, you will realize that the input parameter to the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function\nand the <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> that is signed in the wallet are rather complex. For example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> for the sponsored <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator</span></code> transaction is as follows:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#state-mint-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">State mint function<a class=\"headerlink\" href=\"#state-mint-function\" title=\"Link to this heading\">#</a></h3><p>There is only one minor change needed in the state\u2019s mint function, which is increasing the circulating supply when a token is minted. You are keeping the circulating balance in the <code class=\"docutils literal notranslate\"><span class=\"pre\">token_balance</span></code> map, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">token_id</span></code> key of the map to call the value and update it, which you do in the last statement.</p>", "a[href=\"../smart-contracts-v0/guides/inspect-instance.html#inspection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Inspection<a class=\"headerlink\" href=\"#inspection\" title=\"Link to this heading\">#</a></h2><p>To inspect, or show, information about a smart contract instance with the\naddress index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, run the following command:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust\ncontracts. The guide <a class=\"reference internal\" href=\"../smart-contracts/tutorials/setup-env.html#setup-env\"><span class=\"std std-ref\">Setup the development environment</span></a> shows you how to do this.\nAlso, make sure to have a text editor setup to write Rust.</p><p>Since you are going to extend the smart contract code written in the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">previous\npart</span></a>, either follow the previous part or copy the complete\nexample code for part 1 from <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/blob/main/examples/piggy-bank/part1/src/lib.rs\">GitHub</a>.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#work-with-queries\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Work with queries<a class=\"headerlink\" href=\"#work-with-queries\" title=\"Link to this heading\">#</a></h3><p>Queries can be called from smart contracts to query an account balance, contract balance,\nor the current exchange rates.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>First, ensure you have <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> installed and if not the guide\n<a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> will help you.</p><p>You also need the Rust source code of the smart contract you wish to build a\nschema for.</p>", "a[href=\"references/query-node.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Querying a node<a class=\"headerlink\" href=\"#querying-a-node\" title=\"Link to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a> tool supports queries of multiple kinds of state against\na backend node:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#compiling-and-running-tests-in-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compiling and running tests in Wasm<a class=\"headerlink\" href=\"#compiling-and-running-tests-in-wasm\" title=\"Link to this heading\">#</a></h2><p>When running <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">test</span></code> your contract module and tests are compiled targeting\nyour native platform, but on the Concordium blockchain a smart contract module\nis in Wasm.\nTherefore it is preferable to compile the tests targeting Wasm and run the tests\nusing a Wasm interpreter instead.\nLuckily, the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> tool contains such an interpreter, and\nit is the same interpreter shipped with the official nodes on the Concordium\nblockchain.</p><p>Before you can run tests in Wasm, you have to replace <code class=\"docutils literal notranslate\"><span class=\"pre\">#[cfg(test)]</span></code> at the\ntop of your test module with <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.concordium_cfg_test.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[concordium_cfg_test]</span></code></a> and all the <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code>\nmacros with <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.concordium_test.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[concordium_test]</span></code></a>.</p>", "a[href=\"../smart-contracts/guides/migrate-contracts.html#reference-material-for-migrating-types-and-tests\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Reference material for migrating types and tests<a class=\"headerlink\" href=\"#reference-material-for-migrating-types-and-tests\" title=\"Link to this heading\">#</a></h2><p>The examples above show how to migrate most contracts, but for advanced contracts, there may be more types to migrate.\nThe list below shows how to achieve that.\nIt also includes types already described above:</p>", "a[href=\"guides/company-identities.html#request-identity\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Request identity<a class=\"headerlink\" href=\"#request-identity\" title=\"Link to this heading\">#</a></h3><p>When the identity has been verified successfully, you will receive an email with an identity object file named <code class=\"docutils literal notranslate\"><span class=\"pre\">id-object.json</span></code>. Store this file securely as you need it to create accounts and regenerate account keys.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#build-a-smart-contract-module-with-cargo-concordium\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build a smart contract module with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code><a class=\"headerlink\" href=\"#build-a-smart-contract-module-with-cargo-concordium\" title=\"Link to this heading\">#</a></h2><p>The Rust compiler has good support for compiling to Wasm using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code> target.\nHowever, even when compiling with <code class=\"docutils literal notranslate\"><span class=\"pre\">--release</span></code> the resulting build includes\nlarge sections of debug information in custom sections, which are not useful for\nsmart contracts on-chain.</p><p>To optimize the build and allow for new features such as embedding schemas, Concordium\nrecommends using <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> to build smart contracts.</p>", "a[href=\"desktop-wallet/update-application.html#automatic-updates\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Automatic updates<a class=\"headerlink\" href=\"#automatic-updates\" title=\"Link to this heading\">#</a></h2><p>The Desktop Wallet notifies you when an update is available, and you then have the following options:</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-enabled\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.enabled<a class=\"headerlink\" href=\"#collector-enabled\" title=\"Link to this heading\">#</a></h3><p>(boolean; optional)</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#avoid-creating-black-holes\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Avoid creating black holes<a class=\"headerlink\" href=\"#avoid-creating-black-holes\" title=\"Link to this heading\">#</a></h3><p>A smart contract is not required to use the amount of CCD send to it, and by\ndefault a smart contract does not define any behavior for emptying the balance\nof an instance, in case someone were to send some CCD.\nThese CCD would then be forever <em>lost</em>, and there would be no way to recover\nthem.</p><p>Therefore it is good practice for smart contracts that are not dealing with CCD,\nto ensure the sent amount of CCD is zero and reject any invocations which are\nnot.</p>", "a[href=\"nodes/run-node-ubuntu.html#node-collector-configuration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node collector configuration<a class=\"headerlink\" href=\"#node-collector-configuration\" title=\"Link to this heading\">#</a></h2><p>Since version 5.3.2 of the node, the collector uses the GRPC V2 interface. Therefore, in order to run the collector, it is required that the node which the collector connects to has the GRPC V2 interface enabled.</p><p>Since the GRPC V2 port is different than the GRPC V1 port, you might need make changes to your node configuration. You <em>only</em> need to change the collector port if you have overridden your node configuration. You can edit your overrides with:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#json-for-schema-type-fields\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">JSON for schema type fields<a class=\"headerlink\" href=\"#json-for-schema-type-fields\" title=\"Link to this heading\">#</a></h2><p>Structs and the different variants in an enum can have fields, and such fields\ncan either be named or unnamed. Unnamed fields are referenced by position.</p>", "a[href=\"installation/downloads.html#bw\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web<a class=\"headerlink\" href=\"#bw\" title=\"Link to this heading\">#</a></h2><p>The Concordium Wallet for Web is available to download as an extension for the <a class=\"reference external\" href=\"https://chrome.google.com/webstore/detail/concordium-wallet/mnnkpffndmickbiakofclnpoiajlegmg?hl=en-US\">chromium web browsers</a>. The extension supports both Mainnet and Testnet.</p>", "a[href=\"../smart-contracts/references/schema-json.html#named\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Named</span></code><a class=\"headerlink\" href=\"#named\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object, with the field names as properties and corresponding\nvalues as property values.\nThe ordering of the fields in JSON is rearranged according to the order in the\nschema field type.</p><p>Example of named fields in the Rust struct:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/mint-xfer.html#burn-tokens\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Burn tokens<a class=\"headerlink\" href=\"#burn-tokens\" title=\"Link to this heading\">#</a></h2><p>Finally, burn some tokens. The amount will be deducted from the owner\u2019s account when the tokens are burned.</p><p>Before burning, check the state to see who owns what amount.</p>", "a[href=\"release-notes/release-notes-lp.html#wallets\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Wallets<a class=\"headerlink\" href=\"#wallets\" title=\"Link to this heading\">#</a></h2><h3>Concordium Wallet for Mobile for iOS<a class=\"headerlink\" href=\"#mw-gen2-for-ios\" title=\"Link to this heading\">#</a></h3>", "a[href=\"guides/run-local-chain.html#run-the-tool\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Run the tool<a class=\"headerlink\" href=\"#run-the-tool\" title=\"Link to this heading\">#</a></h4><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">genesis-creator</span></code> tool uses a TOML configuration file format for specifying parameters from which the genesis data is generated. The TOML file specifies:</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html#the-schema-format\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The schema format<a class=\"headerlink\" href=\"#the-schema-format\" title=\"Link to this heading\">#</a></h2><p>A schema can contain</p>", "a[href=\"../smart-contracts-v0/guides/local-simulate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Link to this heading\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"guides/become-baker.html#import-the-account\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Import the account<a class=\"headerlink\" href=\"#import-the-account\" title=\"Link to this heading\">#</a></h3><p>This section provides a brief description of how to import an account using the Concordium Client.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html#cargo-concordium\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Cargo Concordium<a class=\"headerlink\" href=\"#cargo-concordium\" title=\"Link to this heading\">#</a></h2><p>Cargo Concordium is the tool for developing smart contracts for the Concordium\nblockchain.\nIt can be used for <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/compile-module.html#compile-module-v0\"><span class=\"std std-ref\">compiling</span></a> and\n<a class=\"reference internal\" href=\"../smart-contracts-v0/guides/unit-test-contract.html#unit-test-contract-v0\"><span class=\"std std-ref\">testing</span></a> smart contracts, and enables features such as\n<a class=\"reference internal\" href=\"../smart-contracts-v0/guides/build-schema.html#build-schema-v0\"><span class=\"std std-ref\">building contract schemas</span></a>.</p><p>To install <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> run:</p>", "a[href=\"nodes/node-runner-service-configuration.html#listen-address\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">listen.address<a class=\"headerlink\" href=\"#listen-address\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"guides/update-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update delegation to a staking pool or passive delegation<a class=\"headerlink\" href=\"#update-delegation-to-a-staking-pool-or-passive-delegation\" title=\"Link to this heading\">#</a></h1><p>You can change the delegation amount, target, and preferences on an account. You do not have to change all selections. For example, you might only want to change if rewards are restaked or not.</p><p>If you increase the delegation, the new amount will be applied at the start of the next <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. There is one pay day approximately every 24 hours. However, if you decrease the delegation, there is a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a> before the new stake is applied. During this period, you cannot stop delegation or change the amount, but you can change other delegation settings. After the cool-down period, the amount you\u2019ve decreased the delegation by is returned to your disposable balance at the next pay day after the end of the cool-down period.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html#what-is-the-cost-of-using-your-account-to-seal-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is the cost of using your account to seal a file?<a class=\"headerlink\" href=\"#what-is-the-cost-of-using-your-account-to-seal-a-file\" title=\"Link to this heading\">#</a></h2><p>The cost is currently approximately 4-5 cents (Euro) to register a file hash in the smart contract on mainnet.\nDisplaying the timestamp and witness (sealer_account) of a file hash is free of charge because you don\u2019t send a transaction,\nyou just look up the values from the chain.</p>", "a[href=\"guides/baker-windows.html#view-the-node-log\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View the node log<a class=\"headerlink\" href=\"#view-the-node-log\" title=\"Link to this heading\">#</a></h2><p>You can find the node logs here:</p>", "a[href=\"web3-id/issuer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web3 ID issuers<a class=\"headerlink\" href=\"#web3-id-issuers\" title=\"Link to this heading\">#</a></h1><p>Web3 ID includes many types of credentials that are not identity credentials. This might be employment history, certifications from educational courses or diplomas, membership in loyalty clubs or rewards programs, and more. Because of this anyone can become an <a class=\"reference internal\" href=\"resources/glossary.html#term-Issuer\"><span class=\"xref std std-term\">issuer</span></a>!</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#specifying-the-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Specifying the state<a class=\"headerlink\" href=\"#specifying-the-state\" title=\"Link to this heading\">#</a></h2><p>To implement a piggy bank you need to keep track of the amount of CCD it holds,\nand you need to know whether it has been smashed. The blockchain will take care\nof the first task for you since the chain keeps track of the balance of each smart-contract\ninstance. Therefore, you only need to maintain whether the piggy bank has been smashed,\nwhich you do as part of the smart contract <em>state</em>.</p><p>In Rust you represent this state as an enum with a variant for the piggy bank\nbeing intact and one for it being smashed:</p>", "a[href=\"guides/run-node-macos.html#change-the-node-startup-settings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Change the node startup settings<a class=\"headerlink\" href=\"#change-the-node-startup-settings\" title=\"Link to this heading\">#</a></h2><p>If you want to change whether the node services start automatically, you have two options.</p>", "a[href=\"../smart-contracts/guides/invoke-instance.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#simulating-the-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Simulating the piggy bank<a class=\"headerlink\" href=\"#simulating-the-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>So far the tests you have written are in <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> and have to be compiled alongside\nthe smart contract module in a test build. This is fine for unit testing, but\nthis test build is not the actual module that you intend to deploy on the\nConcordium blockchain.</p><p>You should also test the smart contract wasm module meant for deployment, and you\ncan use the simulate feature of <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>. It takes a smart contract\nwasm module and uses the Wasm interpreter to run a smart contract function in a\ngiven context. For a reference of the context, see <a class=\"reference internal\" href=\"../smart-contracts-v0/references/simulate-context.html#simulate-context-v0\"><span class=\"std std-ref\">Simulation contexts</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#increment-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Increment function<a class=\"headerlink\" href=\"#increment-function\" title=\"Link to this heading\">#</a></h3><p>Create a JSON file that holds your operator that will be given as input to the function and run the command below. Basically, you are saying to the contract instance \u201cwith this transaction I will update your state from the increment entrypoint\u201d which is your function name with this parameter.</p>", "a[href=\"installation/downloads.html#concordium-client-client-version\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client 6.2.1-0<a class=\"headerlink\" href=\"#concordium-client-client-version\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/sc-v0-rollup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">V0 Smart Contracts<a class=\"headerlink\" href=\"#v0-smart-contracts\" title=\"Link to this heading\">#</a></h1><p>V0 smart contracts can still be used on the Concordium blockchain, however, there is no development on tooling for v0 smart contracts and the smart contract libraries Concordium provides do not support v0 smart contracts.</p>", "a[href=\"release-notes/release-notes-lp.html#mw-gen2-for-android\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile for Android<a class=\"headerlink\" href=\"#mw-gen2-for-android\" title=\"Link to this heading\">#</a></h3>", "a[href=\"nodes/baker-docker.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Docker<a class=\"headerlink\" href=\"#run-a-validator-node-on-docker\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a Docker/Linux node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"nodes/node-runner-service-configuration.html#rpc-token\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">rpc.token<a class=\"headerlink\" href=\"#rpc-token\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint, transfer, and burn fungible tokens<a class=\"headerlink\" href=\"#mint-transfer-and-burn-fungible-tokens\" title=\"Link to this heading\">#</a></h1><p>Now you are ready to mint your new tokens. Before minting, look at the minting parameters in the JSON file below. You need to specify the owner, then the token data following with its tokenID, metadata location on IPFS with the URL that you got when you uploaded the metadata file, hash value of it, amount to be minted, and maximum supply number. In this case, it uses tokenID <code class=\"docutils literal notranslate\"><span class=\"pre\">01</span></code>, and mint <code class=\"docutils literal notranslate\"><span class=\"pre\">110</span></code> tokens initially with a maximum supply of 1000.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html#schemas\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Schemas<a class=\"headerlink\" href=\"#schemas\" title=\"Link to this heading\">#</a></h2><p>The front end uses several <cite>json</cite> schemas in the <code class=\"docutils literal notranslate\"><span class=\"pre\">./frontend/src/constants.ts</span></code> file such as:</p>", "a[href=\"../smart-contracts/references/schema-json.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Schema JSON representation<a class=\"headerlink\" href=\"#schema-json-representation\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how bytes, such as the contract state and parameters can\nbe represented as JSON together with a <code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaType</span></code>.</p>", "a[href=\"snippets/delegation-faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation and validation FAQ<a class=\"headerlink\" href=\"#delegation-and-validation-faq\" title=\"Link to this heading\">#</a></h1><h2>For delegators<a class=\"headerlink\" href=\"#for-delegators\" title=\"Link to this heading\">#</a></h2>", "a[href=\"release-notes/release-notes-lp.html#mainnet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Mainnet<a class=\"headerlink\" href=\"#mainnet\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#update-contract-entrypoints\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Update contract entrypoints<a class=\"headerlink\" href=\"#update-contract-entrypoints\" title=\"Link to this heading\">#</a></h2><p>With the contract initialized, you are ready to update it with the chain method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_update</span></code></a>, which has the following parameters:</p>", "a[href=\"../smart-contracts/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p><p>You can also watch a video about how to update a smart contact instance.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#set\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Set</span></code><a class=\"headerlink\" href=\"#set\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with <em>unique</em> items, depending on the\nnested type.\nExample of <code class=\"docutils literal notranslate\"><span class=\"pre\">List(U16)</span></code>:</p>", "a[href=\"guides/deciding-wallet.html#what-are-the-requirements-for-each-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are the requirements for each wallet?<a class=\"headerlink\" href=\"#what-are-the-requirements-for-each-wallet\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/references/host-fns.html#only-in-init-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Only in init function<a class=\"headerlink\" href=\"#only-in-init-function\" title=\"Link to this heading\">#</a></h2><p>Functions only accessible for smart contract init functions. If called from\na receive function execution will abort.</p>", "a[href=\"mobile-wallet/setup-mobile-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Legacy Wallet<a class=\"headerlink\" href=\"#set-up-the-mw-gen1\" title=\"Link to this heading\">#</a></h1><p>The Concordium Legacy Wallet is a digital <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions such as sending CCD, <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shielding</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshielding</span></a> CCD,\nand sending <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transactions</span></a>.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#transactions-overview\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Transactions overview<a class=\"headerlink\" href=\"#transactions-overview\" title=\"Link to this heading\">#</a></h3><p>In the Accounts page, click <a class=\"reference internal\" href=\"../_images/transaction-log.png\"><img alt=\"gear wheel\" src=\"../_images/transaction-log.png\" style=\"width: 50px;\"/></a> to see an overview of the transactions. If you want to see details for the transaction, click on the transaction.</p>", "a[href=\"../smart-contracts-v0/general/introduction.html#life-cycle-of-a-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Life cycle of a smart contract<a class=\"headerlink\" href=\"#life-cycle-of-a-smart-contract\" title=\"Link to this heading\">#</a></h2><p>A smart contract is first deployed to the chain as part of a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">contract\nmodule</span></a>. After this a smart contract can be <em>initialized</em> to\nobtain a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">smart contract instance</span></a>. Finally a smart\ncontract instance can be repeatedly updated according to its own logic.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/index.html#what-is-file-sealing-what-is-timestamping\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is file sealing? What is timestamping?<a class=\"headerlink\" href=\"#what-is-file-sealing-what-is-timestamping\" title=\"Link to this heading\">#</a></h2><p>Seals are used to protect items that should not be tampered with.\nYou can prove an item\u2019s origin and integrity after it has been timestamped\non the blockchain. Timestamping is a blockchain-based verification and\nfraud protection process that assures the authenticity of a document.\nIf you seal and timestamp a file, you can prove that it was in your possession\nat the sealing time and the file has not been changed since then.</p>", "a[href=\"guides/gallery/gallery-backend.html#serve-challenge\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Serve challenge<a class=\"headerlink\" href=\"#serve-challenge\" title=\"Link to this heading\">#</a></h2><p>A new challenge must be generated each time the backend gets a request. The challenge is 32 bytes. Challenges are randomly generated and saved in the state together with the given account address and a timestamp.</p><p>The address will be used when verifying a proof with this challenge, so that only the account that requested the challenge can use it. The timestamp will be used to put a time limit on the challenge after which it will expire, and eventually be cleaned from the state.</p>", "a[href=\"guides/company-identities.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Company identity creation<a class=\"headerlink\" href=\"#company-identity-creation\" title=\"Link to this heading\">#</a></h1><p>A company identity is for companies that need an identity and accounts on the Concordium blockchain, but don\u2019t want that identity to belong to a specific person. Company identities are therefore issued with documents that identify the company and not an individual. Company identities are only relevant for a few companies, such as crypto exchanges.</p><p>You can\u2019t use the Desktop Wallet, Concordium Wallet for Web, Concordium Wallet for Mobile, or Concordium Legacy Wallet to create a company identity. You need to use the Concordium Company ID tool, and you need to communicate directly with the identity provider (currently Notabene). <a class=\"reference external\" href=\"https://notaben.notion.site/Entity-verification-next-1b4fbcd8e32042e1ac3b0018a3cc27bc\">This page</a> describes Notabene\u2019s process, including recovery of company identities.</p>", "a[href=\"web3-id/wallet.html#revoke-verifiable-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Revoke verifiable credentials<a class=\"headerlink\" href=\"#revoke-verifiable-credentials\" title=\"Link to this heading\">#</a></h2><p>In some cases, the issuer of the verifiable credential may allow you to revoke a credential yourself in your Concordium Wallet for Web if you no longer need it.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#receive-context\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Receive context<a class=\"headerlink\" href=\"#receive-context\" title=\"Link to this heading\">#</a></h2><p>The context accessible in a receive function.</p><p>Example of context:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#updating-the-piggy-bank-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Updating the piggy bank smart contract<a class=\"headerlink\" href=\"#updating-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Deposit 1 CCD into the piggy bank to test if you can update the smart contract instance.</p>", "a[href=\"guides/deciding-wallet.html#next-steps\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Next steps<a class=\"headerlink\" href=\"#next-steps\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/overview-shared-accounts.html#credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Credentials<a class=\"headerlink\" href=\"#credentials\" title=\"Link to this heading\">#</a></h2><p>It\u2019s the <a class=\"reference internal\" href=\"resources/glossary.html#term-Credential\"><span class=\"xref std std-term\">credentials</span></a> on an account that determine who\u2019s allowed to sign transactions. An account credential holds signature verification keys, information related to <a class=\"reference internal\" href=\"resources/glossary.html#term-Anonymity-revoker\"><span class=\"xref std std-term\">anonymity revocation</span></a>, and the public <a class=\"reference internal\" href=\"resources/glossary.html#term-Attributes\"><span class=\"xref std std-term\">attributes</span></a> of the account owner. The credential proves that the account owner has been verified by an <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a>, but it doesn\u2019t identify the account owner to the identity provider. However, in the case of a valid request from a government authority via established legal channels, it allows the anonymity revoker and the identity provider, when they work together, to link the account to the users. For more information, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">Identities and accounts</span></a>.</p>", "a[href=\"guides/run-node-macos.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/guides/custom-errors.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"../smart-contracts/general/contract-module.html#on-chain-language\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain language<a class=\"headerlink\" href=\"#on-chain-language\" title=\"Link to this heading\">#</a></h2><p>On the Concordium blockchain the smart contract language is a subset of <a class=\"reference external\" href=\"https://webassembly.org/\">Web\nAssembly</a> (Wasm in short) which is designed to be a portable compilation\ntarget and to be run in sandboxed environments. This is useful because smart\ncontracts will be run by validators in the network who do not necessarily trust\nthe code.</p><p>Wasm is a low-level language and it is impractical to write by hand. Instead, you\ncan write smart contracts in a more high-level language that is then\ncompiled to Wasm. The best supported high-level language on Concordium is Rust.</p>", "a[href=\"guides/baker-pool.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validator management<a class=\"headerlink\" href=\"#validator-management\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> is a node that participates in the network by producing new blocks that are added to the chain. There are some recommended best practices around validation, particularly when a validator runs a <a class=\"reference internal\" href=\"resources/glossary.html#term-Staking-pool\"><span class=\"xref std std-term\">staking pool</span></a>. A validator can choose to open a staking pool to which others can <a class=\"reference internal\" href=\"concepts/concepts-delegation.html#delegation-concept\"><span class=\"std std-ref\">delegate</span></a> some of their stake.</p>", "a[href=\"references/transactions.html#configure-or-change-delegation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Configure or change delegation<a class=\"headerlink\" href=\"#configure-or-change-delegation\" title=\"Link to this heading\">#</a></h3><p>The command to configure or change delegation on an account with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">configure</span></code>. The command has the same arguments as <code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">add</span></code> but the all arguments are optional for <code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">configure</span></code>. You can specify <code class=\"docutils literal notranslate\"><span class=\"pre\">--restake</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">--no-restake</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">configure</span></code>. If it\u2019s specified, it can change whether or not earnings are restaked; if neither is specified, then it won\u2019t be changed. If an argument is not specified, then no change is made.</p>", "a[href=\"installation/downloads.html#mw-gen2\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile<a class=\"headerlink\" href=\"#mw-gen2\" title=\"Link to this heading\">#</a></h2><p>The Concordium Wallet for Mobile is available for iOS and Android\u2122. The Concordium Wallet for Mobile supports iOS 15 or later and Android 8 or later.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#initializing-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing a module<a class=\"headerlink\" href=\"#initializing-a-module\" title=\"Link to this heading\">#</a></h2><p>You can initialize your smart contract now to create a smart contract instance. Give the instance the name <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_bank_part2_instance</span></code> so it can be referenced in this tutorial.</p>", "a[href=\"guides/run-node.html#run-a-testnet-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Run a testnet node<a class=\"headerlink\" href=\"#run-a-testnet-node\" title=\"Link to this heading\">#</a></h2><p>To run a node on testnet use the following configuration file and follow the steps below.</p>", "a[href=\"guides/run-local-chain.html#run-the-chain-from-a-distribution-binary\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Run the chain from a distribution binary<a class=\"headerlink\" href=\"#run-the-chain-from-a-distribution-binary\" title=\"Link to this heading\">#</a></h3><p>If you wish to run the validator node as a Docker instance, skip to the next section. Otherwise, the validator can be run from the appropriate node distribution binary directly on your host system:</p>", "a[href=\"release-notes/release-notes-lp.html#smart-contract-deploy-and-initialize-tool\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract deploy and initialize tool<a class=\"headerlink\" href=\"#smart-contract-deploy-and-initialize-tool\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/references/simulate-context.html#policy\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Policy<a class=\"headerlink\" href=\"#policy\" title=\"Link to this heading\">#</a></h2><p>Both the init- and receive-context contain a list of policies of the sender.\nSuch a policy is represented as a JSON Object.</p><p>Example:</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/upload-nft.html#assign-nft-metadata\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Assign NFT Metadata<a class=\"headerlink\" href=\"#assign-nft-metadata\" title=\"Link to this heading\">#</a></h2><p>The CID of your asset is unique in the IPFS storage, and when you put that value in your metadata file, the buyer will always be able to check it using the URL and compare it to what you have and what IPFS shows.</p><p>The Concordium CIS-2 standard allows the creation of your NFT metadata in the following format, and you can find more details in the <a class=\"reference external\" href=\"https://proposals.concordium.software/CIS/cis-2.html#example-token-metadata-non-fungible\">Concordium CIS-2 token standard</a>. For the sake of the minting process, you have to follow the same formatted .json file, but as you can see, you are also allowed to add additional attributes to the metadata file, or remove them.</p>", "a[href=\"../smart-contracts/general/introduction.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Link to this heading\">#</a></h1><p>Already know what smart contracts are? Go to the <a class=\"reference internal\" href=\"../smart-contracts/guides/quick-start.html#sc-quick-start\"><span class=\"std std-ref\">quick guide</span></a> to start building smart contracts on Concordium right away.</p><p>A <a class=\"reference internal\" href=\"../net/resources/glossary.html#term-Smart-contract\"><span class=\"xref std std-term\">smart contract</span></a> is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p>", "a[href=\"references/transactions.html#show-chain-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Show chain parameters<a class=\"headerlink\" href=\"#show-chain-parameters\" title=\"Link to this heading\">#</a></h3><p>Use the consensus command <code class=\"docutils literal notranslate\"><span class=\"pre\">show-chain-parameters</span></code> to show a number of parameters for the last known block or a specific block.</p>", "a[href=\"references/manage-accounts.html#revoking-anonymity\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Revoking anonymity<a class=\"headerlink\" href=\"#revoking-anonymity\" title=\"Link to this heading\">#</a></h2><p>The identity of a user can only be revealed to a qualified authority as part of a valid legal process. A qualified authority is a governmental body that has authority to act in a relevant jurisdiction. For example, a local police force, a local court or an investigatory division of a local authority that regulates financial conduct will all have authority to act in their jurisdictions. These authorities are qualified to begin the process of revoking the anonymity of a user when they proceed through established legal channels and make a formal request. The outcome of such a request is likely to be that a qualified authority obtains an official order, which may be in the form of a warrant, court order, or similar instrument. Only after a qualified authority validly serves an official order upon the relevant <a class=\"reference internal\" href=\"resources/ar-idp-contact.html#ar-idp-contact\"><span class=\"std std-ref\">anonymity revokers</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> can the real-world identity of a user be revealed and only to the extent set out in the order.</p><p>When legally obliged, the anonymity revokers and identity provider work together to determine the owner of an account and determine which accounts belong to the same owner. Anonymity revocation is a multi-stage process requiring cooperation of multiple parties.</p>", "a[href=\"../smart-contracts/best-practices/development.html#specification\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Specification<a class=\"headerlink\" href=\"#specification\" title=\"Link to this heading\">#</a></h2><p>A smart contract specification reflects developers\u2019 intentions regarding the smart contract functionality.\nIt can serve as a guide for the implementation as well as for testing, verifying, and auditing the code.\nStart with an outline of the functionality and gradually refine it into specifications of contract entrypoints.</p><p>For the entrypoints, consider the following:</p>", "a[href=\"guides/create-proofs.html#structure-a-range-proof\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Structure a range proof<a class=\"headerlink\" href=\"#structure-a-range-proof\" title=\"Link to this heading\">#</a></h3><p>In the example below, you see a range proof constructed to check that wallet owner is between 25 and 65 years old (as of 2022-12-12).</p>", "a[href=\"references/manage-accounts.html#account-balances\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account balances<a class=\"headerlink\" href=\"#account-balances\" title=\"Link to this heading\">#</a></h3><p>Each account has two balances, the <em>public balance</em> which can be <em>seen</em> by anyone, and a <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded\nbalance</span></a>. The shielded balance is only known to the owner of the account. It\ncan only be used in <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-transfer\"><span class=\"xref std std-term\">shielded transfers</span></a> to\nother accounts.</p><p>The public balance of the account is always used for payment of transaction fees,\nproducing blocks, and transfers, even for shielded transfers.</p>", "a[href=\"references/transactions.html#stop-delegation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Stop delegation<a class=\"headerlink\" href=\"#stop-delegation\" title=\"Link to this heading\">#</a></h3><p>The command to remove delegation on an account with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delegator</span> <span class=\"pre\">remove</span></code>. It is recommended to specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">--sender</span></code> account where delegation should be removed. No other arguments are available.</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the piggy bank smart contract<a class=\"headerlink\" href=\"#writing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts-v0/tutorials/piggy-bank/index.html#piggy-bank-v0\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment. In this part you will focus on how to write a smart contract in the\n<a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#action-description\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Action description<a class=\"headerlink\" href=\"#action-description\" title=\"Link to this heading\">#</a></h3><p>The description of actions to execute on the chain, returned by smart contract\nreceive function.</p>", "a[href=\"release-notes/release-notes-lp.html#tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Tools<a class=\"headerlink\" href=\"#tools\" title=\"Link to this heading\">#</a></h2><h3>Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/references/local-settings.html#local-names\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Local Names<a class=\"headerlink\" href=\"#local-names\" title=\"Link to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> allows the user to add local aliases, or <em>names</em>, to\naccounts, contract instances, and modules in order to make referencing them\neasier.</p>", "a[href=\"nodes/troubleshoot-windows.html#node-crash-or-database-corruption\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node crash or database corruption<a class=\"headerlink\" href=\"#node-crash-or-database-corruption\" title=\"Link to this heading\">#</a></h2><p>A node crash or database corruption is the problem if:</p>", "a[href=\"references/concordium-client.html#shell-completion\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Shell completion<a class=\"headerlink\" href=\"#shell-completion\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> has support for generating completion functions for\nbash, zsh, and fish.</p><p>For bash, the command for installing the completions is:</p>", "a[href=\"nodes/run-node-ubuntu.html#install-the-debian-package-and-run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install the Debian package and run a node<a class=\"headerlink\" href=\"#install-the-debian-package-and-run-a-node\" title=\"Link to this heading\">#</a></h2><p>To run the node, you must install a Debian package.\nAfter installation, the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-testnet-node</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-testnet-node-collector</span></code> services will be started.\nThe services are also enabled to start automatically on system start.</p>", "a[href=\"references/manage-accounts.html#account-creation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account creation<a class=\"headerlink\" href=\"#account-creation\" title=\"Link to this heading\">#</a></h3><p>Once you have an identity and a user identity certificate from an identity provider, you can use it to create more accounts on the Concordium Platform. This is typically done using an <a class=\"reference internal\" href=\"#tools\"><span class=\"std std-ref\">app or wallet</span></a> that guides users through the account creation process. The creation of an account is an <a class=\"reference internal\" href=\"resources/glossary.html#term-On-chain\"><span class=\"xref std std-term\">on-chain</span></a> action that requires sending a transaction to a node that participates in the Concordium network.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html#supportspermit-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">supportsPermit</span></code> function<a class=\"headerlink\" href=\"#supportspermit-function\" title=\"Link to this heading\">#</a></h2><p>This function can be queried with a list of given entrypoint names.\nThe response contains corresponding results for each entrypoint,\nwhere the result is either \u201cEntrypoint is not supported and can not be invoked via\nthe permit function using the sponsored transaction mechanism\u201d or \u201cEntrypoint is supported and\ncan be invoked via the permit function using the sponsored transaction mechanism\u201d.</p><p>You can explore the function by invoking it with the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> as follows:</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#recovery-phrase-setup\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Recovery phrase setup<a class=\"headerlink\" href=\"#recovery-phrase-setup\" title=\"Link to this heading\">#</a></h2><p>If you are creating a new wallet, you must set up a <a class=\"reference internal\" href=\"resources/glossary.html#term-Secret-recovery-phrase\"><span class=\"xref std std-term\">secret recovery phrase</span></a>. This is a 24 word phrase that stores your private keys, identities, and accounts. You must write down and confirm your recovery phrase. It is important to keep this secret recovery phrase in a safe location in case you need to recover your wallet on a new device.</p>", "a[href=\"guides/run-node-windows.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html#concordium\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium<a class=\"headerlink\" href=\"#concordium\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/tutorials/voting/voting-sc.html#initializing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing<a class=\"headerlink\" href=\"#initializing\" title=\"Link to this heading\">#</a></h3><p>The election is open from the point in time that this smart contract is initialized until the <cite>end_time</cite>.</p>", "a[href=\"guides/run-node-ubuntu.html#install-the-debian-package-and-run-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install the Debian package and run a node<a class=\"headerlink\" href=\"#install-the-debian-package-and-run-a-node\" title=\"Link to this heading\">#</a></h2><p>To run the node, you must install a Debian package.\nAfter installation, the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-mainnet-node</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-mainnet-node-collector</span></code> services will be started.\nThe services are also enabled to start automatically on system start.</p>", "a[href=\"guides/become-baker.html#manage-the-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Manage the validator<a class=\"headerlink\" href=\"#manage-the-validator\" title=\"Link to this heading\">#</a></h2><h3>Check the status of the validator and its lottery power<a class=\"headerlink\" href=\"#check-the-status-of-the-validator-and-its-lottery-power\" title=\"Link to this heading\">#</a></h3><p>To see if the node is producing blocks, you can check various sources that offer different degrees of precision in the information displayed.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_parameter_section\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_parameter_section\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_parameter_section</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">i</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">location</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">length</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">offset</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Read a section of the <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code>-th parameter to the given location in Wasm linear memory.\nReturn the number of bytes read.\nThe location is assumed to contain enough memory to write the requested\nlength into. If not, the function will trap and abort execution of\nthe contract.</p></dd>", "a[href=\"../smart-contracts/general/contract-instances.html#failing-to-upgrade\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Failing to upgrade<a class=\"headerlink\" href=\"#failing-to-upgrade\" title=\"Link to this heading\">#</a></h3><p>A smart contract instance can fail to upgrade for one of the following reasons:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#validto\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">validTo</span></code><a class=\"headerlink\" href=\"#validto\" title=\"Link to this heading\">#</a></h3><p>The year and month of the date this policy is valid to, given as a JSON string\nin the format <em>YYYYMM</em>.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html#testing-the-signature-verification\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the signature verification<a class=\"headerlink\" href=\"#testing-the-signature-verification\" title=\"Link to this heading\">#</a></h2><p>In this section, you will learn how to create an Ed25519 signature\nthat you can use for your test cases to confirm that the smart contract signature verification logic works as expected.</p>", "a[href=\"nodes/node-runner-service-configuration.html#grpc2-address\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">grpc2.address<a class=\"headerlink\" href=\"#grpc2-address\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"guides/multisig-transfer.html#submit-the-transaction-to-the-blockchain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Submit the transaction to the blockchain<a class=\"headerlink\" href=\"#submit-the-transaction-to-the-blockchain\" title=\"Link to this heading\">#</a></h2><p>When you have received and added all the required signatures, you can submit the transaction to the blockchain.</p>", "a[href=\"desktop-wallet/create-credentials-file.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a credentials file<a class=\"headerlink\" href=\"#create-a-credentials-file\" title=\"Link to this heading\">#</a></h1><p>This topic describes how you create and export a file with <a class=\"reference internal\" href=\"resources/glossary.html#term-Credential\"><span class=\"xref std std-term\">credentials</span></a>. For information about adding more credentials to an account, see <a class=\"reference internal\" href=\"guides/multi-credentials.html#multi-credentials\"><span class=\"std std-ref\">Add credentials to an account</span></a>.</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html#should-you-embed-or-write-to-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Should you embed or write to a file?<a class=\"headerlink\" href=\"#should-you-embed-or-write-to-a-file\" title=\"Link to this heading\">#</a></h2><p>Whether a contract schema should be embedded or written to a file depends on\nyour situation.</p><p>Embedding the schema into the smart contract module distributes the schema\ntogether with the contract ensuring the correct schema is being used and also\nallows anyone to use it directly. The downside is that the smart contract module\nbecomes bigger in size and therefore more expensive to deploy.\nBut unless the smart contract uses very complex types for the state and\nparameters, the size of the schema is likely to be negligible compared to the\nsize of the smart contract itself.</p>", "a[href=\"references/transactions.html#account-sequence-number\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Account sequence number<a class=\"headerlink\" href=\"#account-sequence-number\" title=\"Link to this heading\">#</a></h3><p>Each account on the Concordium blockchain has a <a class=\"reference internal\" href=\"resources/glossary.html#term-Transaction-Sequence-Number\"><span class=\"xref std std-term\">sequence number</span></a> and each\ntransaction signed by the account must have a sequence number. For a transaction\nto be considered valid its sequence number must be the next available one for\nthe account. The sequence number is maintained by all the bakers in order to\nvalidate transactions.</p><p>The sequence number can be looked up from an up to date node by running</p>", "a[href=\"guides/become-baker.html#create-and-register-validator-keys\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Create and register validator keys<a class=\"headerlink\" href=\"#create-and-register-validator-keys\" title=\"Link to this heading\">#</a></h3><p>Each account has a unique validator ID that is used when registering its validator. This ID has to be provided by the network and currently cannot be precomputed. This ID must be given inside the validator keys file to the node so that it can use the validator keys to create blocks. The <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> will automatically fill this field when performing the following operations.</p><p>To create a fresh set of keys run:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/testing.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust\ncontracts.\nThe guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> shows you how to do this.\nAlso, make sure to have a text editor setup to write Rust.</p><p>Additionally, to run the tests you need to:</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_entry_size\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_entry_size\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_entry_size</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">entry</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Get the byte size of the entry.</p></dd>", "a[href=\"guides/baker-windows.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Windows<a class=\"headerlink\" href=\"#run-a-validator-node-on-windows\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a Windows node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks. The validator node will start producing blocks two epochs after the transaction has been approved.</p>", "a[href=\"release-notes/release-notes-lp.html#concordium-client\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Link to this heading\">#</a></h3>", "a[href=\"nodes/troubleshoot-macos.html#service-cannot-run-after-editing-service-config-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Service cannot run after editing service (config) file<a class=\"headerlink\" href=\"#service-cannot-run-after-editing-service-config-file\" title=\"Link to this heading\">#</a></h2><p>When configuring your node to be a validator on Mac, you need to edit the service file (which is owned by root). One way to edit it is to change the ownership to your user and then edit it. But then you cannot run the service.</p><p>To see if this is your problem, try to load the service manually:</p>", "a[href=\"nodes/node-runner-service-configuration.html#node-nodeid\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">[node.<em>nodeid</em>]<a class=\"headerlink\" href=\"#node-nodeid\" title=\"Link to this heading\">#</a></h2><h3>name<a class=\"headerlink\" href=\"#name\" title=\"Link to this heading\">#</a></h3><p>(string; default: <em>nodeid</em>)</p>", "a[href=\"guides/run-local-chain.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2><p>You will either need a working installation of the <a class=\"reference internal\" href=\"installation/downloads.html#node-downloads\"><span class=\"std std-ref\">Concordium Node distribution</span></a> or <a class=\"reference external\" href=\"https://www.docker.com/\">Docker</a>, instances of which will be used to run the validator node(s). You will need <a class=\"reference internal\" href=\"resources/glossary.html#term-Genesis-Block\"><span class=\"xref std std-term\">genesis block</span></a> data, which defines your local chain and sets of credentials for validator accounts of the chain. The number of sets of validator credentials needed thus depends on the desired number of validators in the network, which in this example is one.</p>", "a[href=\"web3-id/index.html#verifier\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Verifier<a class=\"headerlink\" href=\"#verifier\" title=\"Link to this heading\">#</a></h3><p>A verifier is expected to be a business or another use-case that will only provide a service provided specific proofs can be provided by the holder, for example proof of ownership of specific credential, such as a concert ticket.\nThis will typically consist of two components.</p>", "a[href=\"resources/ccd-scan-staking.html#passive-delegation-view\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Passive delegation view<a class=\"headerlink\" href=\"#passive-delegation-view\" title=\"Link to this heading\">#</a></h2><p>If you select <strong>Passive delegation</strong>  it is possible to see the size of the passive delegation in total and information about the yield from delegating to passive delegation. Furthermore it is possible to see the commission rates for passive delegation.</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#miscellaneous\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/host-fns.html#cryptographic-primitives\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Cryptographic primitives<a class=\"headerlink\" href=\"#cryptographic-primitives\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/voting/voting-sc.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust contracts. The guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> shows you how to do this. Also, make sure to have a text editor for writing Rust.</p><p>You also need to set up a new smart contract project. Follow the guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-contract.html#setup-contract\"><span class=\"std std-ref\">Set up a smart contract project</span></a> and return to this point afterwards.</p>", "a[href=\"concepts/concepts-transactions.html#transaction-fees\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transaction fees<a class=\"headerlink\" href=\"#transaction-fees\" title=\"Link to this heading\">#</a></h2><p>Every transaction has a well-defined <em>fee</em>, and the fee of each transaction depends on the transaction type. When the transaction is submitted to the chain, the fee is deducted from the sender\u2019s account and paid to the Concordium network as a fee for carrying out the transaction. The fee is measured in the unit NRG which corresponds to CCD according to a variable conversion factor (currently 1 NRG = 0.0001 CCD). The cost of transaction fees is stable in Euros, and therefore the price in CCD varies depending on the CCD to EUR exchange rate. Read more about conversions between CCD, NRG, and Euros in <a class=\"reference internal\" href=\"references/query-node.html#exchange-rates\"><span class=\"std std-ref\">Exchange rates</span></a>.</p><p>The fee will always be deducted from the <strong>Balance</strong> of the account, so it is important to have some available CCDs to cover fees.</p>", "a[href=\"../smart-contracts/general/contract-instances.html#upgradeability\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Upgradeability<a class=\"headerlink\" href=\"#upgradeability\" title=\"Link to this heading\">#</a></h2><p>A V1 smart contract instance can choose to upgrade its module to a new V1 smart contract\nmodule using the <strong>upgrade</strong> host function.\nThe host function takes a reference to a deployed smart contract module to use for\nthe upgraded instance and can only be called from a receive function.\nThe host function returns whether the upgrade succeeded, allowing the instance\nto decide the next step. If the upgrade is successful any new invocations of the\nupgraded instance uses the smart contract code in the new module.</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-log-file\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.log_file<a class=\"headerlink\" href=\"#collector-log-file\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#logging-events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Logging events<a class=\"headerlink\" href=\"#logging-events\" title=\"Link to this heading\">#</a></h2><p>Events can be logged during the execution of smart contract functions. This is\nthe case for both init and receive functions. The logs are designed for\noff-chain use, so that actors outside of the chain can monitor for events and\nreact to them. Logs are not accessible to smart contracts, or any other actor on\nthe chain. Events can be logged using a function supplied by the host\nenvironment.</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#secret-recovery-phrase\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Secret recovery phrase<a class=\"headerlink\" href=\"#secret-recovery-phrase\" title=\"Link to this heading\">#</a></h2><p>Now you must write down and confirm your <a class=\"reference internal\" href=\"resources/glossary.html#term-Secret-recovery-phrase\"><span class=\"xref std std-term\">secret recovery phrase</span></a>. It is important to keep this recovery phrase in a safe location in case you need to <a class=\"reference internal\" href=\"guides/recover-wallet.html#recover-wallet\"><span class=\"std std-ref\">recover your wallet</span></a>.</p>", "a[href=\"nodes/run-node-ubuntu.html#enable-inbound-connections\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h2><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"nodes/baker-ubuntu.html#baker-ubuntu\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant\nby enabling inbound connections. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> listens\non port <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> for inbound connections on <strong>Testnet</strong>. Depending on your network and\nplatform configuration you will need to forward an external port\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> on your router, open it in your firewall, or both. The\ndetails of how this is done will depend on your configuration.</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html#embedding-schemas-on-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Embedding schemas on-chain<a class=\"headerlink\" href=\"#embedding-schemas-on-chain\" title=\"Link to this heading\">#</a></h2><p>Schemas are embedded into smart contract modules using the <a class=\"reference external\" href=\"https://webassembly.github.io/spec/core/appendix/custom.html\">custom\nsection</a> feature of Wasm modules.\nThis allows Wasm modules to include a named section of bytes, which does not\naffect the semantics of running the Wasm module.</p><p>All schemas are collected and added in one custom section named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-schema-v1</span></code>.\nThis collection is a list of pairs, containing the name of the contract encoded\nin UTF-8 and the contract schema bytes.</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-config\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.config<a class=\"headerlink\" href=\"#log-config\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#including-contract-state\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including contract state<a class=\"headerlink\" href=\"#including-contract-state\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for the contract state, annotate the type\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">#[contract_state(contract</span> <span class=\"pre\">=</span> <span class=\"pre\">...)]</span></code> macro:</p>", "a[href=\"indexers/subquery.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">SubQuery<a class=\"headerlink\" href=\"#subquery\" title=\"Link to this heading\">#</a></h1><p>SubQuery is a leading blockchain data indexer that provides developers with fast, flexible, universal, open-source, and decentralized APIs for web3 projects. SubQuery SDK allows developers to get rich indexed data and build intuitive and immersive decentralized applications in a faster and more efficient way. SubQuery supports 100+ ecosystems including Concordium, Ethereum, Polygon, Polkadot, Algorand, NEAR, and Avalanche.</p><p>Another of SubQuery\u2019s competitive advantages is the ability to aggregate data not only within a chain but across multiple blockchains all within a single project. This allows the creation of feature-rich dashboard analytics and multi-chain block scanners.</p>", "a[href=\"guides/become-baker.html#restake-the-earnings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Restake the earnings<a class=\"headerlink\" href=\"#restake-the-earnings\" title=\"Link to this heading\">#</a></h3><p>When participating as a validator in the network and producing blocks, the account receives rewards for each produced block. These rewards are automatically added to the staked amount by default.</p><p>You can choose to modify this behavior and instead receive the rewards in the account balance without staking them automatically. You can change this switch through <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>:</p>", "a[href=\"../smart-contracts/references/simulate-context.html#sender\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code><a class=\"headerlink\" href=\"#sender\" title=\"Link to this heading\">#</a></h3><p>The address of the sender of the message triggering the receive function.\nCan be either a smart contract instance or an account address, given as a JSON\nobject.</p><p>Example of account address:</p>", "a[href=\"guides/create-account.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an account<a class=\"headerlink\" href=\"#create-an-account\" title=\"Link to this heading\">#</a></h1><p>If you are using Concordium Legacy Wallet or Desktop Wallet, when you created your <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>, it came with an <a class=\"reference internal\" href=\"resources/glossary.html#term-Initial-Account\"><span class=\"xref std std-term\">initial account</span></a>. The initial account is a special account that the <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> submits\nto the chain. When you already have an identity, you can create more <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> with that identity yourself.</p><p>If you are using Concordium Wallet for Web or Concordium Wallet for Mobile, no initial account was created when you created your <a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>. You create all <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> related to your identities.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.hash_sha2_256\"]": "<dt class=\"sig sig-object py\" id=\"concordium.hash_sha2_256\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">hash_sha2_256</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data_len</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">output</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Compute the SHA2-256 digest of the data.</p></dd>", "a[href=\"guides/multisig-transfer.html#generate-and-sign-the-transaction-proposal-on-the-ledger-device\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate and sign the transaction proposal on the LEDGER device<a class=\"headerlink\" href=\"#generate-and-sign-the-transaction-proposal-on-the-ledger-device\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/guides/custom-errors.html#using-custom-errors\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using custom errors<a class=\"headerlink\" href=\"#using-custom-errors\" title=\"Link to this heading\">#</a></h2><p>Return custom errors, as you would with any other error type:</p>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#working-with-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Working with parameters<a class=\"headerlink\" href=\"#working-with-parameters\" title=\"Link to this heading\">#</a></h3><p>Parameters to the init and receive functions are, like the instance\nstate, represented as byte arrays.\nWhile the byte arrays can be used directly, they can also be deserialized into\nstructured data.</p><p>The simplest way to deserialize a parameter is through the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html#tymethod.get\">get()</a> function of\nthe <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html\">Get</a> trait.</p>", "a[href=\"guides/run-node-ubuntu.html#enable-inbound-connections\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h2><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"nodes/baker-ubuntu.html#baker-ubuntu\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant\nby enabling inbound connections. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-node</span></code> listens\non port <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> for inbound connections on <strong>Mainnet</strong>. Depending on your network and\nplatform configuration you will need to forward an external port\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">8888</span></code> on your router, open it in your firewall, or both. The\ndetails of how this is done will depend on your configuration.</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsSmartContract.html#nonces-registry\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Nonces</span></code> registry<a class=\"headerlink\" href=\"#nonces-registry\" title=\"Link to this heading\">#</a></h2><p>The smart contract has a registry to link an account to its next nonce.\nThe nonce is increased sequentially every time a signed message (corresponding to the account) is successfully executed in the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function.\nThe nonce is used to prevent replay attacks of the signed message because only a message signed with the next nonce in sequence can be executed as seen below:</p>", "a[href=\"mobile-wallet/update-baker-mw.html#update-validator-keys\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Update validator keys<a class=\"headerlink\" href=\"#update-validator-keys\" title=\"Link to this heading\">#</a></h2><p>If you believe your validator keys have been compromised or lost, you can generate new validator keys. It is important to remember to update your validator keys on your node once you have exported them.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>", "a[href=\"installation/downloads.html#smart-contract-deploy-and-initialize-tool\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract deploy and initialize tool<a class=\"headerlink\" href=\"#smart-contract-deploy-and-initialize-tool\" title=\"Link to this heading\">#</a></h2><p>To ease deployment and initialization, you can use the <a class=\"reference external\" href=\"https://sctools.mainnet.concordium.software/\">Smart contract deploy and initialize tool</a>. It works with the Concordium Wallet for Web to deploy and initialize smart contracts to Mainnet and Testnet.</p>", "a[href=\"concepts/concepts-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegation<a class=\"headerlink\" href=\"#delegation\" title=\"Link to this heading\">#</a></h1><p>On the Concordium blockchain, <a class=\"reference internal\" href=\"resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validators</span></a> run the protocol that generates blocks, and the action of creating and verifying blocks is an important part of what validators do. Validators are rewarded for every block that they create with a payment of some <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a>. Because Concordium runs a proof-of-stake protocol, each validator needs to <a class=\"reference internal\" href=\"resources/glossary.html#term-Staked-Amount\"><span class=\"xref std std-term\">stake an amount to produce blocks</span></a>, and the <a class=\"reference internal\" href=\"resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">probability of being selected to create the next block</span></a> is proportional to each validator\u2019s stake. So the payment may be seen as an interest on the validator\u2019s capital.</p><p>Not everyone with CCD has the resources needed to run a validator. <a class=\"reference internal\" href=\"resources/glossary.html#term-Delegator\"><span class=\"xref std std-term\">Delegation</span></a> enables everyone to earn rewards for delegating some stake without the need to run a node or become a validator. Any party with CCD may delegate some of their capital to a validator. This increases the validator\u2019s chance of producing the next block and getting rewards, which are then shared with the delegators. This is a non-custodial solution: when a party delegates an amount of CCD to a validator, the CCDs are not transferred to the validator and remain under the party\u2019s control; they are just considered part of the validator\u2019s stake for the proof-of-stake protocol. Staked CCDs, both for delegators and validators, cannot be spent while staked. Unstaking CCDs is subject to a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a>.</p>", "a[href=\"mobile-wallet/update-baker-mw.html#stop-validation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Stop validation<a class=\"headerlink\" href=\"#stop-validation\" title=\"Link to this heading\">#</a></h2><p>If you remove a validator, the node that is configured with the <a class=\"reference internal\" href=\"resources/glossary.html#term-Private-keys\"><span class=\"xref std std-term\">validator keys</span></a> will stop producing blocks after a <a class=\"reference internal\" href=\"resources/glossary.html#term-Cool-down-period\"><span class=\"xref std std-term\">cool-down period</span></a> of three weeks. During this period, you\u2019ll not be able update the stake. After the cool-down period, the amount that you previously staked is returned to your disposable balance at the next <a class=\"reference internal\" href=\"resources/glossary.html#term-Pay-day\"><span class=\"xref std std-term\">pay day</span></a>. When you\u2019ve removed the validator, it is recommended that you also remove the keys from the node. If you want to use the node for validation at a later point in time, you\u2019ll then have to create a new set of validator keys.</p><p>If you no longer wish to produce blocks on this account, you can stop validation.</p>", "a[href=\"references/concordium-client.html#initialization\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Initialization<a class=\"headerlink\" href=\"#initialization\" title=\"Link to this heading\">#</a></h3><p>The command <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span> <span class=\"pre\">config</span> <span class=\"pre\">init</span></code> initializes the configuration\nstructure. The distribution does this automatically, so it should not be\nnecessary to use this command. If the configuration structure becomes corrupt\nfor some reason, it may also be able to repair it.</p>", "a[href=\"../smart-contracts/references/schema-json.html#set\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Set</span></code><a class=\"headerlink\" href=\"#set\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with <em>unique</em> items, depending on the\nnested type.\nExample of <code class=\"docutils literal notranslate\"><span class=\"pre\">List(U16)</span></code>:</p>", "a[href=\"guides/address-book.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Manage address book<a class=\"headerlink\" href=\"#manage-address-book\" title=\"Link to this heading\">#</a></h1><p>The address book helps you select a recipient quickly for transactions.</p>", "a[href=\"concepts/concepts-transactions.html#the-mw-gen1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Legacy Wallet<a class=\"headerlink\" href=\"#the-mw-gen1\" title=\"Link to this heading\">#</a></h3><p>The Concordium Legacy Wallet is a digital smartphone wallet that enables you to create and manage your Concordium identities and accounts, to create simple and shielded transactions, validate and delegate, and to export and import your accounts and identities. If you are a validator who runs a staking pool, it is not possible for pool owners to set the commissions in the Concordium Legacy Wallet; they are fixed at 10%. If you want to be able to adjust commissions, you must use the Concordium Wallet for Mobile or Concordium Wallet for Web. For information about the process, see <a class=\"reference internal\" href=\"mobile-wallet-gen2/faq.html#wallet-migrate\"><span class=\"std std-ref\">the delegation FAQ</span></a>.</p>", "a[href=\"guides/run-node-ubuntu.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts-v0/general/develop-contracts.html#serializable-state-and-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Serializable state and parameters<a class=\"headerlink\" href=\"#serializable-state-and-parameters\" title=\"Link to this heading\">#</a></h3><p>On-chain, the state of an instance is represented as a byte array and exposed\nin a similar interface as the <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> interface of the Rust standard library.</p><p>This can be done using the <code class=\"docutils literal notranslate\"><span class=\"pre\">Serialize</span></code> trait which contains (de-)serialization\nfunctions.</p>", "a[href=\"../smart-contracts-v0/references/local-settings.html#module-names\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Module Names<a class=\"headerlink\" href=\"#module-names\" title=\"Link to this heading\">#</a></h3><p>Module names are stored in the file <code class=\"docutils literal notranslate\"><span class=\"pre\">contracts/moduleNames.map</span></code> as JSON, and\nshould look similar to the following:</p>", "a[href=\"concepts/concepts-baker.html#validation-with-bw\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Validation with Concordium Wallet for Web<a class=\"headerlink\" href=\"#validation-with-bw\" title=\"Link to this heading\">#</a></h3><p>This overview describes the recommended scenario for running a node and becoming a validator on the Concordium blockchain when using Concordium Wallet for Web and running a node.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#deploy-modules\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy modules<a class=\"headerlink\" href=\"#deploy-modules\" title=\"Link to this heading\">#</a></h2><p>Deploying smart contract modules is a two-step process.\nFirst, you load the module with the function <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/fn.module_load_v1.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">module_load_v1</span></code></a>, then you deploy it to the chain with the method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.module_deploy_v1\"><code class=\"docutils literal notranslate\"><span class=\"pre\">module_deploy_v1</span></code></a>.\nLoading as a separate step allows you to reuse the loaded module across multiple tests for efficiency.</p><p>The module to load must be a <code class=\"docutils literal notranslate\"><span class=\"pre\">wasm</span></code> module compiled with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">build</span></code> or, if using cargo concordium version 2.9.0+, <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">test</span> <span class=\"pre\">--out</span> <span class=\"pre\">path/to/wasm/module</span></code>.\nUsing the test command is ideal, as that will both compile the module <em>and</em> run the tests.\nBy compiling the module every time, you ensure that the tests run on the newest version of your code.\nFor example, for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">test</span> <span class=\"pre\">--embed-schema</span> <span class=\"pre\">--out</span> <span class=\"pre\">my_module.wasm.v1</span></code>, you write:</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#return-values\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Return values<a class=\"headerlink\" href=\"#return-values\" title=\"Link to this heading\">#</a></h3><p>Both <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_update</span></code></a> and <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a> have return values when they succeed, or if they fail in a specific way.\nOn success, you can access the return value directly, for example <code class=\"docutils literal notranslate\"><span class=\"pre\">update.return_value</span></code>, which is a byte array, <code class=\"docutils literal notranslate\"><span class=\"pre\">Vec&lt;u8&gt;</span></code>.\nBut the methods can fail in multiple ways, for example if the contract runs out of energy or it panics, and the return value is only available when the contract rejects on its own.\nThe helper method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeError.html#method.return_value\"><code class=\"docutils literal notranslate\"><span class=\"pre\">return_value</span></code></a> on the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeError.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ContractInvokeError</span></code></a> struct tries to extract the return value and returns an <code class=\"docutils literal notranslate\"><span class=\"pre\">Option&lt;Vec&lt;u8&gt;&gt;</span></code>.\nIt is common to deserialize the return values into structered data and thus both the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeSuccess.html#method.parse_return_value\">success</a> and <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeError.html#method.parse_return_value\">error</a> types have helper methods called <code class=\"docutils literal notranslate\"><span class=\"pre\">parse_return_value</span></code>, which returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">Result&lt;T,</span> <span class=\"pre\">ParseError&gt;</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code> is the type you want to parse.\nFor example:</p>", "a[href=\"desktop-wallet/accounts-desktop.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Desktop Wallet navigation and settings<a class=\"headerlink\" href=\"#desktop-wallet-navigation-and-settings\" title=\"Link to this heading\">#</a></h1><p>This topic describes the information and the tasks that are available in the Desktop Wallet. To learn more about creating accounts, see <a class=\"reference internal\" href=\"guides/create-account.html#create-account\"><span class=\"std std-ref\">Create an account in the Desktop Wallet</span></a>.</p><p>To view information about an account, go to <strong>Accounts</strong> and select the relevant account. At the top of the window you see the following:</p>", "a[href=\"../smart-contracts/guides/deploy-module.html#deployment\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Link to this heading\">#</a></h2><p>To deploy a smart contract module <code class=\"docutils literal notranslate\"><span class=\"pre\">my_module.wasm.v1</span></code> using the account\nwith name account-name, run the following command:</p>", "a[href=\"../smart-contracts-v0/guides/local-simulate.html#simulating-updates\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Simulating updates<a class=\"headerlink\" href=\"#simulating-updates\" title=\"Link to this heading\">#</a></h2><p>To simulate an update to a contract smart contract instance using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, run:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#build-deploy-and-initialize\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build, deploy, and initialize<a class=\"headerlink\" href=\"#build-deploy-and-initialize\" title=\"Link to this heading\">#</a></h2><p>Now that you have finished coding your smart contract you can build, deploy, and initialize it. You will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> to build it, then deploy it to the testnet, and finally, mint/transfer/burn your token.</p><p>First, create a metadata file. You will use it to pick an image for it, and naming and description. One thing that is important to note is the <strong>unique</strong> flag. Since this is not an NFT, you should set it to <strong>false</strong>. Then upload it to the IPFS and save the CID address. For information about how to do this, see <a class=\"reference internal\" href=\"../smart-contracts/tutorials/nft-minting/upload-nft.html#upload-nft\"><span class=\"std std-ref\">Upload the NFT</span></a>. You will use it while minting the token.</p>", "a[href=\"resources/dashboards.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Status Pages<a class=\"headerlink\" href=\"#status-pages\" title=\"Link to this heading\">#</a></h1><p>The Concordium dashboards have been removed and now redirect to <a class=\"reference external\" href=\"https://ccdscan.io/\">CCDScan</a>.</p>", "a[href=\"concepts/concepts-baker.html#stake-and-lottery\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Stake and lottery<a class=\"headerlink\" href=\"#stake-and-lottery\" title=\"Link to this heading\">#</a></h2><p>A validator needs to <a class=\"reference internal\" href=\"resources/glossary.html#term-Staked-Amount\"><span class=\"xref std std-term\">stake</span></a> a part of its CCD balance on the validator account. Later, the validator can then manually release a part of or all of the staked amount. The staked amount cannot be moved or transferred until it\u2019s released by the validator.</p>", "a[href=\"#index\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">index<a class=\"headerlink\" href=\"#index\" title=\"Link to this heading\">#</a></h1>", "a[href=\"guides/run-node-macos.html#configure-a-node-as-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a node as a validator<a class=\"headerlink\" href=\"#configure-a-node-as-a-validator\" title=\"Link to this heading\">#</a></h2><p>For information about validation on a MacOS node, see <a class=\"reference internal\" href=\"nodes/baker-macos.html#baker-macos\"><span class=\"std std-ref\">Run a validator node on macOS</span></a>.</p>", "a[href=\"nodes/node-runner-service-configuration.html#collector-exe\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">collector.exe<a class=\"headerlink\" href=\"#collector-exe\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"../smart-contracts/guides/fallback-entrypoints.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Fallback entrypoints<a class=\"headerlink\" href=\"#fallback-entrypoints\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to use fallback entrypoints, which can be useful\nwhen creating a proxy for your smart contract.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#specifying-the-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Specifying the state<a class=\"headerlink\" href=\"#specifying-the-state\" title=\"Link to this heading\">#</a></h2><p>To implement a piggy bank you need to keep track of the amount of CCD it holds,\nand you need to know whether it has been smashed. The blockchain will take care\nof the first task for you since the chain keeps track of the balance of each smart-contract\ninstance. Therefore, you only need to maintain whether the piggy bank has been smashed,\nwhich you do as part of the smart contract <em>state</em>.</p><p>In Rust you represent this state as an enum with a variant for the piggy bank\nbeing intact and one for it being smashed:</p>", "a[href=\"mobile-wallet/add-baker-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Add a validator<a class=\"headerlink\" href=\"#add-a-validator\" title=\"Link to this heading\">#</a></h1><p>Prior to becoming a validator, read <a class=\"reference internal\" href=\"guides/baker-pool.html#baker-pool\"><span class=\"std std-ref\">Validator management</span></a> to learn about best practices for validators.</p>", "a[href=\"../smart-contracts/guides/json-params.html#updateoperator-and-updateoperatorparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">updateOperator() and UpdateOperatorParams<a class=\"headerlink\" href=\"#updateoperator-and-updateoperatorparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function to assign/remove another address to act as an operator for an address.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperatorParams</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function is an array of <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperator</span></code> values.</p>", "a[href=\"../smart-contracts/general/contract-schema.html#why-use-a-contract-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Why use a contract schema<a class=\"headerlink\" href=\"#why-use-a-contract-schema\" title=\"Link to this heading\">#</a></h2><p>Data on the blockchain, such as the state of an instance and parameters passed\nto init and receive functions, is serialized as a sequence of bytes.\nThe serialization is optimized for efficiency, rather than human readability.</p><p>Usually these bytes have structure and this structure is known to the smart\ncontract as part of the contract functions, but outside of these functions it\ncan be difficult to make sense of the bytes. This is especially the case when\ninspecting a complex return value from or passing a complex parameters to a\nsmart contract function.\nIn the latter case, the byte array should either be serialized from structured data\nor written manually.</p>", "a[href=\"nodes/run-node-ubuntu.html#synchronize-a-node-with-the-network\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Synchronize a node with the network<a class=\"headerlink\" href=\"#synchronize-a-node-with-the-network\" title=\"Link to this heading\">#</a></h2><p>When you start a node for the first time, it can take a while to synchronize\nthe node with the rest of the network, since it has to get all blocks from\nits peers. That is why all node distributions since 6.1 come with out of band\ncatchup enabled. This will speed up the initial catchup and during out of\nband catchup the node will not have any peers.</p><p>The out of band catchup can be kept enabled even after the node is caught up,\nbut is not necessary. To disable out of band catchup unset the <code class=\"docutils literal notranslate\"><span class=\"pre\">CONCORDIUM_NODE_CONSENSUS_DOWNLOAD_BLOCKS_FROM</span></code> environment variable as show in step 3 below.</p>", "a[href=\"../smart-contracts/general/contract-module.html#deployment\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Link to this heading\">#</a></h2><p>Deploying a module to the chain means submitting the module bytecode as a\ntransaction to the Concordium network. If <em>valid</em>, this transaction will be\nincluded in a block. This transaction, as every other transaction, has an\nassociated cost. The cost is based on the size of the bytecode and is charged\nfor both checking validity of the module and on-chain storage.</p><p>The deployment itself does not execute a\nsmart contract. To execute, a user must first create an <em>instance</em> of a contract. See <a class=\"reference internal\" href=\"../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">Smart contract instances</span></a> for more information.</p>", "a[href=\"desktop-wallet/update-application.html#manually-updating\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Manually updating<a class=\"headerlink\" href=\"#manually-updating\" title=\"Link to this heading\">#</a></h2><p>To manually update the desktop wallet, go to the <a class=\"reference internal\" href=\"installation/downloads.html#downloads-desktop-wallet\"><span class=\"std std-ref\">downloads page</span></a> and download the latest version.</p>", "a[href=\"guides/deciding-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deciding between the wallets<a class=\"headerlink\" href=\"#deciding-between-the-wallets\" title=\"Link to this heading\">#</a></h1><h2>Why you need a wallet<a class=\"headerlink\" href=\"#why-you-need-a-wallet\" title=\"Link to this heading\">#</a></h2><p>You need a <a class=\"reference internal\" href=\"resources/glossary.html#term-Wallet\"><span class=\"xref std std-term\">wallet</span></a> to interact with the Concordium blockchain and to manage your CCD. Currently, there are four first party wallets available: the Concordium Desktop Wallet, the Concordium Wallet for Mobile, Concordium Legacy Wallet, and the Concordium Wallet for Web. This topic outlines the major differences that you should be aware of when you decide which wallet to use.</p><p>The wallets are developed by Concordium Software and can only be used to hold <a class=\"reference internal\" href=\"resources/glossary.html#term-CCD\"><span class=\"xref std std-term\">CCD</span></a>, the native token of the Concordium blockchain. You can\u2019t use these wallets for any other cryptocurrencies.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#balances\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Balances<a class=\"headerlink\" href=\"#balances\" title=\"Link to this heading\">#</a></h3><p>You can query the balance of accounts and contracts with the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Chain</span></code></a>.\nSince accounts can stake part of their balance and also receive transfers with a schedule, their balance has three parts.</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#setup-the-contract-for-a-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the contract for a schema<a class=\"headerlink\" href=\"#setup-the-contract-for-a-schema\" title=\"Link to this heading\">#</a></h2><p>In order to build a contract schema, you first have to prepare your smart\ncontract for building the schema.</p><p>You can choose which parts of our smart contract to included in the schema.\nThe options are to include a schema for the contract state, and/or for each of\nthe parameters of init and receive functions.</p>", "a[href=\"guides/manage-wallets-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Wallet activities<a class=\"headerlink\" href=\"#wallet-activities\" title=\"Link to this heading\">#</a></h1><p>If you need to know how to send CCDs, recover your wallet on a new device, or more, all the information you need is right here.</p>", "a[href=\"../smart-contracts/best-practices/development.html#automated-testing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Automated testing<a class=\"headerlink\" href=\"#automated-testing\" title=\"Link to this heading\">#</a></h3><p>The Concordium standard library <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/\">concordium-std</a> offers several possibilities for testing the smart contract code.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html#smart-contract-on-the-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract on the chain<a class=\"headerlink\" href=\"#smart-contract-on-the-chain\" title=\"Link to this heading\">#</a></h2><p>A smart contract on the chain is a collection of functions exported from a deployed\nmodule. The concrete mechanism used for this is the <a class=\"reference external\" href=\"https://webassembly.org/\">Web Assembly</a> export\nsection. A smart contract must export one function for initializing new\ninstances and can export zero or more functions for updating the instance.</p><p>Since a smart contract module can export functions for multiple different smart\ncontracts, functions are associated with a contract using a naming scheme:</p>", "a[href=\"desktop-wallet/proposed-transactions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">View transaction proposals<a class=\"headerlink\" href=\"#view-transaction-proposals\" title=\"Link to this heading\">#</a></h1><h2>View a list of multi-signature proposals<a class=\"headerlink\" href=\"#view-a-list-of-multi-signature-proposals\" title=\"Link to this heading\">#</a></h2><p>The list of proposals gives you an overview of all the multi-signature proposals you\u2019ve created and their status. The proposals are shown in chronological order. By default, you can view the latest 50 transactions, but you have the possibility of viewing more if needed.</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#action-descriptions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Action descriptions<a class=\"headerlink\" href=\"#action-descriptions\" title=\"Link to this heading\">#</a></h2><p>A receive function returns a <em>description of actions</em> to be executed by\nthe host environment on the chain.</p><p>The possible actions that a contract can produce are:</p>", "a[href=\"browser-wallet/setup-browser-wallet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up the Concordium Wallet for Web<a class=\"headerlink\" href=\"#set-up-the-bw\" title=\"Link to this heading\">#</a></h1><p>The Concordium Wallet for Web is a digital wallet that enables you to create and manage your Concordium\n<a class=\"reference internal\" href=\"resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identities</span></a> and <a class=\"reference internal\" href=\"resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> and to create transactions, such as sending CCD.</p><p>To learn more about identities and accounts, see <a class=\"reference internal\" href=\"concepts/id-accounts.html#reference-id-accounts\"><span class=\"std std-ref\">identities</span></a> and <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">accounts</span></a>.</p>", "a[href=\"guides/run-node-ubuntu.html#synchronize-a-node-with-the-network\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Synchronize a node with the network<a class=\"headerlink\" href=\"#synchronize-a-node-with-the-network\" title=\"Link to this heading\">#</a></h2><p>When you start a node for the first time, it can take a while to synchronize\nthe node with the rest of the network, since it has to get all blocks from\nits peers. That is why all node distributions since 6.1 come with out of band\ncatchup enabled. This will speed up the initial catchup and during out of\nband catchup the node will not have any peers.</p><p>The out of band catchup can be kept enabled even after the node is caught up,\nbut is not necessary. To disable out of band catchup remove the environment\nvariables from the configuration file:</p>", "a[href=\"resources/ccd-scan-blocks.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Blocks overview<a class=\"headerlink\" href=\"#ccdscan-blocks-overview\" title=\"Link to this heading\">#</a></h1><p>The Blocks overview shows information about the blocks created during the selected time range in the filter.</p>", "a[href=\"../smart-contracts/guides/compile-module.html#compiling-to-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compiling to Wasm<a class=\"headerlink\" href=\"#compiling-to-wasm\" title=\"Link to this heading\">#</a></h2><p>To help building smart contract modules and to take advantage of features\nsuch as <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>, Concordium recommends using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> tool for building <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> smart contracts.</p><p>In order to build a smart contract for deployment, run:</p>", "a[href=\"../smart-contracts-v0/general/contract-instances.html#state-of-a-smart-contract-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">State of a smart contract instance<a class=\"headerlink\" href=\"#state-of-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h2><p>The state of a smart contract instance consists of two parts, the user-defined\nstate and the amount of CCD the contract holds, i.e., its <em>balance</em>. When\nreferring to state it typically means only the user-defined state. The reason for\ntreating the CCD amount separately is that CCD can only be spent and\nreceived according to rules of the network, e.g., contracts cannot create\nor destroy CCD tokens.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#bring-in-the-standard-library\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Bring in the standard library<a class=\"headerlink\" href=\"#bring-in-the-standard-library\" title=\"Link to this heading\">#</a></h2><p>The source code of your smart contract is going to be in the <code class=\"docutils literal notranslate\"><span class=\"pre\">src</span></code> directory,\nwhich already contains the file <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code>, assuming you follow the above guide\nto set up your project.\nOpen <code class=\"docutils literal notranslate\"><span class=\"pre\">src/lib.rs</span></code> in your editor and you\u2019ll see some code for <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/testing.html#piggy-bank-testing\"><span class=\"std std-ref\">writing tests</span></a>,\nwhich you can delete for now. You will come back to tests later in this tutorial.</p><p>First, bring everything from the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/index.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code></a> library into scope\nby adding the line:</p>", "a[href=\"../smart-contracts/guides/setup-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a smart contract project<a class=\"headerlink\" href=\"#set-up-a-smart-contract-project\" title=\"Link to this heading\">#</a></h1><p>This guide documents two different options (<em>from a template</em> or <em>from scratch</em>) to create a new Concordium smart contract project.\nThe <em>from a template</em> option is available for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> version 2.2.0 or greater. It provides you with some\nsmart contract templates. Choose the template that best fits your project scope.\nThe <em>from scratch</em> option guides you through the process when you want to start a new project without any boilerplate code.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#the-operatorof-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf</span></code> function<a class=\"headerlink\" href=\"#the-operatorof-function\" title=\"Link to this heading\">#</a></h3><p>You are ready now to invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf</span></code> function with the following command.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-dapp.html#bw\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Web<a class=\"headerlink\" href=\"#bw\" title=\"Link to this heading\">#</a></h2><p>A web wallet is a piece of code that can be added as an extension to supported browsers such as <code class=\"docutils literal notranslate\"><span class=\"pre\">Chrome</span></code>.\nThe web wallet allows you to interact with the chain and make transactions.\nCurrently, the Concordium Wallet for Web does this by connecting to a (gRPC) server that communicates with a node.\nThe Concordium Wallet for Web hosts the private keys corresponding to the accounts of the user.</p><p>Your front-end code that is run in the browser constructs the transaction object\nand sends it to the Concordium Wallet for Web. The transaction object is signed by the private key hosted in the Concordium Wallet for Web\nand transmitted to the server via <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTPS</span></code>. This server has access to a Concordium node and converts\nthe request (including the signed transaction object) that comes via <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTPS</span></code> from the Concordium Wallet for Web\nto a request that the Concordium node can execute. The signed transaction is\ntransmitted via peer-to-peer communication to other Concordium nodes and becomes\npart of the Concordium blockchain.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Develop smart contracts in Rust<a class=\"headerlink\" href=\"#develop-smart-contracts-in-rust\" title=\"Link to this heading\">#</a></h1><p>On the Concordium blockchain smart contracts are deployed as Wasm modules, but\nWasm is designed primarily as a compilation target and is not convenient to\nwrite by hand.\nInstead you can write your smart contracts in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language, which\nhas good support for compiling to Wasm.</p><p>Smart contracts do not have to be written in Rust.\nThis is simply the first SDK provided.\nManually written Wasm, or Wasm compiled from C, C++, <a class=\"reference external\" href=\"https://github.com/AssemblyScript\">AssemblyScript</a>, and\nothers, is equally valid on the chain, as long as it adheres to the <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#wasm-limitations\"><span class=\"std std-ref\">Wasm\nlimitations Concordium imposes</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/testing.html#test-inserting-ccd-into-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test inserting CCD into a piggy bank<a class=\"headerlink\" href=\"#test-inserting-ccd-into-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Next, you should test the different functions for interacting with a piggy bank.\nYou will start by testing the <code class=\"docutils literal notranslate\"><span class=\"pre\">insert</span></code> entrypoint on an intact piggy bank contract.</p><p>Create a new test case named <code class=\"docutils literal notranslate\"><span class=\"pre\">test_insert_intact</span></code>, and use the helper method <code class=\"docutils literal notranslate\"><span class=\"pre\">create_chain_and_contract</span></code> from the previous section to get a chain with two accounts and an initialized piggy bank contract.</p>", "a[href=\"guides/run-node-macos.html#verify-that-the-node-is-running\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Verify that the node is running<a class=\"headerlink\" href=\"#verify-that-the-node-is-running\" title=\"Link to this heading\">#</a></h2><p>The node runs as a background service with no user interface. To verify that it\u2019s running, use the <strong>Activity Monitor</strong>.</p>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a\n<a class=\"reference internal\" href=\"../smart-contracts-v0/general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the receive function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_receive</span></code> with a parameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary\nformat, run the following command:</p>", "a[href=\"references/manage-accounts.html#command-line-tool\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Command-line tool<a class=\"headerlink\" href=\"#command-line-tool\" title=\"Link to this heading\">#</a></h3><p>The Concordium distribution ships with a command-line tool named\n<a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. It is designed as a low-level interface to the\nConcordium blockchain. It cannot be used to create identities, but it can\n<a class=\"reference internal\" href=\"references/concordium-client.html#concordium-client-import-accounts-keys\"><span class=\"std std-ref\">import accounts</span></a> exported from the mobile wallets. Once an account has been\nimported, the tool can be used to do CCD transfers from the account, as well as\nsend all other <a class=\"reference internal\" href=\"references/transactions.html#transactions\"><span class=\"std std-ref\">transaction</span></a> types supported by the Concordium blockchain.</p><p>To learn more about the differences between the wallets, see <a class=\"reference internal\" href=\"guides/deciding-wallet.html#choosing-wallet\"><span class=\"std std-ref\">Deciding between the wallets</span></a>.</p>", "a[href=\"../smart-contracts/tutorials/eSealing/eSealing_dapp.html#view-timestamp-and-witness\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View timestamp and witness<a class=\"headerlink\" href=\"#view-timestamp-and-witness\" title=\"Link to this heading\">#</a></h2><p>Select the <strong>Display tab</strong> to look up the timestamp and witness (sealer account) of an already registered file as shown below:</p>", "a[href=\"guides/shield-ccd-wallets.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Shield and unshield CCD on an account<a class=\"headerlink\" href=\"#shield-and-unshield-ccd-on-an-account\" title=\"Link to this heading\">#</a></h1><p>Accounts on the Concordium blockchain have two balances, the <strong>Balance</strong> and the <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielded-balance\"><span class=\"xref std std-term\">shielded balance</span></a>. You can move funds between these\ntwo balances using either a <a class=\"reference internal\" href=\"resources/glossary.html#term-Shielding\"><span class=\"xref std std-term\">shield CCD transaction</span></a> or an <a class=\"reference internal\" href=\"resources/glossary.html#term-Unshielding\"><span class=\"xref std std-term\">unshield CCD transaction</span></a>.</p><p>When you shield an amount on an account, only the account\u2019s credential holder can see the shielded amounts. Other participants in the network will be able to see the shielding transaction, but can\u2019t see the shielded balance or any shielded transfers going in or out of the account. You can\u2019t make shielded transfers on multi-signature accounts, only on accounts with a single credential.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#contract-trace-elements\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Contract trace elements<a class=\"headerlink\" href=\"#contract-trace-elements\" title=\"Link to this heading\">#</a></h3><p>The contract trace elements describe the contract calls, transfers to accounts, module upgrades, and the success of these during a <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_update</span></code></a> or <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a>.</p><p>The struct returned on success from these calls has an <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeSuccess.html#method.effective_trace_elements\"><code class=\"docutils literal notranslate\"><span class=\"pre\">effective_trace_elements</span></code></a> method which returns a list of all the <em>effective</em> elements in the order that they occurred.\nTo understand what <em>effective</em> refers to, an example is useful:</p>", "a[href=\"guides/multisig-transfer.html#option-2-create-an-explicit-schedule\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Option 2: Create an explicit schedule<a class=\"headerlink\" href=\"#option-2-create-an-explicit-schedule\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_iterator_delete\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_iterator_delete\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_iterator_delete</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterator</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Delete the iterator, unlocking the subtree.</p></dd>", "a[href=\"../smart-contracts/best-practices/development.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Development best practices<a class=\"headerlink\" href=\"#development-best-practices\" title=\"Link to this heading\">#</a></h1><p>This document provides guidelines for developing smart contracts, including best practices for smart contract development, audit, information about common pitfalls and security vulnerabilities, and how to avoid them.</p><p>It starts with some general thoughts about smart contract development and then gives more details about writing smart contracts in Rust for Concordium.</p>", "a[href=\"../smart-contracts-v0/guides/setup-tools.html#vscode-extension\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">VSCode extension<a class=\"headerlink\" href=\"#vscode-extension\" title=\"Link to this heading\">#</a></h3><p>The <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=Concordium.concordium-smart-contracts\">VSCode extension</a> can help you develop Concordium smart contracts. The extension sets up the editor for development, installs the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> smart contract development tool for all supported platforms, and provides commands in the editor for the essential workflows, such as building and testing smart contracts.</p><p>You can watch a video about how to use the VSCode extension.</p>", "a[href=\"guides/overview-shared-accounts.html#step-4\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Step 4<a class=\"headerlink\" href=\"#step-4\" title=\"Link to this heading\">#</a></h3><p>The initial account owner imports the file and adds the credentials to the account. If needed, the user changes the signature threshold. See <a class=\"reference internal\" href=\"guides/multi-credentials.html#multi-credentials\"><span class=\"std std-ref\">Add credentials to an account</span></a>.</p>", "a[href=\"guides/change-account-name.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Change account name<a class=\"headerlink\" href=\"#change-account-name\" title=\"Link to this heading\">#</a></h1>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-interacting.html#query-non-state-mutative-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Query (non-state-mutative) functions<a class=\"headerlink\" href=\"#query-non-state-mutative-functions\" title=\"Link to this heading\">#</a></h2><p>The protocol has four query functions (<code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">supports</span></code>)\nthat you can invoke on the wCCD contract. Because the <code class=\"docutils literal notranslate\"><span class=\"pre\">schema</span></code> is already embedded,\nthe input parameters can be provided with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--parameter-json</span></code> flag.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the piggy bank smart contract<a class=\"headerlink\" href=\"#writing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment. In this part you will focus on how to write a smart contract in the\n<a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p>", "a[href=\"concepts/concepts-baker.html#overview-of-the-validation-process\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Overview of the validation process<a class=\"headerlink\" href=\"#overview-of-the-validation-process\" title=\"Link to this heading\">#</a></h2><p>If there are no issues, the protocol repeats this process from step 3.</p><p>In the case of a faulty validator who does not produce a block or produces an invalid block, a timeout mechanism handles the process. If Bob does not produce a block within a certain time, a <a class=\"reference internal\" href=\"resources/glossary.html#term-Timeout-certificate\"><span class=\"xref std std-term\">Timeout Certificate</span></a> (TC) is issued to move the process forward. Alice can now use the TC to skip the previous round and extend an older block for which she has a QC.</p>", "a[href=\"../smart-contracts/references/schema-json.html#ileb128\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ILeb128</span></code><a class=\"headerlink\" href=\"#ileb128\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string containing a signed integer.\nThe number of bytes for the encoding of the integer is bound to a constraint (<code class=\"docutils literal notranslate\"><span class=\"pre\">u32</span></code>) in the schema.\nAs each byte of the encoding contains 7 bits of information, a constraint of <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> puts an upper bound of <code class=\"docutils literal notranslate\"><span class=\"pre\">2^(n</span> <span class=\"pre\">*</span> <span class=\"pre\">7</span> <span class=\"pre\">-</span> <span class=\"pre\">1)</span> <span class=\"pre\">-</span> <span class=\"pre\">1</span></code> and a lower bound of <code class=\"docutils literal notranslate\"><span class=\"pre\">-2^(n</span> <span class=\"pre\">*</span> <span class=\"pre\">7</span> <span class=\"pre\">-</span> <span class=\"pre\">1)</span></code> for the signed integer.</p><p>Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">ILeb128(5)</span></code>:</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#transfers-to-accounts\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Transfers to accounts<a class=\"headerlink\" href=\"#transfers-to-accounts\" title=\"Link to this heading\">#</a></h3><p>One of the trace elements from the previous section, <code class=\"docutils literal notranslate\"><span class=\"pre\">Transferred</span></code>, describes a transfer from an contract to an account.\nWith the helper method <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.ContractInvokeSuccess.html#method.account_transfers\"><code class=\"docutils literal notranslate\"><span class=\"pre\">account_transfers</span></code></a>, you can get an iterator over all transfers to accounts in the order that they occured in a single call of <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_update</span></code></a> or <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/struct.Chain.html#method.contract_invoke\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contract_invoke</span></code></a>.</p><p>Example:</p>", "a[href=\"../smart-contracts/guides/inspect-instance.html#inspection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Inspection<a class=\"headerlink\" href=\"#inspection\" title=\"Link to this heading\">#</a></h2><p>To inspect, or show, information about a smart contract instance with the\naddress index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, run the following command:</p>", "a[href=\"nodes/baker-macos.html#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>", "a[href=\"references/query-node.html#inspect-consensus-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect consensus parameters<a class=\"headerlink\" href=\"#inspect-consensus-parameters\" title=\"Link to this heading\">#</a></h3><p>Show <a class=\"reference internal\" href=\"resources/glossary.html#term-Leader-Election\"><span class=\"xref std std-term\">election parameters</span></a> for a specific block, optionally including\nbakers and their <a class=\"reference internal\" href=\"resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">lottery power</span></a>:</p>", "a[href=\"../smart-contracts/references/schema-json.html#u8-u16-u32-u64-i8-i16-i32-i64\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">U8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U16</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U32</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">U64</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I16</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I32</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I64</span></code><a class=\"headerlink\" href=\"#u8-u16-u32-u64-i8-i16-i32-i64\" title=\"Link to this heading\">#</a></h3><p>Give a JSON number within the size of the schema type.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"nodes/node-runner-service-configuration.html#log-level\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">log.level<a class=\"headerlink\" href=\"#log-level\" title=\"Link to this heading\">#</a></h3><p>(string; optional; common)</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">NFT marketplace smart contract tutorial<a class=\"headerlink\" href=\"#nft-marketplace-smart-contract-tutorial\" title=\"Link to this heading\">#</a></h1><p>In this tutorial you will create an NFT Marketplace. The <a class=\"reference external\" href=\"https://github.com/chainorders/concordium-nft-tutorials\">contract</a> provides some functionalities, such as minting semi-fungible, and non-fungible tokens, buying and selling NFTs with fixed prices, setting commissions for your marketplace, and setting royalties for your NFTs to get some fees from secondary sales in this marketplace. Before you start, it is important to note that this is not a beginner-level tutorial; it does not cover the basics like downloads, node configurations, wallet setup and export, and so on.</p><p>This tutorial will be the first part of the Marketplace. There will be no UI interaction. You will invoke the functions with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. In the end, while implementing a dApp, what you have to do is implement a client that connects your backend with the blockchain. <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is that client and does that. In the second part which will be released soon, you will implement this marketplace from scratch with an empty React template.</p>", "a[href=\"references/concordium-client.html#add-key-to-an-account\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Add key to an account<a class=\"headerlink\" href=\"#add-key-to-an-account\" title=\"Link to this heading\">#</a></h4><p>Add a sign/verify key-pair to a specific account. The <code class=\"docutils literal notranslate\"><span class=\"pre\">KEYS</span></code> parameter must be\na JSON file that contains the keys that will be added in the same format as they\nwere shown above when printing the configuration:</p>", "a[href=\"guides/run-node-windows.html#verify-that-the-node-is-running\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Verify that the node is running<a class=\"headerlink\" href=\"#verify-that-the-node-is-running\" title=\"Link to this heading\">#</a></h2><p>The node runs as a background service with no user interface. To verify that it\u2019s running, use the <strong>Task Manager</strong>.</p>", "a[href=\"../smart-contracts/guides/build-schema.html#converting-a-binary-schema-to-base64\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Converting a binary schema to base64<a class=\"headerlink\" href=\"#converting-a-binary-schema-to-base64\" title=\"Link to this heading\">#</a></h3><p>These commands are available in <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span></code> version 2.7.0 or newer.</p><p>To convert an existing binary schema (obtained via <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span></code>) use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">schema-base64</span></code> subcommand, e.g.,</p>", "a[href=\"guides/gallery/gallery-setup.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Running the example<a class=\"headerlink\" href=\"#running-the-example\" title=\"Link to this heading\">#</a></h1><p>The front end needs the Concordium Wallet for Web for interaction. Install the extension for your browser as described <a class=\"reference internal\" href=\"browser-wallet/setup-browser-wallet.html#setup-browser-wallet\"><span class=\"std std-ref\">here</span></a>.</p><p>Clone this <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples\">repository</a>.</p>", "a[href=\"guides/become-baker.html#update-validator-keys\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Update validator keys<a class=\"headerlink\" href=\"#update-validator-keys\" title=\"Link to this heading\">#</a></h3><p>If it is necessary to update your validator keys, you need to first generate new validator keys. To create a fresh set of keys run:</p>", "a[href=\"guides/run-node.html#before-you-begin\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Before you begin<a class=\"headerlink\" href=\"#before-you-begin\" title=\"Link to this heading\">#</a></h2><p>Before running a Concordium node you will need to</p>", "a[href=\"../smart-contracts-v0/guides/deploy-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Amount</span></code><a class=\"headerlink\" href=\"#amount\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string in micro CCD. Example of 42 CCD:</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-dapp.html#installation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Installation<a class=\"headerlink\" href=\"#installation\" title=\"Link to this heading\">#</a></h3><p>You can find more information on how to set up the Concordium Wallet for Web in <a class=\"reference internal\" href=\"../net/browser-wallet/setup-browser-wallet.html#setup-browser-wallet\"><span class=\"std std-ref\">Setup the Concordium Wallet for web</span></a>.</p>", "a[href=\"../smart-contracts/references/schema-json.html#map\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Map</span></code><a class=\"headerlink\" href=\"#map\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with key-value pairs, depending on the type of\nthe key and the type of value. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Map(AccountAddress,</span> <span class=\"pre\">U64)</span></code>:</p>", "a[href=\"../smart-contracts/general/contract-instances.html#instantiate-a-smart-contract-on-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instantiate a smart contract on-chain<a class=\"headerlink\" href=\"#instantiate-a-smart-contract-on-chain\" title=\"Link to this heading\">#</a></h2><p>Every smart contract must contain a function for creating smart contract\ninstances. Such a function is referred to as the <em>init function</em>.</p><p>To create a smart contract instance, an account sends a special transaction with\na reference to the deployed smart contract module and the name of the\ninit function to use for instantiation.</p>", "a[href=\"references/concordium-client.html#add-accounts-and-keys\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Add accounts and keys<a class=\"headerlink\" href=\"#add-accounts-and-keys\" title=\"Link to this heading\">#</a></h3><p>See also the <a class=\"reference internal\" href=\"references/manage-accounts.html#managing-accounts\"><span class=\"std std-ref\">Managing accounts</span></a> section.</p>", "a[href=\"guides/add-delegation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Delegate to a staking pool or passive delegation<a class=\"headerlink\" href=\"#delegate-to-a-staking-pool-or-passive-delegation\" title=\"Link to this heading\">#</a></h1><p>You can delegate stake from an account to a <a class=\"reference internal\" href=\"resources/glossary.html#term-Staking-pool\"><span class=\"xref std std-term\">staking pool</span></a> or to <a class=\"reference internal\" href=\"resources/glossary.html#term-Passive-delegation\"><span class=\"xref std std-term\">passive delegation</span></a>.</p><p>When you delegate some stake to a staking pool, it can influence the chances of the pool owner of the staking pool being selected to produce a block and receive block rewards and thus delegation rewards to you.</p>", "a[href=\"../smart-contracts-v0/general/contract-schema.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nstate of a smart contract instance and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#metadata\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">metadata</span></code><a class=\"headerlink\" href=\"#metadata\" title=\"Link to this heading\">#</a></h3><p>JSON Object containing the chain meta data, see <a class=\"reference internal\" href=\"#context-metadata\"><span class=\"std std-ref\">Chain meta data</span></a> for a\nreference of the fields.</p>", "a[href=\"../smart-contracts/tutorials/voting/voting-dapp.html#running-the-web-front-end\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running the web front end<a class=\"headerlink\" href=\"#running-the-web-front-end\" title=\"Link to this heading\">#</a></h2><p>You have successfully added the Concordium Wallet for Web to your browser in the previous section.\nIn the next step of the tutorial, you are going to clone a voting demo front end written with the <a class=\"reference external\" href=\"https://reactjs.org/\">React library</a>\nand run it locally. The demo front end has the required packages installed to connect to the Concordium Wallet for Web\nand implements common flows to deal with the different states that the Concordium Wallet for Web could be in. For example,\nthe front end will display a <code class=\"docutils literal notranslate\"><span class=\"pre\">connect</span> <span class=\"pre\">wallet</span></code> button when loading the website. Furthermore, the front end has flows\nto react to the events when the user switches the account in the browser wallet or\nconnects/disconnects an account in the Concordium Wallet for Web to update the front-end state accordingly.</p>", "a[href=\"guides/company-identities.html#id-recovery\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Identity recovery<a class=\"headerlink\" href=\"#id-recovery\" title=\"Link to this heading\">#</a></h3><p>If the identity object used to create credentials is lost, it can be recovered from the identity provider by generating a recovery request using the 24 words used when the identity was originally created. Recover identity generates an identity recovery request to be sent to the identity provider.</p>", "a[href=\"../smart-contracts/guides/interact-instance.html#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"guides/deciding-wallet.html#how-the-wallets-store-your-private-keys\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">How the wallets store your private keys<a class=\"headerlink\" href=\"#how-the-wallets-store-your-private-keys\" title=\"Link to this heading\">#</a></h2><p>One of the main differences between the wallets lies in how they store your private keys.</p>", "a[href=\"../smart-contracts/references/simulate-context.html#init-context\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Init context<a class=\"headerlink\" href=\"#init-context\" title=\"Link to this heading\">#</a></h2><p>The context accessible in an init function.</p><p>Example of context</p>", "a[href=\"guides/deciding-wallet.html#which-wallet-is-best-for-you\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Which wallet is best for you?<a class=\"headerlink\" href=\"#which-wallet-is-best-for-you\" title=\"Link to this heading\">#</a></h2><p>The wallets work on two different environments: the Desktop Wallet on a computer, the Concordium Wallet for Web on any device with a web browser, and Concordium Legacy Wallet and Concordium Wallet for Mobile on a phone. The Concordium Legacy Wallet and Concordium Wallet for Mobile are more accessible and easier to use on a day-to-day basis whereas the Desktop Wallet has an extra layer of security in the form of a LEDGER device.</p>", "a[href=\"references/grpc2.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">gRPC V2 documentation<a class=\"headerlink\" href=\"#grpc-v2-documentation\" title=\"Link to this heading\">#</a></h1><p>The gRPC v2 API has a much more detailed schema definition, and does not rely on JSON responses as the now deprecated gRPC v1 API did. It also supports streaming responses in cases where there is a lot of data, and supports subscribing to new blocks.</p><p>The V2 interface enables access to the same data as the now deprecated V1 interface, but in addition supports new endpoints, such as the ability to retrieve the entire smart contract state.</p>", "a[href=\"nodes/ubuntu.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Ubuntu nodes<a class=\"headerlink\" href=\"#ubuntu-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Ubuntu.</p>", "a[href=\"guides/run-node.html#enable-inbound-connections\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Enable inbound connections<a class=\"headerlink\" href=\"#enable-inbound-connections\" title=\"Link to this heading\">#</a></h3><p>If you are running your node behind a firewall, or behind your home\nrouter, then you will probably only be able to connect to other nodes,\nbut other nodes will not be able to initiate connections to your node.\nThis is perfectly fine, and your node will fully participate in the\nConcordium network. It will be able to send transactions and,\n<a class=\"reference internal\" href=\"guides/become-baker.html#become-a-baker\"><span class=\"std std-ref\">if so configured</span></a>, to produce blocks.</p><p>However you can also make your node an even better network participant by\nenabling inbound connections. The sample configuration above makes the node\nlisten on port <code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> for inbound connections. Depending on your network and\nplatform configuration you will either need to forward an external port to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">8889</span></code> on your router, open it in your firewall, or both. The details of how\nthis is done will depend on your configuration.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#only-in-receive-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Only in receive function<a class=\"headerlink\" href=\"#only-in-receive-function\" title=\"Link to this heading\">#</a></h2><p>Functions only accessible for smart contract receive functions.</p>", "a[href=\"references/developer-tools.html#decrypt-encrypted-output\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Decrypt encrypted output<a class=\"headerlink\" href=\"#decrypt-encrypted-output\" title=\"Link to this heading\">#</a></h2><p>Some Concordium tools, such as the Concordium Legacy Wallet, sometimes produce encrypted output. These files can be decrypted and inspected using the <strong>utils</strong> tool . You can download the tool from <a class=\"reference internal\" href=\"installation/downloads.html#downloads\"><span class=\"std std-ref\">Installation downloads</span></a>.</p><p>To encrypt, enter:</p>", "a[href=\"../smart-contracts/onboarding-guide-ethereum-developers/faq.html#deploying-and-initializing-smart-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying and initializing smart contracts<a class=\"headerlink\" href=\"#deploying-and-initializing-smart-contracts\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_entrypoint_size\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_entrypoint_size\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_entrypoint_size</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Get the size of the entrypoint that was named. See <code class=\"docutils literal notranslate\"><span class=\"pre\">get_receive_entrypoint</span></code>\nfor more information on the use of this host function.</p></dd>", "a[href=\"../smart-contracts-v0/guides/unit-test-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to write unit tests for a smart contract written in\nRust.\nFor testing a smart contract Wasm module, see <a class=\"reference internal\" href=\"../smart-contracts-v0/guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"mobile-wallet-gen2/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile FAQ<a class=\"headerlink\" href=\"#mw-gen2-faq\" title=\"Link to this heading\">#</a></h1>", "a[href=\"concepts/concepts-transactions.html#tools\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Tools<a class=\"headerlink\" href=\"#tools\" title=\"Link to this heading\">#</a></h2><h3>The Desktop Wallet<a class=\"headerlink\" href=\"#the-desktop-wallet\" title=\"Link to this heading\">#</a></h3><p>The Desktop Wallet is a digital wallet that enables you to create and manage your Concordium identities, credentials, and accounts from your desktop and to create transactions such as sending CCD, adding a validator, and exporting and importing account information.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The wCCD smart contract<a class=\"headerlink\" href=\"#the-wccd-smart-contract\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed wCCD token on testnet.\nYou are going to write a basic web front end example that can read from and write to the deployed wCCD smart contract on testnet.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/wCCD/wCCD-introduction.html#wccd-introduction\"><span class=\"std std-ref\">first part</span></a>, you will learn more about the wCCD token protocol.</p>", "a[href=\"guides/run-node.html#retrieve-node-logs\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Retrieve node logs<a class=\"headerlink\" href=\"#retrieve-node-logs\" title=\"Link to this heading\">#</a></h4><p>The sample configuration presented above logs data using Docker\u2019s default\nlogging infrastructure. To retrieve the logs for the node run:</p>", "a[href=\"../smart-contracts/tutorials/smartContractUpgrade/smartContractUpgrade.html#executing-an-upgrade\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Executing an upgrade<a class=\"headerlink\" href=\"#executing-an-upgrade\" title=\"Link to this heading\">#</a></h2><p>Clone the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade\">smart contract upgrade example</a>.</p>", "a[href=\"guides/multisig-transfer.html#generate-the-transaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Generate the transaction<a class=\"headerlink\" href=\"#generate-the-transaction\" title=\"Link to this heading\">#</a></h2><p>There are two ways that you can generate the transaction:</p>", "a[href=\"../smart-contracts/tutorials/sponsoredTransactions/sponsoredTransactionsFrontendAndBackend.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sponsored Transactions Front End and Back End<a class=\"headerlink\" href=\"#sponsored-transactions-front-end-and-back-end\" title=\"Link to this heading\">#</a></h1><p>The goal of this part of the tutorial is to set up the front end and the back end locally and to understand the two flows that the dApp provides.</p><p>You can explore the <a class=\"reference external\" href=\"https://sponsored.testnet.concordium.com\">hosted sponsored transaction service</a>.\nThe sponsored transaction service consists of a front end and a back end. You can start your own service by\nfollowing the instructions in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/frontend/README.md\">front end README.md file</a>\nand then the instructions in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/backend/README.md\">back end README.md file</a>.\nAlternatively, follow the steps in the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-dapp-examples/blob/main/sponsoredTransactions/README.md\">README.md file</a> to deploy the Docker container.\nThe docker container will set up the front end as well as the back end.</p>", "a[href=\"resources/ccd-scan-nodes.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Nodes overview<a class=\"headerlink\" href=\"#ccdscan-nodes-overview\" title=\"Link to this heading\">#</a></h1><p>Nodes shows information about the nodes on Mainnet/Testnet in alphabetical order. The list contains the following information:</p>", "a[href=\"resources/ccd-scan.html#home\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Home<a class=\"headerlink\" href=\"#home\" title=\"Link to this heading\">#</a></h3><p>On the Home page that appears when you navigate to CCDScan, you see the following information:</p>", "a[href=\"../smart-contracts-v0/guides/build-schema.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>First, ensure you have <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> installed and if not the guide\n<a class=\"reference internal\" href=\"../smart-contracts-v0/guides/setup-tools.html#setup-tools-v0\"><span class=\"std std-ref\">Install tools for development</span></a> will help you.</p><p>You also need the Rust source code of the smart contract you wish to build a\nschema for.</p>", "a[href=\"../smart-contracts/tutorials/counter/counter-contract.html#build-deploy-and-initialize-the-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build, deploy, and initialize the contract<a class=\"headerlink\" href=\"#build-deploy-and-initialize-the-contract\" title=\"Link to this heading\">#</a></h2><p>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist</span></code> folder to keep the schema output file and Wasm compiled contract in and run the build command.</p>", "a[href=\"../smart-contracts/references/host-fns.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Link to this heading\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/deploying.html#smashing-the-piggy-bank-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smashing the piggy bank smart contract<a class=\"headerlink\" href=\"#smashing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Smash the piggy bank contract to test that you can invoke this entry point. After smashing the piggy bank you cannot enter any additional CCD into the piggy bank anymore.</p>", "a[href=\"../smart-contracts-v0/guides/interact-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"web3-id/index.html#issuance-flow-for-verifiable-credentials\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Issuance flow for verifiable credentials<a class=\"headerlink\" href=\"#issuance-flow-for-verifiable-credentials\" title=\"Link to this heading\">#</a></h2><p>The following diagram shows the issuance flow for verifiable credentials.</p>", "a[href=\"../smart-contracts-v0/guides/initialize-contract.html#initialization\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialization<a class=\"headerlink\" href=\"#initialization\" title=\"Link to this heading\">#</a></h2><p>To initialize an instance of the parameterless smart contract <code class=\"docutils literal notranslate\"><span class=\"pre\">my_contract</span></code>\nfrom a deployed module with reference\n<code class=\"docutils literal notranslate\"><span class=\"pre\">9eb82a01d96453dbf793acebca0ce25c617f6176bf7a564846240c9a68b15fd2</span></code> while\nallowing up to 10000 NRG to be used, run the\nfollowing command:</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Piggy bank contract<a class=\"headerlink\" href=\"#piggy-bank-contract\" title=\"Link to this heading\">#</a></h2><p>The contract you are going to build in this tutorial is going to act as a classic\npiggy bank. Everyone should be able to put money in the form of CCD into it, but only the owner\ncan smash it and retrieve the CCD inside. Once the piggy bank has been\nsmashed, it should not be possible to add CCD to it.</p><p>The piggy-bank smart contract is going to contain a function for setting up a\nnew piggy bank and two functions for updating a piggy bank; one is for everyone\nto use for inserting CCD, the other is for the owner to smash the piggy bank and\nprevent further interaction. It will also contain a method for everyone to view\nthe current state and balance of the piggy bank.</p>", "a[href=\"indexers/subquery.html#running-and-hosting-your-concordium-subquery-apis\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running and Hosting your Concordium SubQuery APIs<a class=\"headerlink\" href=\"#running-and-hosting-your-concordium-subquery-apis\" title=\"Link to this heading\">#</a></h2><p>SubQuery is open-source, meaning you have the freedom to run it in the following three ways:</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">FAQ<a class=\"headerlink\" href=\"#faq\" title=\"Link to this heading\">#</a></h1><p>The following Frequently Asked Questions about Concordium focuses on helping developers with a Solana background to understand the Concordium blockchain and its smart contract ecosystem.</p><p>Feel free to participate and add your questions to the <a class=\"reference external\" href=\"https://support.concordium.software/\">Concordium software support channels</a>.</p>", "a[href=\"nodes/node-requirements.html#node-metrics\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node metrics<a class=\"headerlink\" href=\"#node-metrics\" title=\"Link to this heading\">#</a></h2><p>You can use the <a class=\"reference external\" href=\"https://prometheus.io/download/\">Prometheus monitoring system</a> to export node metrics for monitoring your node performance. For information about configuration and the exposed metrics, see the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-node/blob/main/docs/prometheus-exporter.md\">documentation in the repository</a>.</p><p>For node runners using Grafana\u00ae, Concordium provides a node performance dashboard using the exposed Prometheus metrics. You can <a class=\"reference external\" href=\"https://grafana.com/grafana/dashboards/18983-concordium-node-external/\">download it from the Grafana marketplace</a>.</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html#initializing-the-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing the smart contract<a class=\"headerlink\" href=\"#initializing-the-smart-contract\" title=\"Link to this heading\">#</a></h2><p>After deploying a contract you have to initialize it. It\u2019s like object-oriented programming: you create a class which is a module, and then you initialize it to create an object. It is the same here. An object of a class is a way to store both states of the class and its functionality. In order to initialize an instance of the contract you need the module name and contract, then run the following command.</p>", "a[href=\"../smart-contracts/general/contract-schema.html#the-schema-format\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The schema format<a class=\"headerlink\" href=\"#the-schema-format\" title=\"Link to this heading\">#</a></h2><p>A schema can contain</p>", "a[href=\"release-notes/release-notes-lp.html#smart-contract-libraries\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract Libraries<a class=\"headerlink\" href=\"#smart-contract-libraries\" title=\"Link to this heading\">#</a></h3>", "a[href=\"nodes/node-requirements.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node on Concordium<a class=\"headerlink\" href=\"#run-a-node-on-concordium\" title=\"Link to this heading\">#</a></h1><p>When you run a node on the Concordium blockchain, you are participating in the Concordium blockchain by validating transactions.</p><p>Nodes are required for most things, from using a Concordium wallet to validation. You can choose to run a node yourself or you can have a third-party provider run a node for you. If you choose to run the node yourself, you can\nchoose from four different platforms to run your node: Ubuntu, Windows, MacOS, or Docker/Linux.</p>", "a[href=\"guides/multisig-transfer.html#receive-signatures-from-co-signers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Receive signatures from co-signers<a class=\"headerlink\" href=\"#receive-signatures-from-co-signers\" title=\"Link to this heading\">#</a></h2><p>When the co-signers have signed the transaction, they return the signed transaction proposal to you, and you have to import the files into the Desktop Wallet before you can submit the transaction to the blockchain.</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create a multi-signature CCD transfer in the Desktop Wallet<a class=\"headerlink\" href=\"#create-a-multi-signature-ccd-transfer-in-the-desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>A multi-signature transfer of CCD is a transaction that\nrequires two or more co-signers to sign with their private keys to\nauthorize the transaction.</p>", "a[href=\"nodes/troubleshoot-docker.html#node-crash-or-database-corruption\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node crash or database corruption<a class=\"headerlink\" href=\"#node-crash-or-database-corruption\" title=\"Link to this heading\">#</a></h2><p>A node crash or database corruption is the problem if:</p>", "a[href=\"resources/ccd-scan-accounts.html#sender-account-details\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Sender/Account details<a class=\"headerlink\" href=\"#sender-account-details\" title=\"Link to this heading\">#</a></h2><p>When you select a sender or account, the following appears.</p>", "a[href=\"guides/create-proofs.html#structure-a-membership-proof\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Structure a membership proof<a class=\"headerlink\" href=\"#structure-a-membership-proof\" title=\"Link to this heading\">#</a></h3><p>In the example below, the proof checks that the wallet owner is a citizen of one of the Nordic countries (Finland, Denmark, Sweden, Norway, or Iceland).</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#submit-the-transaction-to-the-blockchain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Submit the transaction to the blockchain<a class=\"headerlink\" href=\"#submit-the-transaction-to-the-blockchain\" title=\"Link to this heading\">#</a></h2><p>When you have received and added all the required signatures, you can submit the transaction to the blockchain.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_entry_resize\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_entry_resize\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_entry_resize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">entry</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_size</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Resize entry to the new value (truncate if new size is smaller).\nIf the new size is bigger, the additional state is initialized with <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p></dd>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.get_receive_entrypoint\"]": "<dt class=\"sig sig-object py\" id=\"concordium.get_receive_entrypoint\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_receive_entrypoint</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em><span class=\"sig-paren\">)</span></dt><dd><p>Write the receive entrypoint name into the given location.\nIt is assumed that the location contains enough space to write the name.\nFor regular receive methods, the entrypoint name will always be the same as\nthe receive method\u2019s entrypoint name. But for fallback entrypoints, it might\ndiffer.</p></dd>", "a[href=\"nodes/node-runner-service-configuration.html#rpc-address\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">rpc.address<a class=\"headerlink\" href=\"#rpc-address\" title=\"Link to this heading\">#</a></h3><p>(string; optional)</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#senderpolicies\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">senderPolicies</span></code><a class=\"headerlink\" href=\"#senderpolicies\" title=\"Link to this heading\">#</a></h3><p>JSON array of the policies of the sender, see <a class=\"reference internal\" href=\"#context-sender-policy-v0\"><span class=\"std std-ref\">Policy</span></a> for a\nreference a policy.</p>", "a[href=\"../smart-contracts-v0/references/simulate-context.html#selfaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">selfAddress</span></code><a class=\"headerlink\" href=\"#selfaddress\" title=\"Link to this heading\">#</a></h3><p>JSON object describing the contract address of the current smart contract\ninstance.\nMust contain the <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">subindex</span></code> fields with JSON numbers.</p><p>Example:</p>", "a[href=\"nodes/node-runner-service-configuration.html#name\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">name<a class=\"headerlink\" href=\"#name\" title=\"Link to this heading\">#</a></h3><p>(string; default: <em>nodeid</em>)</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#work-with-parameters\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Work with parameters<a class=\"headerlink\" href=\"#work-with-parameters\" title=\"Link to this heading\">#</a></h3><p>Parameters to the init and receive functions are represented as byte arrays.\nWhile the byte arrays can be used directly, they can also be deserialized into\nstructured data.</p><p>The simplest way to deserialize a parameter is through the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html#tymethod.get\">get()</a> function of\nthe <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html\">Get</a> trait.</p>", "a[href=\"release-notes/release-notes-lp.html#mw-gen2-for-ios\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Wallet for Mobile for iOS<a class=\"headerlink\" href=\"#mw-gen2-for-ios\" title=\"Link to this heading\">#</a></h3>", "a[href=\"references/query-node.html#id3\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#id3\" title=\"Link to this heading\">#</a></h4><p>See the <a class=\"reference internal\" href=\"resources/glossary.html#glossary\"><span class=\"std std-ref\">glossary</span></a> for detailed descriptions of the individual fields.</p>", "a[href=\"../smart-contracts/guides/compile-module.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#duration\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Duration</span></code><a class=\"headerlink\" href=\"#duration\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string as a list of time measures separated by whitespace.\nA measure is a number followed by the unit and no whitespace between is allowed.\nEvery measure is accumulated into the total duration. The string is allowed to\ncontain any number of measures with the same unit in no particular order.</p>", "a[href=\"guides/run-node-macos.html#node-collector-configuration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node collector configuration<a class=\"headerlink\" href=\"#node-collector-configuration\" title=\"Link to this heading\">#</a></h2><p>Since version 5.3.2 of the node, the collector uses the GRPC V2 interface. Therefore, in order to run the collector, it is required that the node which the collector connects to has the GRPC V2 interface enabled.</p>", "a[href=\"references/query-node.html#id1\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h4><p>The output shows that the account with the local name <code class=\"docutils literal notranslate\"><span class=\"pre\">my-account</span></code></p>", "a[href=\"web3-id/wallet.html#add-verifiable-credentials-to-the-wallet\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add verifiable credentials to the wallet<a class=\"headerlink\" href=\"#add-verifiable-credentials-to-the-wallet\" title=\"Link to this heading\">#</a></h2><p>When choosing to add verifiable credentials from an issuer, make sure that you <em>trust</em> the issuer to whom you are revealing information about yourself.</p>", "a[href=\"../smart-contracts/references/schema-json.html#contractname\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ContractName</span></code><a class=\"headerlink\" href=\"#contractname\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with a <code class=\"docutils literal notranslate\"><span class=\"pre\">contract</span></code> field of type JSON string.\nExample:</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/smart-contract.html#contract-burn-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Contract burn function<a class=\"headerlink\" href=\"#contract-burn-function\" title=\"Link to this heading\">#</a></h3><p>Based on the requirements, you should be able to call tokens. In order to do that, you\u2019ll be adding the <code class=\"docutils literal notranslate\"><span class=\"pre\">contract</span> <span class=\"pre\">burn()</span></code> function in the existing cis2-multi contract.</p><p>But first, you need another parameter to get the information about the tokens that will be burned. Create a struct, called <code class=\"docutils literal notranslate\"><span class=\"pre\">BurnParams</span></code>; you will need <code class=\"docutils literal notranslate\"><span class=\"pre\">token_id</span></code> and the amount to be burned.</p>", "a[href=\"../smart-contracts/tutorials/fungible-tokens/mint-xfer.html#transfer-tokens\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer tokens<a class=\"headerlink\" href=\"#transfer-tokens\" title=\"Link to this heading\">#</a></h2><p>Now you will test transferring some tokens to another account and checking the balances and the max/circulating supplies. Create a JSON file like the one below to set the transfer parameters. Transfer <strong>11</strong> tokens with the ID <strong>01</strong> to an account.</p>", "a[href=\"desktop-wallet/sign-transaction.html#import-and-sign-a-proposal\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Import and sign a proposal<a class=\"headerlink\" href=\"#import-and-sign-a-proposal\" title=\"Link to this heading\">#</a></h2>", "a[href=\"references/query-node.html#account-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Account state<a class=\"headerlink\" href=\"#account-state\" title=\"Link to this heading\">#</a></h2><h3>List accounts<a class=\"headerlink\" href=\"#list-accounts\" title=\"Link to this heading\">#</a></h3><p>List the addresses of all accounts on the chain as of a specific block:</p>", "a[href=\"../smart-contracts/tutorials/nft-minting/build-smart-contract.html#build-your-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build your smart contract<a class=\"headerlink\" href=\"#build-your-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Now you are ready to build your contract. Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/cis2-nft</span></code> folder to keep your Wasm compiled output file and schema file first and then build it with the following command.</p>", "a[href=\"../smart-contracts/tutorials/wCCD/wCCD-introduction.html#contract-addresses\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Contract addresses<a class=\"headerlink\" href=\"#contract-addresses\" title=\"Link to this heading\">#</a></h2><p>The Concordium foundation maintains the canonical wCCD smart contract and promotes its\nusage to create a coherent overall smart contract ecosystem on the Concordium blockchain. The wCCD\nsmart contract deployed can be upgraded to add additional features and to improve the smart contract based on the\nnewest science and research done at Concordium. The protocol is free of charge and no commissions are collected by Concordium.</p>", "a[href=\"concepts/concepts-baker.html#staking-pool\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Staking pool<a class=\"headerlink\" href=\"#staking-pool\" title=\"Link to this heading\">#</a></h2><p>You have the option to open a <a class=\"reference internal\" href=\"resources/glossary.html#term-Staking-pool\"><span class=\"xref std std-term\">staking pool</span></a>. A staking pool allows others who want to earn rewards to do so without the need to run a node or become a validator themselves. To do this they <a class=\"reference internal\" href=\"concepts/concepts-delegation.html#delegation-concept\"><span class=\"std std-ref\">delegate</span></a> an amount of stake to your staking pool which then increases your stake and your <a class=\"reference internal\" href=\"resources/glossary.html#term-Winning-probability\"><span class=\"xref std std-term\">chances of winning the lottery</span></a> to produce a block. You can also choose not to open a pool, in which case only your own stake applies toward the lottery. You can always open a pool later.</p><p>The maximum size of a pool is 5% of all stake in pools (i.e., excluding passive delegation). Any stake above this limit will not contribute towards earning rewards. It isn\u2019t possible to add more stake to exceed the limit, but reward restaking can push it over the limit, or if a lot of other validators unstake and the thresholds change, the staking pool can exceed the limit.</p>", "a[href=\"nodes/troubleshoot-macos.html#node-crash-or-database-corruption\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node crash or database corruption<a class=\"headerlink\" href=\"#node-crash-or-database-corruption\" title=\"Link to this heading\">#</a></h2><p>A node crash or database corruption is the problem if:</p>", "a[href=\"desktop-wallet/multisig-simple-transfer.html#generate-and-sign-the-transaction-proposal-on-the-ledger-device\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Generate and sign the transaction proposal on the LEDGER device<a class=\"headerlink\" href=\"#generate-and-sign-the-transaction-proposal-on-the-ledger-device\" title=\"Link to this heading\">#</a></h3>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#basic-navigation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic navigation<a class=\"headerlink\" href=\"#basic-navigation\" title=\"Link to this heading\">#</a></h2><p>In the wallet you have some navigation options.</p>", "a[href=\"../smart-contracts/guides/upgradeable-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a contract upgradeable<a class=\"headerlink\" href=\"#make-a-contract-upgradeable\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to make a Rust smart contract upgradeable.</p><p>Immutable smart contracts come with the drawback that bugs cannot be fixed, new features and cost optimizations cannot be implemented.\nFor some decentralized applications this is a problem and these need some way to upgrade the smart contract code.</p>", "a[href=\"../smart-contracts/guides/no-std.html#building-the-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building the module<a class=\"headerlink\" href=\"#building-the-module\" title=\"Link to this heading\">#</a></h2><p>In order to use the nightly toolchain, add <code class=\"docutils literal notranslate\"><span class=\"pre\">+nightly</span></code> right after\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span></code>:</p>", "a[href=\"../smart-contracts/references/schema-json.html#list\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">List</span></code><a class=\"headerlink\" href=\"#list\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with items, depending on the\nnested type. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">List(U16)</span></code>:</p>", "a[href=\"references/query-node.html#id2\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#id2\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts/references/schema-json.html#amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Amount</span></code><a class=\"headerlink\" href=\"#amount\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string in micro CCD. Example of 42 CCD:</p>", "a[href=\"browser-wallet/setup-browser-wallet.html#change-network\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Change network<a class=\"headerlink\" href=\"#change-network\" title=\"Link to this heading\">#</a></h3><p>You can use the wallet on both Mainnet and Testnet without the need for a separate application. Use the <strong>Network Settings</strong> to switch between Mainnet and Testnet.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#struct\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Struct</span></code><a class=\"headerlink\" href=\"#struct\" title=\"Link to this heading\">#</a></h3><p>Supplied as the fields directly, see below.</p>", "a[href=\"../smart-contracts/tutorials/piggy-bank/writing.html#inserting-ccd\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inserting CCD<a class=\"headerlink\" href=\"#inserting-ccd\" title=\"Link to this heading\">#</a></h3><p>The first interaction you will specify for your piggy bank is how to insert CCD into it.\nYou start by defining a receive function as:</p>", "a[href=\"nodes/troubleshoot-ubuntu.html#node-crash-or-database-corruption\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node crash or database corruption<a class=\"headerlink\" href=\"#node-crash-or-database-corruption\" title=\"Link to this heading\">#</a></h2><p>A node crash or database corruption is the problem if:</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#concordium-smart-contracts\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts<a class=\"headerlink\" href=\"#concordium-smart-contracts\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/tutorials/eSealing/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">An eSealing dApp<a class=\"headerlink\" href=\"#an-esealing-dapp\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed eSealing smart contract on testnet and explore the associated website.</p>", "a[href=\"guides/export-import.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Make a backup of identities, accounts, and addresses<a class=\"headerlink\" href=\"#make-a-backup-of-identities-accounts-and-addresses\" title=\"Link to this heading\">#</a></h1><p>To make sure that you have a backup of your accounts, identities, and addresses, Concordium strongly recommends that if you are using Concordium Legacy Wallet or Desktop Wallet, you export the data to a file you can store in a safe location. The backup will ensure that you can recover your accounts, identities, and addresses if your Wallet database becomes damaged or if, for some reason, you can\u2019t access the Wallet.</p>", "a[href=\"resources/ccd-scan-accounts.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">CCDScan Accounts overview<a class=\"headerlink\" href=\"#ccdscan-accounts-overview\" title=\"Link to this heading\">#</a></h1><p>The Accounts overview shows information about accounts during the selected time range in the filter.</p>", "a[href=\"guides/become-baker.html#start-validation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Start validation<a class=\"headerlink\" href=\"#start-validation\" title=\"Link to this heading\">#</a></h2><h3>Import the account<a class=\"headerlink\" href=\"#import-the-account\" title=\"Link to this heading\">#</a></h3><p>This section provides a brief description of how to import an account using the Concordium Client.</p>", "a[href=\"../smart-contracts-v0/guides/local-simulate.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure you have <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> installed, if not follow the guide\n<a class=\"reference internal\" href=\"../smart-contracts-v0/guides/setup-tools.html#setup-tools-v0\"><span class=\"std std-ref\">Install tools for development</span></a>.\nYou will also need a smart contract module in Wasm to simulate.</p>", "a[href=\"mobile-wallet/share-address-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Find and share your account address<a class=\"headerlink\" href=\"#find-and-share-your-account-address\" title=\"Link to this heading\">#</a></h1><p>If you need to share your account address with someone, you can find the address on the account page.</p>", "a[href=\"../smart-contracts/guides/migrate-contracts.html#migrating-receive-methods\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Migrating <code class=\"docutils literal notranslate\"><span class=\"pre\">receive</span></code> methods<a class=\"headerlink\" href=\"#migrating-receive-methods\" title=\"Link to this heading\">#</a></h2><p>To migrate a typical <code class=\"docutils literal notranslate\"><span class=\"pre\">receive</span></code> method you must change the following:</p>", "a[href=\"../smart-contracts/general/introduction.html#additional-reading\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Additional reading<a class=\"headerlink\" href=\"#additional-reading\" title=\"Link to this heading\">#</a></h3><p>For information about the lifecycle of smart contracts, see <a class=\"reference internal\" href=\"../smart-contracts/general/contract-lifecycle.html#sc-lifecycle\"><span class=\"std std-ref\">Lifecycle of a smart contract</span></a>. You can also continue reading about <a class=\"reference internal\" href=\"../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">contract modules</span></a>, <a class=\"reference internal\" href=\"../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">contract instances</span></a>, and <a class=\"reference internal\" href=\"../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>. Also, read the <a class=\"reference internal\" href=\"../smart-contracts/best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"browser-wallet/connect-app.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Connect dApps to wallets<a class=\"headerlink\" href=\"#connect-dapps-to-wallets\" title=\"Link to this heading\">#</a></h1><p>You can connect the Concordium Wallet for Web and Concordium Wallet for Mobile to a <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Decentralized_application\">dApp</a> that has a front end interface so that you can pay for services. You can initiate the request from within the Concordium Wallet for Web or Concordium Wallet for Mobile, or the dApp can initiate a connection request that you must confirm. Connection can be made by either scanning a QR code or from a link to the dApp service.</p>", "a[href=\"../smart-contracts-v0/guides/no-std.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build using <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#build-using-no-std\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to enable <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code> for your rust smart contract,\npotentially reducing the size of the resulting Wasm module by several kilobytes.</p>", "a[href=\"../smart-contracts/references/host-fns.html#logging-events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Logging events<a class=\"headerlink\" href=\"#logging-events\" title=\"Link to this heading\">#</a></h2>", "a[href=\"../smart-contracts/references/simulate-context.html#receive-context\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Receive context<a class=\"headerlink\" href=\"#receive-context\" title=\"Link to this heading\">#</a></h2><p>The context accessible in a receive function.</p><p>Example of context:</p>", "a[href=\"../smart-contracts/guides/setup-tools.html#concordium-software\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium software<a class=\"headerlink\" href=\"#concordium-software\" title=\"Link to this heading\">#</a></h2><p>The tool to deploy and interact with smart contracts is\n<a class=\"reference internal\" href=\"../net/references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">concordium-client</span></a>. It is distributed as part of the\n<a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> package.</p><p>To ease deployment and initialization, you can use the <a class=\"reference external\" href=\"https://sctools.mainnet.concordium.software/\">Smart contract deploy and initialize tool</a>. It works with the Concordium Wallet for Web to deploy and initialize smart contracts to Mainnet and Testnet.</p>", "a[href=\"desktop-wallet/dw-lp.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Desktop Wallet<a class=\"headerlink\" href=\"#desktop-wallet\" title=\"Link to this heading\">#</a></h1><p>The guides here are specifically for Desktop Wallet.</p>", "a[href=\"mobile-wallet-gen2/setup-mobile-wallet.html#get-started\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Get started<a class=\"headerlink\" href=\"#get-started\" title=\"Link to this heading\">#</a></h2>", "a[href=\"references/concordium-client.html#show-account-aliases\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Show account aliases<a class=\"headerlink\" href=\"#show-account-aliases\" title=\"Link to this heading\">#</a></h4><p>This generates the output:</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_iterate_prefix\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_iterate_prefix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_iterate_prefix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prefix_start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">prefix_length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i64</span></span></span></dt><dd><p>Construct an iterator over a part of the tree. This <strong>locks the part of\nthe tree that has the given prefix</strong>. Locking means that no\ndeletions or insertions of entries may occur in that subtree.</p></dd>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/index.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"../smart-contracts-v0/general/contract-module.html#limitations\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Limitations<a class=\"headerlink\" href=\"#limitations\" title=\"Link to this heading\">#</a></h3><p>The blockchain environment is very particular in the sense that each node must\nbe able to execute the contract in exactly the same way, using exactly the same\namount of resources. Otherwise nodes would fail to reach consensus on the\nstate of the chain. For this reason smart contracts need to be written in a restricted\nsubset of Wasm.</p>", "a[href=\"../smart-contracts/onboarding-guide-solana-developers/overview.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Onboarding for Solana developers<a class=\"headerlink\" href=\"#onboarding-for-solana-developers\" title=\"Link to this heading\">#</a></h1><p>This overview outlines the main differences of account models and smart contract functionality between Solana and Concordium. <a class=\"reference internal\" href=\"../smart-contracts/onboarding-guide-solana-developers/faq.html#solana-faq\"><span class=\"std std-ref\">The FAQ</span></a> answers commonly asked questions.</p>", "a[href=\"../smart-contracts/guides/setup-tools.html#rust-and-cargo\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Rust and Cargo<a class=\"headerlink\" href=\"#rust-and-cargo\" title=\"Link to this heading\">#</a></h2><p>First, <a class=\"reference external\" href=\"https://rustup.rs/\">install rustup</a>, which installs both <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> and <a class=\"reference external\" href=\"https://doc.rust-lang.org/cargo/\">Cargo</a> on your\nmachine.</p><p>Then use <code class=\"docutils literal notranslate\"><span class=\"pre\">rustup</span></code> to install the Wasm target, which is used for compilation:</p>", "a[href=\"../smart-contracts/guides/interact-instance.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#array\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Array</span></code><a class=\"headerlink\" href=\"#array\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON array with the length specified in the\nschema and items depending on the nested type. Example of <code class=\"docutils literal notranslate\"><span class=\"pre\">Array(12,</span> <span class=\"pre\">U8)</span></code>:</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#contractaddress\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ContractAddress</span></code><a class=\"headerlink\" href=\"#contractaddress\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> field and\noptionally <code class=\"docutils literal notranslate\"><span class=\"pre\">subindex</span></code> field, both JSON numbers. Example:</p>", "a[href=\"mobile-wallet/change-passcode-mw.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Update your passcode and biometric settings<a class=\"headerlink\" href=\"#update-your-passcode-and-biometric-settings\" title=\"Link to this heading\">#</a></h1><p>If you want to change your passcode or enable/disable your biometrics (on a mobile device), following the directions below for your wallet.</p>", "a[href=\"guides/multi-credentials.html#submit-the-transaction-to-the-blockchain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Submit the transaction to the blockchain<a class=\"headerlink\" href=\"#submit-the-transaction-to-the-blockchain\" title=\"Link to this heading\">#</a></h2><p>When you have received and added all the required signatures, you can submit the transaction to the blockchain.</p>", "a[href=\"resources/ccd-scan-staking.html#staking-pools-view\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Staking pools view<a class=\"headerlink\" href=\"#staking-pools-view\" title=\"Link to this heading\">#</a></h2><p>If you select <strong>Staking pools</strong> the table contains a list of all validators/pools (including historic validators) sorted by their staked amount, containing the following:</p>", "a[href=\"../smart-contracts-v0/general/introduction.html#auction-smart-contract-example\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Auction smart contract example<a class=\"headerlink\" href=\"#auction-smart-contract-example\" title=\"Link to this heading\">#</a></h3><p>A use case for smart contracts could be for holding an auction; here you program\nthe smart contract to accept different bids from anyone and have it keep track\nof the highest bidder.\nWhen the auction is over, the smart contract sends the winner bid CCD to the seller and all other bids back. The seller then should send the item to the winner.</p><p>The smart contract replaces the main role of the auctioneer. The contract itself\nonly governs the bidding part, and the on-chain distribution of CCDs. It will\nlikely also need some logic for reimbursing the highest bidder if the seller\ndoes not fulfil their obligations. This will most likely mean that the contract\nneeds to support some notion of proof that the seller has indeed fulfilled their\nobligation, or some way for the highest bidder to file a complaint. Smart\ncontracts cannot resolve these real-world issues automatically, and the best\nsolution is likely going to depend on the specifics of the auction.</p>", "a[href=\"../smart-contracts/guides/integration-test-contract.html#data-for-assertions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Data for assertions<a class=\"headerlink\" href=\"#data-for-assertions\" title=\"Link to this heading\">#</a></h2><p>This section covers how to get the data most commonly used for assertions in smart contract integration tests.</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/smart-contract.html#initialize-the-marketplace-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize the marketplace smart contract<a class=\"headerlink\" href=\"#initialize-the-marketplace-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Create an instance of the marketplace contract with the command below. Look at the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> function. As you can see in the code below, it expects an <code class=\"docutils literal notranslate\"><span class=\"pre\">InitParam</span></code> input which will be used to set the commission value in the <code class=\"docutils literal notranslate\"><span class=\"pre\">State::new()</span></code> function while initializing your marketplace state.</p>", "a[href=\"../smart-contracts/references/host-fns.html#concordium.state_delete_prefix\"]": "<dt class=\"sig sig-object py\" id=\"concordium.state_delete_prefix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">concordium.</span></span><span class=\"sig-name descname\"><span class=\"pre\">state_delete_prefix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key_length</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">i32</span></span></span></dt><dd><p>Delete a prefix in the tree, that is, delete all parts of the tree that have\nthe given key as a prefix.</p></dd>", "a[href=\"references/query-node.html#inspect-specific-block\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect specific block<a class=\"headerlink\" href=\"#inspect-specific-block\" title=\"Link to this heading\">#</a></h3><p>Display information about a specific block. Note that some fields (e.g. slot\ntime) are objective (i.e. all nodes participating in the Concordium network will\nagree on these) while others (e.g. arrival time) are specific to the local node:</p>", "a[href=\"../smart-contracts/tutorials/setup-env.html#import-the-key\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Import the key<a class=\"headerlink\" href=\"#import-the-key\" title=\"Link to this heading\">#</a></h3><p>You are ready to import your key into the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> configuration. Transfer your wallet key export file to the place where you are running your <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> tool. Navigate to the folder as well.</p><p>Import your key into the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> configuration:</p>", "a[href=\"../smart-contracts/general/contract-schema.html#should-you-embed-or-write-to-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Should you embed or write to a file?<a class=\"headerlink\" href=\"#should-you-embed-or-write-to-a-file\" title=\"Link to this heading\">#</a></h2><p>Whether a contract schema should be embedded or written to a file depends on\nyour situation.</p><p>Embedding the schema into the smart contract module distributes the schema\ntogether with the contract ensuring the correct schema is being used and also\nallows anyone to use it directly. The downside is that the smart contract module\nbecomes bigger in size and therefore more expensive to deploy.\nBut unless the smart contract uses very complex types for the parameters and\nreturn values, the size of the schema is likely to be negligible compared to the\nsize of the smart contract itself.</p>", "a[href=\"../smart-contracts/guides/inspect-instance.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to inspect a smart contract instance.\nInspecting an instance shows you its name, owner, module reference, balance,\nand receive-functions:</p>", "a[href=\"references/query-node.html#consensus-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Consensus state<a class=\"headerlink\" href=\"#consensus-state\" title=\"Link to this heading\">#</a></h2><h3>Inspect consensus parameters<a class=\"headerlink\" href=\"#inspect-consensus-parameters\" title=\"Link to this heading\">#</a></h3><p>Show <a class=\"reference internal\" href=\"resources/glossary.html#term-Leader-Election\"><span class=\"xref std std-term\">election parameters</span></a> for a specific block, optionally including\nbakers and their <a class=\"reference internal\" href=\"resources/glossary.html#term-Lottery-Power\"><span class=\"xref std std-term\">lottery power</span></a>:</p>", "a[href=\"../smart-contracts/references/schema-json.html#receivename\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReceiveName</span></code><a class=\"headerlink\" href=\"#receivename\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON object with the fields <code class=\"docutils literal notranslate\"><span class=\"pre\">contract</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code>, both of\ntype JSON string. Example:</p>", "a[href=\"references/manage-accounts.html#the-mw-gen1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Concordium Legacy Wallet<a class=\"headerlink\" href=\"#the-mw-gen1\" title=\"Link to this heading\">#</a></h3><p>The Concordium Legacy Wallet is a digital smartphone wallet that enables you to create and manage your Concordium identities and accounts, to create simple and shielded transactions, produce blocks (validation) and delegate, and to export and import your accounts and identities.</p>", "a[href=\"references/transactions.html#unshield-an-amount\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Unshield an amount<a class=\"headerlink\" href=\"#unshield-an-amount\" title=\"Link to this heading\">#</a></h3><p>The command to unshield an amount with <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">account</span> <span class=\"pre\">unshield</span></code>. For example, an interaction to unshield 7 CCD on\naccount B looks like the following:</p><p>The command is:</p>", "a[href=\"web3-id/index.html#entities\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Entities<a class=\"headerlink\" href=\"#entities\" title=\"Link to this heading\">#</a></h2><p>The core entities of the Web3 ID ecosystem are <a class=\"reference internal\" href=\"resources/glossary.html#term-Issuer\"><span class=\"xref std std-term\">issuers</span></a> which issue and manage the lifetime of verifiable credentials, and <a class=\"reference internal\" href=\"resources/glossary.html#term-Credential-holder\"><span class=\"xref std std-term\">holders</span></a> that have verifiable credentials in their wallets, and use them to prove properties about themselves to <a class=\"reference internal\" href=\"resources/glossary.html#term-Verifier\"><span class=\"xref std std-term\">verifiers</span></a>.</p><p>The issuer is an entity that issues verifiable credentials. Issuers have a smart contract that holds credential lifetime metadata, a back-end service that has logic for identifying users and sending transactions to the smart contract, and a dApp that interacts with the user\u2019s wallet and the back end to facilitate issuance of credentials.</p>", "a[href=\"../smart-contracts-v0/references/host-fns.html#function-parameter\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function parameter<a class=\"headerlink\" href=\"#function-parameter\" title=\"Link to this heading\">#</a></h2>", "a[href=\"guides/run-node.html#letting-the-node-container-access-the-internet\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Letting the node container access the internet<a class=\"headerlink\" href=\"#letting-the-node-container-access-the-internet\" title=\"Link to this heading\">#</a></h3><p>Some Linux distributions whose firewall is not based on iptables, Fedora and\nCentOS among them, require additional steps to allow docker containers to access\nexternal networks, e.g., the internet.</p><p>On Fedora run the following command to allow docker containers to access external networks.</p>", "a[href=\"resources/ccd-scan.html#use-ccdscan\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Use CCDScan<a class=\"headerlink\" href=\"#use-ccdscan\" title=\"Link to this heading\">#</a></h2><p>CCDScan shows information about <a class=\"reference internal\" href=\"resources/ccd-scan-blocks.html#blocks-view\"><span class=\"std std-ref\">blocks</span></a>, <a class=\"reference internal\" href=\"resources/ccd-scan-transactions.html#transactions-view\"><span class=\"std std-ref\">transactions</span></a>, <a class=\"reference internal\" href=\"resources/ccd-scan-accounts.html#accounts-view\"><span class=\"std std-ref\">accounts</span></a>, <a class=\"reference internal\" href=\"resources/ccd-scan-staking.html#bakers-view\"><span class=\"std std-ref\">staking</span></a>, and smart contracts.</p>", "a[href=\"../smart-contracts/best-practices/development.html#code-documentation\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Code documentation<a class=\"headerlink\" href=\"#code-documentation\" title=\"Link to this heading\">#</a></h3>", "a[href=\"../smart-contracts-v0/guides/no-std.html#setting-up-the-module-for-no-std\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the module for <code class=\"docutils literal notranslate\"><span class=\"pre\">no_std</span></code><a class=\"headerlink\" href=\"#setting-up-the-module-for-no-std\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library exposes a <code class=\"docutils literal notranslate\"><span class=\"pre\">std</span></code> feature, which enables the use\nof the rust standard library.\nThis feature is enabled by default.</p><p>To disable it, one must simply disable default features for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> in the dependencies of your module.</p>", "a[href=\"nodes/baker-docker.html#configure-a-node-as-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a node as a validator<a class=\"headerlink\" href=\"#configure-a-node-as-a-validator\" title=\"Link to this heading\">#</a></h2><p>Once you have generated validator keys, you then need to move the generated validator keys file to a location accessible by the node, and finally specify this location in the service file for the Concordium Node.</p><p>To register the keys in the network you need to be <a class=\"reference internal\" href=\"guides/run-node.html#running-a-node\"><span class=\"std std-ref\">running a node</span></a> and send a <code class=\"docutils literal notranslate\"><span class=\"pre\">validator</span> <span class=\"pre\">add</span></code> transaction to the network:</p>", "a[href=\"mobile-wallet/setup-mobile-wallet.html#request-your-identity-and-initial-account\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Request your identity and initial account<a class=\"headerlink\" href=\"#request-your-identity-and-initial-account\" title=\"Link to this heading\">#</a></h2><p>Having set up your passcode and possibly biometrics, you must then submit a request for an identity\nand an initial account. You do this immediately after setting up the passcode and biometrics.</p>", "a[href=\"guides/run-node-ubuntu.html#node-collector-configuration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Node collector configuration<a class=\"headerlink\" href=\"#node-collector-configuration\" title=\"Link to this heading\">#</a></h2><p>Since version 5.3.2 of the node the collector uses the GRPC V2 interface. Therefore, in order to run the collector, it is required that the node which the collector connects to has the GRPC V2 interface enabled.</p><p>Since the GRPC V2 port is different than the GRPC V1 port, you might need make changes to your node configuration. You <em>only</em> need to change the collector port if you have overridden your node configuration. You can edit your overrides with:</p>", "a[href=\"references/transactions.html#example-transferring-25-ccd-from-one-account-to-another\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Example: Transferring 25 CCD from one account to another<a class=\"headerlink\" href=\"#example-transferring-25-ccd-from-one-account-to-another\" title=\"Link to this heading\">#</a></h4><p>Accounts:</p>", "a[href=\"../smart-contracts/tutorials/nft-marketplace/smart-contract.html#updateoperator-and-add-token\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">UpdateOperator and add token<a class=\"headerlink\" href=\"#updateoperator-and-add-token\" title=\"Link to this heading\">#</a></h2><p>Now you are going to sell your NFT. In order to do that, you need to give the marketplace permission to transfer the token to a particular address. You do this with <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function in CIS-2, which is standard function. What you need to be careful about is that you need to call your token contract with its schema. Then you should be able to do an <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> operation. Go to the sample artifacts and <code class=\"docutils literal notranslate\"><span class=\"pre\">update-operator.json</span></code> to change the marketplace address. You are allowing the marketplace contract to act on your behalf. If you want to test the logic behind it, skip this and try to call <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> directly from the contract. It won\u2019t work because your token\u2019s state is not updated yet. As you can see below, the <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperator()</span></code> function updates the state of the token.</p>", "a[href=\"../smart-contracts/general/develop-contracts.html#avoid-creating-black-holes\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Avoid creating black holes<a class=\"headerlink\" href=\"#avoid-creating-black-holes\" title=\"Link to this heading\">#</a></h2><p>A smart contract is not required to use the amount of CCD send to it, and by\ndefault a smart contract does not define any behavior for emptying the balance\nof an instance, in case someone were to send some CCD.\nThese CCD would then be forever <em>lost</em>, and there would be no way to recover\nthem.</p><p>Therefore it is good practice for smart contracts that are not dealing with CCD,\nto ensure the sent amount of CCD is zero and reject any invocations which are\nnot.\nUsing the <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(...)]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...)]</span></code> macros will help you in this\nendeavor, as they will cause functions to return a <code class=\"docutils literal notranslate\"><span class=\"pre\">NotPayble</span></code> error if\nthey receive a non-zero amount of CCD.\nTo enable receiving CCD for a function, use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std-derive/latest/concordium_std_derive/attr.init.html#payable-make-function-accept-an-amount-of-ccd\"><code class=\"docutils literal notranslate\"><span class=\"pre\">payable</span></code></a> attribute in the\nmacro, e.g.: <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(...,</span> <span class=\"pre\">payable)]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(...,</span> <span class=\"pre\">payable)]</span></code>.</p>", "a[href=\"../smart-contracts-v0/references/schema-json.html#timestamp\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Timestamp</span></code><a class=\"headerlink\" href=\"#timestamp\" title=\"Link to this heading\">#</a></h3><p>Supplied as a JSON string using the <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc3339\">RFC3339</a> format with the precision of\nmilliseconds. Example:</p>", "a[href=\"../smart-contracts-v0/tutorials/piggy-bank/writing.html#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust\ncontracts.\nThe guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> shows you how to do this.\nAlso, make sure to have a text editor for writing Rust.</p><p>You also need to set up a new smart contract project.\nFollow the guide <a class=\"reference internal\" href=\"../smart-contracts/guides/setup-contract.html#setup-contract\"><span class=\"std std-ref\">Set up a smart contract project</span></a> and return to this point afterwards.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
