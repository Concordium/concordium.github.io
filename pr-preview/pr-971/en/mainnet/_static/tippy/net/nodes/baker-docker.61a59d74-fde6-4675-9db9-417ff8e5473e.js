selector_to_html = {"a[href=\"../guides/become-baker.html#restake-earnings\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Restake the earnings<a class=\"headerlink\" href=\"#restake-the-earnings\" title=\"Link to this heading\">#</a></h3><p>When participating as a validator in the network and producing blocks, the account receives rewards for each produced block. These rewards are automatically added to the staked amount by default.</p><p>You can choose to modify this behavior and instead receive the rewards in the account balance without staking them automatically. You can change this switch through <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>:</p>", "a[href=\"#run-a-validator-node-on-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Docker<a class=\"headerlink\" href=\"#run-a-validator-node-on-docker\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a Docker/Linux node that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"#configure-a-node-as-a-validator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Configure a node as a validator<a class=\"headerlink\" href=\"#configure-a-node-as-a-validator\" title=\"Link to this heading\">#</a></h2><p>Once you have generated validator keys, you then need to move the generated validator keys file to a location accessible by the node, and finally specify this location in the service file for the Concordium Node.</p><p>To register the keys in the network you need to be <a class=\"reference internal\" href=\"../guides/run-node.html#running-a-node\"><span class=\"std std-ref\">running a node</span></a> and send a <code class=\"docutils literal notranslate\"><span class=\"pre\">validator</span> <span class=\"pre\">add</span></code> transaction to the network:</p>", "a[href=\"../concepts/concepts-baker.html#baker-concept\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validators<a class=\"headerlink\" href=\"#validators\" title=\"Link to this heading\">#</a></h1><p>Validation is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> is a validator node when it participates actively in the network by creating new <a class=\"reference internal\" href=\"../resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> nodes. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> collects, orders, and validates the <a class=\"reference internal\" href=\"../resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a> that are included in a block to maintain the integrity of the blockchain. The validators sign each block that they produce so that the block can be verified and executed by the other validators in the network.</p>", "a[href=\"../guides/run-node.html#run-a-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node with Docker<a class=\"headerlink\" href=\"#run-a-node-with-docker\" title=\"Link to this heading\">#</a></h1><p>In this guide, you learn how to run a node on your Linux computer that\nparticipates in the Concordium network. This means that you receive\nblocks and transactions from other nodes, as well as propagate\ninformation about blocks and transactions to the nodes in the Concordium\nnetwork. After following this guide, you will be able to:</p>", "a[href=\"../guides/run-node.html#running-a-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running/upgrading a node<a class=\"headerlink\" href=\"#running-upgrading-a-node\" title=\"Link to this heading\">#</a></h2><p>Concordium provides two Docker images, a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/mainnet-node\">mainnet</a> one and a <a class=\"reference external\" href=\"https://hub.docker.com/r/concordium/testnet-node\">testnet</a> one.\nThese images are designed to be used together with docker-compose, or a similar driver. This guide provides a sample configuration using <code class=\"docutils literal notranslate\"><span class=\"pre\">docker-compose</span></code>.</p><p>The node requires a database which must be stored on the host system so that it persists when the docker container is stopped. It is up to the user to select the location of the database on their host system. In the guide the location used is <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-mainnet</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">/var/lib/concordium-testent</span></code> but any location to which the user that runs the Docker command has access to will do.</p>", "a[href=\"#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
