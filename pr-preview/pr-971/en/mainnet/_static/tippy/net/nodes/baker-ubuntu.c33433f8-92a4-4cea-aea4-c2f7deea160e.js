selector_to_html = {"a[href=\"#verify-that-a-node-is-a-validator-node\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Verify that a node is a validator node<a class=\"headerlink\" href=\"#verify-that-a-node-is-a-validator-node\" title=\"Link to this heading\">#</a></h2><p>Two <a class=\"reference internal\" href=\"../resources/glossary.html#term-Epoch\"><span class=\"xref std std-term\">epochs</span></a> must have elapsed before you can see the validator ID of the node on the dashboard.</p><p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> to see the status of the node. For more information, see <a class=\"reference internal\" href=\"../references/concordium-client.html#concordium-client\"><span class=\"std std-ref\">Concordium Client</span></a>.</p>", "a[href=\"#run-a-validator-node-on-ubuntu\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a validator node on Ubuntu<a class=\"headerlink\" href=\"#run-a-validator-node-on-ubuntu\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to set up the node to run as a <a class=\"reference internal\" href=\"../concepts/concepts-baker.html#baker-concept\"><span class=\"std std-ref\">validator</span></a> node on a server that participates in the Concordium network. A node receives blocks and transactions from other nodes and propagates information about blocks and transactions to the nodes in the Concordium network. In addition, a validator node also participates in the lottery and produces its own blocks.</p>", "a[href=\"../resources/glossary.html#term-Epoch\"]": "<dt id=\"term-Epoch\">Epoch</dt><dd><p>A time period that is approximately one hour on testnet and mainnet. At the start of each epoch, a <a class=\"reference internal\" href=\"#term-Leader-Election\"><span class=\"xref std std-term\">leadership election nonce</span></a> is computed based on the block nonces of the previous epoch. The leadership election nonce is valid for the duration of the epoch. Each epoch has a nominal ending, and when a block is finalized after this nominal ending then epoch transition occurs.</p></dd>", "a[href=\"../references/concordium-client.html#concordium-client\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium Client<a class=\"headerlink\" href=\"#concordium-client\" title=\"Link to this heading\">#</a></h1><p>The Concordium distribution ships with a CLI tool named <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>.</p><p>By default <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> performs its queries and sends transactions\nthrough a <a class=\"reference internal\" href=\"../guides/run-node.html#run-a-node\"><span class=\"std std-ref\">local node</span></a>. If the node runs on a different machine\nor in a custom setup, the options <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-ip</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--grpc-port</span></code> can be used\nto set the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IP_address\">IP address</a> and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> where the node is accessible. These\nflags are supported by all <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> commands. Note that as of version\n5.1.1, the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port number</a> must be the port where the GRPC V2 interface is enabled, in contrast to previous versions which required the port number of the V1 API of the Concordium node.</p>", "a[href=\"../concepts/concepts-baker.html#baker-concept\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Validators<a class=\"headerlink\" href=\"#validators\" title=\"Link to this heading\">#</a></h1><p>Validation is key to the Concordium blockchain. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Node\"><span class=\"xref std std-term\">node</span></a> is a validator node when it participates actively in the network by creating new <a class=\"reference internal\" href=\"../resources/glossary.html#term-Block\"><span class=\"xref std std-term\">blocks</span></a> that are added to the chain. The blockchain consists of multiple <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> nodes. A <a class=\"reference internal\" href=\"../resources/glossary.html#term-Validator\"><span class=\"xref std std-term\">validator</span></a> collects, orders, and validates the <a class=\"reference internal\" href=\"../resources/glossary.html#term-Transaction\"><span class=\"xref std std-term\">transactions</span></a> that are included in a block to maintain the integrity of the blockchain. The validators sign each block that they produce so that the block can be verified and executed by the other validators in the network.</p>", "a[href=\"#prerequisites\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">#</a></h2>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
