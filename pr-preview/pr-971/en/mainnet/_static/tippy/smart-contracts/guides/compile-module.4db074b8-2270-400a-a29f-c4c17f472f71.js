selector_to_html = {"a[href=\"#compiling-to-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compiling to Wasm<a class=\"headerlink\" href=\"#compiling-to-wasm\" title=\"Link to this heading\">#</a></h2><p>To help building smart contract modules and to take advantage of features\nsuch as <a class=\"reference internal\" href=\"../general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>, Concordium recommends using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> tool for building <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> smart contracts.</p><p>In order to build a smart contract for deployment, run:</p>", "a[href=\"deploy-module.html#deploy-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure to have Rust and Cargo installed and the <code class=\"docutils literal notranslate\"><span class=\"pre\">wasm32-unknown-unknown</span></code>\ntarget, together with <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> and the Rust source code for a smart\ncontract module, you wish to compile.</p>", "a[href=\"build-schema.html#build-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"setup-tools.html#setup-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"../general/contract-schema.html#contract-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nreturn value of a receive function and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"#non-verifiable-builds\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Non-verifiable builds<a class=\"headerlink\" href=\"#non-verifiable-builds\" title=\"Link to this heading\">#</a></h3><p>Omitting the <code class=\"docutils literal notranslate\"><span class=\"pre\">--verifiable</span></code> option from the build command will make a build on the host machine.\nThis is typically not verifiable since the Rust toolchain is affected by the build environment.\nHowever, for local development, non-verifiable builds can be useful.</p><p>By default, running the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">build</span></code> command will produce a smart contract module which can be found\nrelative to your project root folder in <code class=\"docutils literal notranslate\"><span class=\"pre\">./target/concordium/wasm32-unknown-unknown/release/my_module.wasm.v1</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">--out</span></code> option can be supplied also for non-verifiable builds.\nFor example, running the following command will output your smart contract module into the root folder of your project in a file called <code class=\"docutils literal notranslate\"><span class=\"pre\">my_module.wasm.v1</span></code>.</p>", "a[href=\"#compile-a-rust-smart-contract-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
