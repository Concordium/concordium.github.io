selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Christoph_Jentzsch.jpg/320px-Christoph_Jentzsch.jpg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p><b>The DAO</b> was a digital decentralized autonomous organization and a form of investor-directed venture capital fund. After launching in April 2016 via a token sale, it became one of the largest crowdfunding campaigns in history, but it ceased activity after much of its funds were taken in a hack in June 2016.</p>", "a[href^=\"https://en.wikipedia.org/wiki/The_DAO_(organization)#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Christoph_Jentzsch.jpg/320px-Christoph_Jentzsch.jpg\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p><b>The DAO</b> was a digital decentralized autonomous organization and a form of investor-directed venture capital fund. After launching in April 2016 via a token sale, it became one of the largest crowdfunding campaigns in history, but it ceased activity after much of its funds were taken in a hack in June 2016.</p>", "a[href=\"#reentrancy\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Reentrancy<a class=\"headerlink\" href=\"#reentrancy\" title=\"Link to this heading\">#</a></h3><p>When invoking another smart contract, you give away control to that contract in the middle of execution.\nThe external contract can, for example, call back entrypoints of your contract.\nThis behavior is called <em>reentrancy</em> and is well-known from concurrency: a procedure can be interrupted in the middle of its execution, called again, and then resume execution.\nSee the details about handling external calls and ways of protecting against reentrancy-related issues in the <a class=\"reference internal\" href=\"../best-practices/development.html#best-practices-external-calls\"><span class=\"std std-ref\">development best practices</span></a>.</p><p>The state of your contract might not be the same before and after <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke_contract</span></code>, since the contract you call can invoke any entrypoint of your own contract.</p>", "a[href=\"#writing-property-based-tests\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Writing property-based tests<a class=\"headerlink\" href=\"#writing-property-based-tests\" title=\"Link to this heading\">#</a></h2><p>The property-based testing technique allows for testing statements about your code that are expected to be true for any input parameters, possibly satisfying some precondition.\nYou can think of a precondition and a property as functions returning a boolean.\nThat is, for a function <code class=\"docutils literal notranslate\"><span class=\"pre\">fun</span></code>, a property looks as the following: \u201cfor any input <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">z</span></code>, such that <code class=\"docutils literal notranslate\"><span class=\"pre\">precondition(x,</span> <span class=\"pre\">y,</span> <span class=\"pre\">z)</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">property(x,</span> <span class=\"pre\">y,</span> <span class=\"pre\">z,</span> <span class=\"pre\">fun(x,y,z))</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code>\u201d.\nThe input to such tests is generated randomly.\nAn example of a property is \u201cfor any integers <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code>, such that <code class=\"docutils literal notranslate\"><span class=\"pre\">even(n)</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">even(m)</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">even(n</span> <span class=\"pre\">+</span> <span class=\"pre\">m)</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code>\u201d.</p><p>Property-based testing is supported using the <a class=\"reference external\" href=\"https://docs.rs/quickcheck/latest/quickcheck\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickCheck</span></code></a> crate.\nThe tests should be placed in the same module as regular unit tests and annotated with the <code class=\"docutils literal notranslate\"><span class=\"pre\">#[concordium_quickcheck]</span></code> macro.\nThe return value of the function should be a boolean corresponding to whether the property holds.</p>", "a[href=\"#testing-contract-invocations-with-mocks\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing contract invocations with mocks<a class=\"headerlink\" href=\"#testing-contract-invocations-with-mocks\" title=\"Link to this heading\">#</a></h2><p>To test receive methods that invoke contracts with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">host.invoke_contract(...)</span></code>, you should set up mocking functions that act as\nthe invoked contract. The <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a> has a number of helpers for\nmocking contracts.</p><p>To set up a mock entrypoint, use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html#method.setup_mock_entrypoint\"><code class=\"docutils literal notranslate\"><span class=\"pre\">setup_mock_entrypoint</span></code></a> method from <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestHost</span></code></a>.\nIt expects a <code class=\"docutils literal notranslate\"><span class=\"pre\">ContractAddress</span></code> and an <code class=\"docutils literal notranslate\"><span class=\"pre\">OwnedEntrypointName</span></code> to specify which\nentrypoint on which contract you are mocking.\nIt also expects a <code class=\"docutils literal notranslate\"><span class=\"pre\">MockFn</span></code>, which you can create in several different ways.</p>", "a[href=\"#unit-test-a-contract-in-rust\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Unit test a contract in Rust<a class=\"headerlink\" href=\"#unit-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to write unit tests for a smart contract written in\nRust.\nFor information about how to test a smart contract Wasm module, see <a class=\"reference internal\" href=\"local-simulate.html#local-simulate\"><span class=\"std std-ref\">Locally simulate contract functions</span></a>.</p><p>A smart contract in Rust is written as a library and you can unit test it like a\nlibrary by annotating functions with a <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code> attribute.</p>", "a[href=\"migrate-contracts.html#migrate-contracts-for-std-8-1\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Migrate contracts for <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> 8.1<a class=\"headerlink\" href=\"#migrate-contracts-for-concordium-std-8-1\" title=\"Link to this heading\">#</a></h1><p>With the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium_std</span></code></a> version <code class=\"docutils literal notranslate\"><span class=\"pre\">8.1</span></code> release, writing and reading smart contracts is easier than ever before.\nThe new version of the standard library reduces the need for generics and traits in your init and receive methods.\nThese generics and traits were there to support testing with the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/8.1/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a>, which has been deprecated in favor of the <a class=\"reference external\" href=\"https://docs.rs/concordium-std-derive/latest/concordium_smart-contract-testing\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.</p><p>This guide shows you how to migrate your contract code to use the simpler concrete types and use fewer generics.</p>", "a[href=\"#writing-unit-tests\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Writing unit tests<a class=\"headerlink\" href=\"#writing-unit-tests\" title=\"Link to this heading\">#</a></h2><p>Unit tests typically follow a three-part structure in which you: set up some\nstate, run some unit of code, and make assertions about the state and output of\nthe code.</p><p>If the contract functions are written using <code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(..)]</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(..)]</span></code>, you can test these functions directly in the unit test.</p>", "a[href=\"#example\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Example<a class=\"headerlink\" href=\"#example\" title=\"Link to this heading\">#</a></h3><p>Consider a counter with a threshold: if the count is less than the threshold, it gets incremented; otherwise, it stays unchanged.</p>", "a[href=\"local-simulate.html#local-simulate\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Link to this heading\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"#tests-in-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running tests in Wasm<a class=\"headerlink\" href=\"#running-tests-in-wasm\" title=\"Link to this heading\">#</a></h2><p>Compiling the tests to native machine code is sufficient for most cases, but it\nis also possible to compile the tests to Wasm and run them using the exact\ninterpreter that is used by the nodes.\nThis makes the test environment closer to the run environment on-chain and could,\nin some cases, catch more bugs.\nOne notable difference between different environments is regarding the size of\npointers, where <cite>Wasm32</cite> uses four bytes as opposed to eight, which is common\nfor most platforms.</p><p>The development tool <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> includes a test runner for Wasm, which\nuses the same Wasm-interpreter as the one shipped in the Concordium nodes.</p>", "a[href=\"setup-tools.html#setup-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"#testing-with-state-rollbacks\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing with state rollbacks<a class=\"headerlink\" href=\"#testing-with-state-rollbacks\" title=\"Link to this heading\">#</a></h2><p>Invocations of smart contracts on the chain are transactional. This means that\nif a contract changes its state and then fails, the state is rolled back to how\nit was before the invocation.</p><p>If you want the same behavior when testing, it is necessary to use a helper\nmethod on the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestHost</span></code></a>, namely <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html#method.with_rollback\"><code class=\"docutils literal notranslate\"><span class=\"pre\">with_rollback</span></code></a>.\nTo illustrate, here is an example in which the receive function increments the\nstate and then immediately fails:</p>", "a[href=\"#testing-transfers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing transfers<a class=\"headerlink\" href=\"#testing-transfers\" title=\"Link to this heading\">#</a></h2><p><a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestHost</span></code></a> has three helper methods that are useful when testing that the correct <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke_transfer</span></code> s have occurred.</p><p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer_occurred</span></code> to check for specific transfers:</p>", "a[href=\"#testing-contract-invocations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing contract invocations with mocks<a class=\"headerlink\" href=\"#testing-contract-invocations-with-mocks\" title=\"Link to this heading\">#</a></h2><p>To test receive methods that invoke contracts with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">host.invoke_contract(...)</span></code>, you should set up mocking functions that act as\nthe invoked contract. The <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">test_infrastructure</span></code></a> has a number of helpers for\nmocking contracts.</p><p>To set up a mock entrypoint, use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html#method.setup_mock_entrypoint\"><code class=\"docutils literal notranslate\"><span class=\"pre\">setup_mock_entrypoint</span></code></a> method from <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/test_infrastructure/struct.TestHost.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestHost</span></code></a>.\nIt expects a <code class=\"docutils literal notranslate\"><span class=\"pre\">ContractAddress</span></code> and an <code class=\"docutils literal notranslate\"><span class=\"pre\">OwnedEntrypointName</span></code> to specify which\nentrypoint on which contract you are mocking.\nIt also expects a <code class=\"docutils literal notranslate\"><span class=\"pre\">MockFn</span></code>, which you can create in several different ways.</p>", "a[href=\"../best-practices/development.html#best-practices-external-calls\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">External Calls<a class=\"headerlink\" href=\"#external-calls\" title=\"Link to this heading\">#</a></h3><p>Treat every external call as a potential security risk.\nCalling another contract gives control to potentially malicious code that could make arbitrary calls to any other contract, including your own contract.\nCalls to your contract might change its state through entrypoints that permit updating the state; see the <a class=\"reference internal\" href=\"#best-practices-reentrancy\"><span class=\"std std-ref\">Reentrancy</span></a> section of this document.\nMoreover, you should not make any assumptions about energy consumption, or expect that the execution succeeds.\nYour contract should be able to correctly handle situations when the call to an external contract fails.</p>", "a[href=\"#running-tests-in-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Running tests in Wasm<a class=\"headerlink\" href=\"#running-tests-in-wasm\" title=\"Link to this heading\">#</a></h2><p>Compiling the tests to native machine code is sufficient for most cases, but it\nis also possible to compile the tests to Wasm and run them using the exact\ninterpreter that is used by the nodes.\nThis makes the test environment closer to the run environment on-chain and could,\nin some cases, catch more bugs.\nOne notable difference between different environments is regarding the size of\npointers, where <cite>Wasm32</cite> uses four bytes as opposed to eight, which is common\nfor most platforms.</p><p>The development tool <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> includes a test runner for Wasm, which\nuses the same Wasm-interpreter as the one shipped in the Concordium nodes.</p>", "a[href=\"integration-test-contract.html#integration-test-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
