selector_to_html = {"a[href=\"#updateoperator-and-updateoperatorparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">updateOperator() and UpdateOperatorParams<a class=\"headerlink\" href=\"#updateoperator-and-updateoperatorparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function to assign/remove another address to act as an operator for an address.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperatorParams</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function is an array of <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperator</span></code> values.</p>", "a[href=\"#tokenmetadata-and-contracttokenmetadataqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">tokenMetadata() and ContractTokenMetadataQueryParams<a class=\"headerlink\" href=\"#tokenmetadata-and-contracttokenmetadataqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code> function to retrieve the metadata URL of a token. It is a view function that returns a vector of <code class=\"docutils literal notranslate\"><span class=\"pre\">TokenMetadataQueryResponse</span></code> which holds a <code class=\"docutils literal notranslate\"><span class=\"pre\">MetadataUrl</span></code> struct that stores the URL and the hash.</p>", "a[href=\"#work-with-the-json-parameters\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Work with the JSON parameters<a class=\"headerlink\" href=\"#work-with-the-json-parameters\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to interact with the CIS-2 smart contract functions by providing input JSON parameters. This guide uses the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis2-multi\">cis2-multi smart contract</a> as a starting point, and then continues with a couple of custom input types.</p><p>A smart contract implementing CIS-2 must export the following functions: <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">tokenMetadata()</span></code>. This topic briefly describes what the required functions do and how to interact with them using JSON parameters one by one.</p>", "a[href=\"#transfer-and-transferparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">transfer() and TransferParams<a class=\"headerlink\" href=\"#transfer-and-transferparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">transfer()</span></code> function to transfer some amount of token A from one account to another. The parameter to the transfer function is an array of <code class=\"docutils literal notranslate\"><span class=\"pre\">Transfer</span></code> s which is defined in CIS-2.</p>", "a[href=\"#balanceof-and-contractbalanceofqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">balanceOf() and ContractBalanceOfQueryParams<a class=\"headerlink\" href=\"#balanceof-and-contractbalanceofqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code> function to get a balance of a token in a given address. The <code class=\"docutils literal notranslate\"><span class=\"pre\">balanceOf()</span></code> function is essentially a view function that returns <code class=\"docutils literal notranslate\"><span class=\"pre\">ContractBalanceOfQueryResponse</span></code> which is an array of the token amounts of given addresses.</p>", "a[href=\"#operatorof-and-operatorofqueryparams\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">operatorOf() and OperatorOfQueryParams<a class=\"headerlink\" href=\"#operatorof-and-operatorofqueryparams\" title=\"Link to this heading\">#</a></h2><p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">operatorOf()</span></code> function to check whether an address is an operator of a given contract address added by the <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code>. It is a view function that returns <code class=\"docutils literal notranslate\"><span class=\"pre\">OperatorOfQueryResponse</span></code> which is an array of booleans for the given addresses (if the address <code class=\"docutils literal notranslate\"><span class=\"pre\">is_operator()</span></code> of the given contract index <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>, else <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>).</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
