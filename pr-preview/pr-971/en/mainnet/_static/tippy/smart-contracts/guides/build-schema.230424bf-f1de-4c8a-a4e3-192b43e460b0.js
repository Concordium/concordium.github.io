selector_to_html = {"a[href=\"../general/contract-schema.html#contract-schema-which-to-choose\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Embed schemas on-chain<a class=\"headerlink\" href=\"#embed-schemas-on-chain\" title=\"Link to this heading\">#</a></h2><p>Schemas are embedded into smart contract modules using the <a class=\"reference external\" href=\"https://webassembly.github.io/spec/core/appendix/custom.html\">custom\nsection</a> feature of Wasm modules.\nThis allows Wasm modules to include a named section of bytes, which does not\naffect the semantics of running the Wasm module.</p><p>The module can contain a schema in one of two different custom sections. This collection is a list of pairs, containing the name of the contract encoded\nin UTF-8 and the contract schema bytes. The section <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-schema</span></code> is the most common and is what the current tooling produces.</p>", "a[href=\"#converting-a-binary-schema-to-base64\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Converting a binary schema to base64<a class=\"headerlink\" href=\"#converting-a-binary-schema-to-base64\" title=\"Link to this heading\">#</a></h3><p>These commands are available in <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span></code> version 2.7.0 or newer.</p><p>To convert an existing binary schema (obtained via <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span></code>) use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">schema-base64</span></code> subcommand, e.g.,</p>", "a[href=\"#including-schemas-for-init\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including schemas for init<a class=\"headerlink\" href=\"#including-schemas-for-init\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for the parameter, the errors, and/or the events for the init function, set the\noptional <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">event</span></code> attributes for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[init(..)]</span></code>-macro:</p>", "a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>First, ensure you have <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> installed and if not the guide\n<a class=\"reference internal\" href=\"setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> will help you.</p><p>You also need the Rust source code of the smart contract you wish to build a\nschema for.</p>", "a[href=\"setup-tools.html#setup-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"#embedding-the-schema\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Embedding the schema<a class=\"headerlink\" href=\"#embedding-the-schema\" title=\"Link to this heading\">#</a></h3><p>In order to embed the schema into the smart contract module, add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-embed</span></code> to the build command by using</p>", "a[href=\"#outputting-a-schema-file\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Outputting a schema file<a class=\"headerlink\" href=\"#outputting-a-schema-file\" title=\"Link to this heading\">#</a></h3><p>To output the schema into a file, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span> <span class=\"pre\">FILE</span></code>\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">FILE</span></code> is a path and filename. The path\nmust exist and the file will be created in following command</p>", "a[href=\"#building-the-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building the schema<a class=\"headerlink\" href=\"#building-the-schema\" title=\"Link to this heading\">#</a></h2><p>Now, you are ready to build the actual schema using <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>, and you\nhave the options to embed the schema and/or write the schema to a file and/or print the schema to the console.</p>", "a[href=\"#setup-the-contract-for-a-schema\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the contract for a schema<a class=\"headerlink\" href=\"#setup-the-contract-for-a-schema\" title=\"Link to this heading\">#</a></h2><p>In order to build a contract schema, you first have to prepare our smart\ncontract for building the schema.</p><p>You can choose which parts of the smart contract to include in the schema.\nFor each init function, you can choose to include a schema for the parameter, the errors, and/or the events.\nAnd for each receive function, you can choose to include a schema for the parameter,\nthe return value, and/or the errors.</p>", "a[href=\"#including-schemas-for-receive\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Including schemas for receive<a class=\"headerlink\" href=\"#including-schemas-for-receive\" title=\"Link to this heading\">#</a></h3><p>To generate and include the schema for the parameter, the return value, and/or the errors for receive\nfunctions, set the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">return_value</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code> attributes for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive(..)]</span></code>-macro:</p>", "a[href=\"#converting-a-binary-schema-to-json\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Converting a binary schema to JSON<a class=\"headerlink\" href=\"#converting-a-binary-schema-to-json\" title=\"Link to this heading\">#</a></h3><p>These commands are available in <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span></code> version 2.6.0 or newer.</p><p>To convert an existing binary schema (obtained via <code class=\"docutils literal notranslate\"><span class=\"pre\">--schema-out</span></code>) use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">schema-json</span></code> subcommand, e.g.,</p>", "a[href=\"#build-a-contract-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
