selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/SHA-2\"]": "<p><b>SHA-2</b> is a set of cryptographic hash functions designed by the United States National Security Agency (NSA) and first published in 2001. They are built using the Merkle\u2013Damg\u00e5rd construction, from a one-way compression function itself built using the Davies\u2013Meyer structure from a specialized block cipher.</p>", "a[href^=\"https://en.wikipedia.org/wiki/SHA-2#\"]": "<p><b>SHA-2</b> is a set of cryptographic hash functions designed by the United States National Security Agency (NSA) and first published in 2001. They are built using the Merkle\u2013Damg\u00e5rd construction, from a one-way compression function itself built using the Davies\u2013Meyer structure from a specialized block cipher.</p>", "a[href=\"#what-is-the-cost-of-using-your-account-to-seal-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is the cost of using your account to seal a file?<a class=\"headerlink\" href=\"#what-is-the-cost-of-using-your-account-to-seal-a-file\" title=\"Link to this heading\">#</a></h2><p>The cost is currently approximately 4-5 cents (Euro) to register a file hash in the smart contract on mainnet.\nDisplaying the timestamp and witness (sealer_account) of a file hash is free of charge because you don\u2019t send a transaction,\nyou just look up the values from the chain.</p>", "a[href=\"#view-timestamp-and-witness\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View timestamp and witness<a class=\"headerlink\" href=\"#view-timestamp-and-witness\" title=\"Link to this heading\">#</a></h2><p>Select the <strong>Display tab</strong> to look up the timestamp and witness (sealer account) of an already registered file as shown below:</p>", "a[href=\"#use-concordium-client\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Use Concordium Client<a class=\"headerlink\" href=\"#use-concordium-client\" title=\"Link to this heading\">#</a></h2><p>The front end is connected to a deployed eSealing smart contract on the Concordium testnet\nwith <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/eSealing\">this source code</a>.</p><p>You can interact directly with the smart contract using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and your local node\nthat is running at port 20001 to register a file hash as follows:</p>", "a[href=\"#register-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Register a file<a class=\"headerlink\" href=\"#register-a-file\" title=\"Link to this heading\">#</a></h2><p>Select the <strong>Registration tab</strong> to register the file hash as shown below:</p>", "a[href=\"#esealing-dapp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">eSealing dApp<a class=\"headerlink\" href=\"#esealing-dapp\" title=\"Link to this heading\">#</a></h1><p>You can explore the <a class=\"reference external\" href=\"https://esealing.testnet.concordium.com\">hosted eSealing service</a> or\nstart your own front-end by following the instructions in the README.md file of this\n<a class=\"reference external\" href=\"https://github.com/Concordium/concordium-browser-wallet/tree/main/examples/eSealing\">repository</a> to get an overview of the dApp flow.</p>", "a[href=\"../wCCD/wCCD-front-end-set-up.html#wccd-front-end-set-up\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setting up the front end<a class=\"headerlink\" href=\"#setting-up-the-front-end\" title=\"Link to this heading\">#</a></h1><p>In this part, you will create a web front end. Users can interact with the smart contract easier\nby using your front end compared to interacting with the node directly.\nNon-tech users might find it inconvenient to interact with smart contracts via the Concordium node\nand some users may choose not to host their own Concordium node locally. This tutorial part will show you\na setup that alleviates the need for the user to host their own Concordium node.</p><p>You can lower the bar for entry by coding an appealing front end that provides additional information\nto your potential customers. Web front ends are a familiar sight nowadays, but to use\nthe front end, users will also need to download a browser wallet as a browser extension.\nThe installation and safe usage of the browser wallet might be new for people using your front end.\nProviding comprehensive explanations and step-by-step guides on your website on topics\nrelated to the browser wallet is important for a good user experience. The browser wallet\nconnects via <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a> to a server that is connected to a Concordium node. This setup alleviates the\nneed for the user to host their own Concordium node.</p>", "a[href=\"../setup-env.html#setup-env\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
