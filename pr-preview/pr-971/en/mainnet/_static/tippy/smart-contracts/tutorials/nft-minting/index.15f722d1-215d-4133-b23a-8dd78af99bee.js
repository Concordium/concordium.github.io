selector_to_html = {"a[href=\"mint-xfer.html#transfer-nft\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer function<a class=\"headerlink\" href=\"#transfer-function\" title=\"Link to this heading\">#</a></h2><p>Now you will transfer the token and check the balance of your account and the other wallet in the following steps.</p><p>Before you transfer the NFT, you should change the sender account and receiver account in the  <code class=\"docutils literal notranslate\"><span class=\"pre\">../nft-artifacts/transfer-params.json</span></code> file. Make sure you make the adjustments of addresses accordingly as shown below. You can create another account on your wallet to transfer this token to that.</p>", "a[href=\"build-smart-contract.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize, build, and deploy the smart contract<a class=\"headerlink\" href=\"#initialize-build-and-deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h1><p>Now you are ready to build your smart contract. You\u2019ll be using the <code class=\"docutils literal notranslate\"><span class=\"pre\">cis2-nft</span></code> contract template provided by Concordium.</p>", "a[href=\"build-smart-contract.html#deploy-nft-sc\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy your smart contract<a class=\"headerlink\" href=\"#deploy-your-smart-contract\" title=\"Link to this heading\">#</a></h2><p>To deploy your smart contract you will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span> <span class=\"pre\">client</span></code> command line tool.</p><p>Before deploying your smart contract, make sure that you have imported your wallet. When you export it from your wallet run the command below in the same directory where your wallet export is.</p>", "a[href=\"mint-xfer.html#nft-view-fn\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#view-function\" title=\"Link to this heading\">#</a></h2><p>Now check the current state of the cis2-nft token contract by invoking view function. The schema file you created in the build step is important here, because <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> uses it to deserialize the output while printing it.</p>", "a[href=\"upload-nft.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Upload the NFT<a class=\"headerlink\" href=\"#upload-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now you need to upload your asset and give it metadata. For this tutorial you will use the InterPlanetary File System (IPFS).</p>", "a[href=\"../setup-env.html#setup-env\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>", "a[href=\"#mint-an-nft\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint an NFT<a class=\"headerlink\" href=\"#mint-an-nft\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to mint an NFT on Concordium blockchain. First you will learn the basics to set up your development environment. Note that in this tutorial most of the commands are for UNIX-like systems and will not work on Windows.</p><p>All development is completed using <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> and includes the following examples:</p>", "a[href=\"mint-xfer.html#mint-transfer\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>", "a[href=\"mint-xfer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
