selector_to_html = {"a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust contracts. The guide <a class=\"reference internal\" href=\"../../guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> shows you how to do this. Also, make sure to have a text editor for writing Rust.</p><p>You also need to set up a new smart contract project. Follow the guide <a class=\"reference internal\" href=\"../../guides/setup-contract.html#setup-contract\"><span class=\"std std-ref\">Set up a smart contract project</span></a> and return to this point afterwards.</p>", "a[href=\"#initializing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing<a class=\"headerlink\" href=\"#initializing\" title=\"Link to this heading\">#</a></h3><p>The election is open from the point in time that this smart contract is initialized until the <cite>end_time</cite>.</p>", "a[href=\"index.html#voting-dapp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The Voting dApp<a class=\"headerlink\" href=\"#the-voting-dapp\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to get familiar with the deployed voting dApp on testnet. The voting dApp example is intended to show how you can use Concordium to conduct an election using the Concordium Wallet for Web to enable users to cast their vote in your election.\nYou are going to write a basic web front-end example that can read from and write to the deployed smart contract on testnet.</p><p>If you want to try this example before starting the tutorial:</p>", "a[href=\"../../guides/setup-tools.html#setup-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"../../general/contract-instances.html#contract-instance-operations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Limits<a class=\"headerlink\" href=\"#limits\" title=\"Link to this heading\">#</a></h2><p>When initializing, updating, or invoking a smart contract, the following limits are enforced:</p>", "a[href=\"#basic-setup\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic setup<a class=\"headerlink\" href=\"#basic-setup\" title=\"Link to this heading\">#</a></h2><p>The source code of your smart contract is going to be in the <code class=\"docutils literal notranslate\"><span class=\"pre\">src</span></code> directory, which already contains the file <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code>, assuming you follow the above guide\nto set up your project.</p><p>Open <code class=\"docutils literal notranslate\"><span class=\"pre\">src/lib.rs</span></code> in your editor and you\u2019ll see some code for <a class=\"reference internal\" href=\"../piggy-bank/testing.html#piggy-bank-testing\"><span class=\"std std-ref\">writing tests</span></a>,\nwhich you can delete for now. You will come back to tests later in this tutorial.</p>", "a[href=\"#the-voting-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The voting smart contract<a class=\"headerlink\" href=\"#the-voting-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"index.html#voting-dapp\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract development. In this part you will focus on how to write a smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/voting\">voting smart contract</a> allows for conducting an election with several voting options. An <cite>end_time</cite> is set when the election is initialized. Only accounts are eligible to vote. Each account can change its selected voting option as often as it desires until the <cite>end_time</cite> is reached. No voting is possible after the <cite>end_time</cite>.</p>", "a[href=\"../piggy-bank/testing.html#piggy-bank-testing\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write integration-tests for your piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.\nThe library simulates part of a blockchain <em>locally</em> to allow you to create one or more contracts and interact with them in the tests.</p>", "a[href=\"../../guides/setup-contract.html#setup-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a smart contract project<a class=\"headerlink\" href=\"#set-up-a-smart-contract-project\" title=\"Link to this heading\">#</a></h1><p>This guide documents two different options (<em>from a template</em> or <em>from scratch</em>) to create a new Concordium smart contract project.\nThe <em>from a template</em> option is available for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> version 2.2.0 or greater. It provides you with some\nsmart contract templates. Choose the template that best fits your project scope.\nThe <em>from scratch</em> option guides you through the process when you want to start a new project without any boilerplate code.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
