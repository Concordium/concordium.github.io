selector_to_html = {"a[href=\"#permit-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function<a class=\"headerlink\" href=\"#permit-function\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function verifies an ed25519 signature from a sponsoree and authorizes the sponsor to execute the logic of\nspecific entrypoints (<code class=\"docutils literal notranslate\"><span class=\"pre\">transfer/updateOperator</span></code> in the example code) on behalf of the sponsoree. The sponsored transaction mechanism replaces\nthe authorization checks conducted on the sender/invoker variable with signature verification.\nThat is, the sponsoree needs to sign a message (indicating its intended action), then\nanyone can invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function with this signed message to execute the sponsoree\u2019s intended action.\nThe smart contract logic checks if the <code class=\"docutils literal notranslate\"><span class=\"pre\">signature</span></code> was generated by the sponsoree with the <code class=\"docutils literal notranslate\"><span class=\"pre\">check_account_signature</span></code> host function.\nThis function looks up the public key/keys associated with the signer address and verifies that the signer has generated the <code class=\"docutils literal notranslate\"><span class=\"pre\">signature</span></code> by signing the <code class=\"docutils literal notranslate\"><span class=\"pre\">message_hash</span></code>.</p>", "a[href=\"#sponsored-transactions-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Sponsored Transactions Smart Contract<a class=\"headerlink\" href=\"#sponsored-transactions-smart-contract\" title=\"Link to this heading\">#</a></h1><p>The goal of this part of the tutorial is to understand how the sponsored\ntransaction mechanism is implemented in the smart contract and how to create and verify an Ed25519 signature in the smart contract code.</p><p>Clone the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/cis3-nft-sponsored-txs\">sponsored transaction example</a>\nwhich you will modify in this tutorial.</p>", "a[href=\"#testing-the-signature-verification\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the signature verification<a class=\"headerlink\" href=\"#testing-the-signature-verification\" title=\"Link to this heading\">#</a></h2><p>In this section, you will learn how to create an Ed25519 signature\nthat you can use for your test cases to confirm that the smart contract signature verification logic works as expected.</p>", "a[href=\"#nonces-registry\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Nonces</span></code> registry<a class=\"headerlink\" href=\"#nonces-registry\" title=\"Link to this heading\">#</a></h2><p>The smart contract has a registry to link an account to its next nonce.\nThe nonce is increased sequentially every time a signed message (corresponding to the account) is successfully executed in the <code class=\"docutils literal notranslate\"><span class=\"pre\">permit</span></code> function.\nThe nonce is used to prevent replay attacks of the signed message because only a message signed with the next nonce in sequence can be executed as seen below:</p>", "a[href=\"../setup-env.html#setup-env\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>", "a[href=\"#supportspermit-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">supportsPermit</span></code> function<a class=\"headerlink\" href=\"#supportspermit-function\" title=\"Link to this heading\">#</a></h2><p>This function can be queried with a list of given entrypoint names.\nThe response contains corresponding results for each entrypoint,\nwhere the result is either \u201cEntrypoint is not supported and can not be invoked via\nthe permit function using the sponsored transaction mechanism\u201d or \u201cEntrypoint is supported and\ncan be invoked via the permit function using the sponsored transaction mechanism\u201d.</p><p>You can explore the function by invoking it with the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> as follows:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
