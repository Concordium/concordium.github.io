selector_to_html = {"a[href=\"#the-migration-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function<a class=\"headerlink\" href=\"#the-migration-function\" title=\"Link to this heading\">#</a></h2><p>When deploying <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>, you might not know the exact logic of the <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code> yet.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Contract-version2</span></code> might be a smart contract that fixes a security bug in your smart contract code which will be discovered at some point in the future.\nFor that reason, it is good to have the option to call a <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function in <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code> when executing the upgrade mechanism in <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>.\nThis allows you to add additional execution logic when upgrading the smart contract.</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function could have a variety of different purposes such as:</p>", "a[href=\"#native-upgradability\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Native upgradability<a class=\"headerlink\" href=\"#native-upgradability\" title=\"Link to this heading\">#</a></h1><p>The goal of this tutorial is to deploy a <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version1</span></code>, upgrade its logic, and migrate its state to <code class=\"docutils literal notranslate\"><span class=\"pre\">contract-version2</span></code>.</p><p>The <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version1\">contract-version1</a>\nincludes an <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> function and the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade/contract-version2\">contract-version2</a>\nincludes a <code class=\"docutils literal notranslate\"><span class=\"pre\">migration</span></code> function. These functions are explored in the next two sections.</p>", "a[href=\"#executing-an-upgrade\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Executing an upgrade<a class=\"headerlink\" href=\"#executing-an-upgrade\" title=\"Link to this heading\">#</a></h2><p>Clone the <a class=\"reference external\" href=\"https://github.com/Concordium/concordium-rust-smart-contracts/tree/main/examples/smart-contract-upgrade\">smart contract upgrade example</a>.</p>", "a[href=\"#the-upgrade-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">upgrade</span></code> function<a class=\"headerlink\" href=\"#the-upgrade-function\" title=\"Link to this heading\">#</a></h2><p>A native smart contract upgrade can be triggered on the <code class=\"docutils literal notranslate\"><span class=\"pre\">host</span></code> as seen in the code snippet below:</p>", "a[href=\"../setup-env.html#setup-env\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
