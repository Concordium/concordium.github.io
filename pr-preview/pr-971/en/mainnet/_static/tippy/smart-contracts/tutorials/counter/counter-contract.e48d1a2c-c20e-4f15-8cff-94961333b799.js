selector_to_html = {"a[href=\"#view-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#view-function\" title=\"Link to this heading\">#</a></h3><p>The view function will return only the counters value so you need to update its return value as i8 and return it from the host.state().</p>", "a[href=\"../../guides/custom-errors.html#custom-errors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"#concordium-counter-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium counter smart contract<a class=\"headerlink\" href=\"#concordium-counter-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This tutorial guides you through creating a smart contract using the Concordium a default contract template that simply keeps a counter value in its state. It is a super simple, fundamental example contract that touches on the following points:</p>", "a[href=\"#build-deploy-and-initialize-the-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build, deploy, and initialize the contract<a class=\"headerlink\" href=\"#build-deploy-and-initialize-the-contract\" title=\"Link to this heading\">#</a></h2><p>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist</span></code> folder to keep the schema output file and Wasm compiled contract in and run the build command.</p>", "a[href=\"#increment-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Increment function<a class=\"headerlink\" href=\"#increment-function\" title=\"Link to this heading\">#</a></h3><p>Create a JSON file that holds your operator that will be given as input to the function and run the command below. Basically, you are saying to the contract instance \u201cwith this transaction I will update your state from the increment entrypoint\u201d which is your function name with this parameter.</p>", "a[href=\"#id1\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">View function<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>First, check the initial state of the contract.</p>", "a[href=\"#interact-with-the-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with the contract<a class=\"headerlink\" href=\"#interact-with-the-contract\" title=\"Link to this heading\">#</a></h2><h3>View function<a class=\"headerlink\" href=\"#id1\" title=\"Link to this heading\">#</a></h3><p>First, check the initial state of the contract.</p>", "a[href=\"#increment-and-decrement-counter\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Increment and decrement counter<a class=\"headerlink\" href=\"#increment-and-decrement-counter\" title=\"Link to this heading\">#</a></h2><h3>Increment counter<a class=\"headerlink\" href=\"#increment-counter\" title=\"Link to this heading\">#</a></h3><p>Then change the update function as described below. Remember that input needs to be parsed without any errors. The value must be positive, otherwise you will get an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::IncrementError</span></code>. The transaction must be triggered by the owner of the contract instance or it will throw <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>. And the function itself has to be a mutable function because you are going to change the state of the contract.</p>", "a[href=\"../setup-env.html#setup-env\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Setup the development environment<a class=\"headerlink\" href=\"#setup-the-development-environment\" title=\"Link to this heading\">#</a></h1><p>Before starting the smart contract tutorials, you must prepare your development environment by installing a number of tools.</p>", "a[href=\"#decrement-counter\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Decrement counter<a class=\"headerlink\" href=\"#decrement-counter\" title=\"Link to this heading\">#</a></h3><p>Add a new mutable function to implement decrement with a similar approach. It will also take an input parameter, but this time make sure that it is negative because a violation will be caused by an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::DecrementError</span></code>. Like the other one, this can be triggered by only the owner of the contract,otherwise it will throw an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>.</p>", "a[href=\"#increment-counter\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Increment counter<a class=\"headerlink\" href=\"#increment-counter\" title=\"Link to this heading\">#</a></h3><p>Then change the update function as described below. Remember that input needs to be parsed without any errors. The value must be positive, otherwise you will get an <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::IncrementError</span></code>. The transaction must be triggered by the owner of the contract instance or it will throw <code class=\"docutils literal notranslate\"><span class=\"pre\">Error::OwnerError</span></code>. And the function itself has to be a mutable function because you are going to change the state of the contract.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
