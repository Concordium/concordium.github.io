selector_to_html = {"a[href=\"#updateoperator-and-add-token\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">UpdateOperator and add token<a class=\"headerlink\" href=\"#updateoperator-and-add-token\" title=\"Link to this heading\">#</a></h2><p>Now you are going to sell your NFT. In order to do that, you need to give the marketplace permission to transfer the token to a particular address. You do this with <code class=\"docutils literal notranslate\"><span class=\"pre\">updateOperator()</span></code> function in CIS-2, which is standard function. What you need to be careful about is that you need to call your token contract with its schema. Then you should be able to do an <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> operation. Go to the sample artifacts and <code class=\"docutils literal notranslate\"><span class=\"pre\">update-operator.json</span></code> to change the marketplace address. You are allowing the marketplace contract to act on your behalf. If you want to test the logic behind it, skip this and try to call <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> directly from the contract. It won\u2019t work because your token\u2019s state is not updated yet. As you can see below, the <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateOperator()</span></code> function updates the state of the token.</p>", "a[href=\"#transfer-the-token\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Transfer the token<a class=\"headerlink\" href=\"#transfer-the-token\" title=\"Link to this heading\">#</a></h2><p>Now you are ready to sell it from the marketplace. If you look what it does you see that it takes the <code class=\"docutils literal notranslate\"><span class=\"pre\">token_info</span></code> from input, gets the token\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">quantity</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">price</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">royalty</span></code> values from its state. With 2 <code class=\"docutils literal notranslate\"><span class=\"pre\">ensure!()</span></code> it checks first whether the quantity that user wants to buy is sufficient or not and the amount is enough to buy them. Then through <code class=\"docutils literal notranslate\"><span class=\"pre\">Cis2Client::transfer()</span></code> it completes the token\u2019s transfer operation, handles the payment with royalties, and removes token from the list.</p>", "a[href=\"#initialize-the-marketplace-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize the marketplace smart contract<a class=\"headerlink\" href=\"#initialize-the-marketplace-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Create an instance of the marketplace contract with the command below. Look at the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> function. As you can see in the code below, it expects an <code class=\"docutils literal notranslate\"><span class=\"pre\">InitParam</span></code> input which will be used to set the commission value in the <code class=\"docutils literal notranslate\"><span class=\"pre\">State::new()</span></code> function while initializing your marketplace state.</p>", "a[href=\"#build-and-deploy-the-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build and deploy the smart contract<a class=\"headerlink\" href=\"#build-and-deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h1><p>The flow will be the same as the previous tutorials. You will build the contract, deploy it, and then create an instance of it. While selling your NFTs there will be some additional steps.</p><p>Now, you have the smart contract and helpers in your project\u2019s folder. In that folder, create another one called <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/marketplace-contract</span></code> for your output files. Then run the command below to build the contract and save the schema and Wasm file.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
