selector_to_html = {"a[href=\"#initialize-build-and-deploy-the-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize, build, and deploy the smart contract<a class=\"headerlink\" href=\"#initialize-build-and-deploy-the-smart-contract\" title=\"Link to this heading\">#</a></h1><p>Now you are ready to build your smart contract. You\u2019ll be using the <code class=\"docutils literal notranslate\"><span class=\"pre\">cis2-nft</span></code> contract template provided by Concordium.</p>", "a[href=\"#deploy-your-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy your smart contract<a class=\"headerlink\" href=\"#deploy-your-smart-contract\" title=\"Link to this heading\">#</a></h2><p>To deploy your smart contract you will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span> <span class=\"pre\">client</span></code> command line tool.</p><p>Before deploying your smart contract, make sure that you have imported your wallet. When you export it from your wallet run the command below in the same directory where your wallet export is.</p>", "a[href=\"#build-your-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build your smart contract<a class=\"headerlink\" href=\"#build-your-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Now you are ready to build your contract. Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/cis2-nft</span></code> folder to keep your Wasm compiled output file and schema file first and then build it with the following command.</p>", "a[href=\"#initializing-the-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing the smart contract<a class=\"headerlink\" href=\"#initializing-the-smart-contract\" title=\"Link to this heading\">#</a></h2><p>After deploying a contract you have to initialize it. It\u2019s like object-oriented programming: you create a class which is a module, and then you initialize it to create an object. It is the same here. An object of a class is a way to store both states of the class and its functionality. In order to initialize an instance of the contract you need the module name and contract, then run the following command.</p>", "a[href=\"#initialize-cis2-nft-contract-template\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize Cis2-NFT contract template<a class=\"headerlink\" href=\"#initialize-cis2-nft-contract-template\" title=\"Link to this heading\">#</a></h2><p>You will use <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> that you installed in the first part to initialize the template.</p><p>First, you need to install the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-generate</span></code> tool and then initialize the folder. By default, it\u2019ll create a cis2-nft contract template.</p>", "a[href=\"mint-xfer.html#mint-transfer\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Mint and transfer the NFT<a class=\"headerlink\" href=\"#mint-and-transfer-the-nft\" title=\"Link to this heading\">#</a></h1><p>Now, you are ready to call the mint function. In order to invoke mint function, you need the contract instance and you must set the owner/minter address, the metadata URL, and the token ID. Because you can mint more than one token with this instance address you need to specify the token ID. You can use either your terminal to give these parameters as inputs or you can create a JSON file and give that file as a parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code>. To make it more user-friendly, a JSON file is created in this tutorial. In your project file create a folder with any name you want. In this tutorial it is called \u201cnft-artifacts\u201d and the JSON file is called <code class=\"docutils literal notranslate\"><span class=\"pre\">nft-params.json</span></code>. You can either do it manually or with following commands.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
