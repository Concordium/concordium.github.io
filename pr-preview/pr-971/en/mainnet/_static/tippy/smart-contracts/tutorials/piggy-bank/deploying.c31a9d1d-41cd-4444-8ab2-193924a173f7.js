selector_to_html = {"a[href=\"#smart-contract-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract errors<a class=\"headerlink\" href=\"#smart-contract-errors\" title=\"Link to this heading\">#</a></h3><p>Ensure that the <code class=\"docutils literal notranslate\"><span class=\"pre\">--sender</span></code> flag uses the &lt;account-name&gt;\nthat initialized the piggy bank smart contract instance (the owner of this smart contract instance).\nYou can find explanations about the behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point in this <a class=\"reference internal\" href=\"writing.html#smashing-the-piggy-bank-writing\"><span class=\"std std-ref\">guide</span></a>.\nIf you invoke the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point with a different account than the owner, it will print the below error message.</p>", "a[href=\"../../guides/invoke-instance.html#invoke-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke a smart contract instance<a class=\"headerlink\" href=\"#invoke-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to invoke a smart contract instance, which\nmeans triggering a receive function and viewing its return value. Invoking an\ninstance is <em>not a transaction</em> and it <em>does not change the state of a contract</em>.\nInvoking can be useful to either view information about the instance or to test\na receive method before running an update. Because invoking is not a transaction, there is no fee to run <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.\nThe view functions are regular receive functions that return information about\nthe contract, ideally with schemas on the return values.</p><p>There is no limit to the number of logs per invocation (apart from energy).</p>", "a[href=\"#building-a-wasm-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Building a Wasm module<a class=\"headerlink\" href=\"#building-a-wasm-module\" title=\"Link to this heading\">#</a></h2><p>You have already built a Wasm module from your piggy bank smart contract in a <a class=\"reference internal\" href=\"writing.html#cargo-concordium-build\"><span class=\"std std-ref\">previous part</span></a> of this tutorial.</p><p>Repeat this step since you might have done some changes to the smart contract code in <a class=\"reference internal\" href=\"testing.html#piggy-bank-testing\"><span class=\"std std-ref\">part 2</span></a> of this tutorial. Go to the folder where you saved your piggy bank smart contract and use <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">concordium</span> <span class=\"pre\">build</span></code> to create a Wasm module.</p>", "a[href=\"../../guides/initialize-contract.html#initialize-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p><p>You can also watch a video about initializing smart contract instances.</p>", "a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure you completed the previous parts of the tutorial and have a running testnet node that has caught up to the head of the blockchain and an account with some CCD setup.</p>", "a[href=\"index.html#piggy-bank\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"writing.html#smashing-the-piggy-bank-writing\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smashing a piggy bank<a class=\"headerlink\" href=\"#smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h3><p>Now that you can insert CCD into a piggy bank, you also need to define how to\nsmash one.\nRemember, you only want the owner of the piggy bank (smart contract\ninstance) to be able to smash it and only if it isn\u2019t already smashed.\nIt should set its state to be smashed and transfer all of its CCD to the owner.</p><p>Again you use the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.receive.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[receive]</span></code></a> macro to define the smash function:</p>", "a[href=\"../../guides/deploy-module.html#deploy-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"#deploying-the-piggy-bank-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying the piggy bank smart contract<a class=\"headerlink\" href=\"#deploying-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the third <a class=\"reference internal\" href=\"index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written and tested a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p><p>This part focuses on how you can deploy your developed piggy bank smart contract to the Concordium testnet and interact with it.</p>", "a[href=\"#deploying-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deploying a module<a class=\"headerlink\" href=\"#deploying-a-module\" title=\"Link to this heading\">#</a></h2><p>You are now set up to deploy the piggy bank module to the testnet chain. Give the module the name <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_bank_part2_module</span></code> so it can be referenced in this tutorial.</p>", "a[href=\"testing.html#piggy-bank-testing\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write integration-tests for your piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\"><code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-smart-contract-testing</span></code></a> library.\nThe library simulates part of a blockchain <em>locally</em> to allow you to create one or more contracts and interact with them in the tests.</p>", "a[href=\"../../guides/interact-instance.html#interact-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p><p>You can also watch a video about how to update a smart contact instance.</p>", "a[href=\"../setup-env.html#interact-with-your-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install Concordium Client<a class=\"headerlink\" href=\"#install-concordium-client\" title=\"Link to this heading\">#</a></h2><p>The tutorials use <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> as a command line tool to deploy, mint, and transfer. <a class=\"reference internal\" href=\"../../../net/installation/downloads.html#concordium-node-and-client-download-testnet\"><span class=\"std std-ref\">Download it here</span></a>. Rename the package to <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-client</span></code> in case it has some version annotation.</p>", "a[href=\"#viewing-the-piggy-bank-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Viewing the piggy bank state<a class=\"headerlink\" href=\"#viewing-the-piggy-bank-state\" title=\"Link to this heading\">#</a></h2><p>You can display the raw return value of your piggy bank smart contract with the following command.</p>", "a[href=\"#updating-the-piggy-bank-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Updating the piggy bank smart contract<a class=\"headerlink\" href=\"#updating-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Deposit 1 CCD into the piggy bank to test if you can update the smart contract instance.</p>", "a[href=\"#concordium-std-crate-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Concordium-std</span></code> crate errors<a class=\"headerlink\" href=\"#concordium-std-crate-errors\" title=\"Link to this heading\">#</a></h3><p>Ensure that you don\u2019t send any CCD to the smart contract instance.\nYou can find explanations about the behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point in this <a class=\"reference internal\" href=\"writing.html#smashing-the-piggy-bank-writing\"><span class=\"std std-ref\">guide</span></a>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">Smash</span></code> entry point is <code class=\"docutils literal notranslate\"><span class=\"pre\">non-payable</span></code> and will print the below error message if you send CCD with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--amount</span></code> flag.\nThe opposite is not true and you can omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">--amount</span></code> flag when interacting\nwith a <code class=\"docutils literal notranslate\"><span class=\"pre\">payable</span></code> function without raising an error because in that case 0 CCD is sent to the <code class=\"docutils literal notranslate\"><span class=\"pre\">payable</span></code> entry point.</p>", "a[href=\"#smashing-the-piggy-bank-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smashing the piggy bank smart contract<a class=\"headerlink\" href=\"#smashing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h2><p>Smash the piggy bank contract to test that you can invoke this entry point. After smashing the piggy bank you cannot enter any additional CCD into the piggy bank anymore.</p>", "a[href=\"#initializing-a-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initializing a module<a class=\"headerlink\" href=\"#initializing-a-module\" title=\"Link to this heading\">#</a></h2><p>You can initialize your smart contract now to create a smart contract instance. Give the instance the name <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_bank_part2_instance</span></code> so it can be referenced in this tutorial.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
