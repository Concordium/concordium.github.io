selector_to_html = {"a[href=\"../guides/initialize-contract.html#initialize-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p><p>You can also watch a video about initializing smart contract instances.</p>", "a[href=\"../guides/compile-module.html#compile-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compile a Rust smart contract module<a class=\"headerlink\" href=\"#compile-a-rust-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to compile smart contract module written in Rust to\na Wasm module.</p>", "a[href=\"../guides/deploy-module.html#deploy-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"contract-module.html#contract-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>. A smart contract module is often referred to simply as a <em>module</em>.</p><p>A module can contain one or more smart contracts, allowing code to be shared\namong the contracts and can optionally contain <a class=\"reference internal\" href=\"contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a> and verification data.</p>", "a[href=\"../guides/build-schema.html#build-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Build a contract schema<a class=\"headerlink\" href=\"#build-a-contract-schema\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to build a smart contract schema, how to export it\nto a file, and/or embed the schema into the smart contract module, all using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>.</p>", "a[href=\"contract-instances.html#contract-instances\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"../../net/resources/glossary.html#term-Instance\"><span class=\"xref std std-term\">smart contract instance</span></a> is a smart contract module together with a\nspecific state and an amount of CCD tokens. A smart contract instance is often just called an <em>instance</em>.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"#life-cycle-of-a-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Life cycle of a smart contract<a class=\"headerlink\" href=\"#life-cycle-of-a-smart-contract\" title=\"Link to this heading\">#</a></h1><p>A smart contract is first deployed to the chain as part of a <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">contract\nmodule</span></a>. After this a smart contract can be <em>initialized</em> to\nobtain a <a class=\"reference internal\" href=\"contract-instances.html#contract-instances\"><span class=\"std std-ref\">smart contract instance</span></a>. Finally a smart\ncontract instance can be repeatedly updated according to its own logic.</p>", "a[href=\"../guides/inspect-instance.html#inspect-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Inspect a smart contract instance<a class=\"headerlink\" href=\"#inspect-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to inspect a smart contract instance.\nInspecting an instance shows you its name, owner, module reference, balance,\nand receive-functions:</p>", "a[href=\"../guides/interact-instance.html#interact-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p><p>You can also watch a video about how to update a smart contact instance.</p>", "a[href=\"../guides/invoke-instance.html#invoke-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Invoke a smart contract instance<a class=\"headerlink\" href=\"#invoke-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to invoke a smart contract instance, which\nmeans triggering a receive function and viewing its return value. Invoking an\ninstance is <em>not a transaction</em> and it <em>does not change the state of a contract</em>.\nInvoking can be useful to either view information about the instance or to test\na receive method before running an update. Because invoking is not a transaction, there is no fee to run <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.\nThe view functions are regular receive functions that return information about\nthe contract, ideally with schemas on the return values.</p><p>There is no limit to the number of logs per invocation (apart from energy).</p>", "a[href=\"../guides/setup-contract.html#setup-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Set up a smart contract project<a class=\"headerlink\" href=\"#set-up-a-smart-contract-project\" title=\"Link to this heading\">#</a></h1><p>This guide documents two different options (<em>from a template</em> or <em>from scratch</em>) to create a new Concordium smart contract project.\nThe <em>from a template</em> option is available for <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> version 2.2.0 or greater. It provides you with some\nsmart contract templates. Choose the template that best fits your project scope.\nThe <em>from scratch</em> option guides you through the process when you want to start a new project without any boilerplate code.</p>", "a[href=\"../guides/integration-test-contract.html#integration-test-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
