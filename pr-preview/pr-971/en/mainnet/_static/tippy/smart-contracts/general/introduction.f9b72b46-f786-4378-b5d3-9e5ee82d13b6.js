selector_to_html = {"a[href=\"../guides/quick-start.html#sc-quick-start\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Concordium smart contracts quick start guide<a class=\"headerlink\" href=\"#concordium-smart-contracts-quick-start-guide\" title=\"Link to this heading\">#</a></h1><p>This guide is intended to be used by experienced developers who want to get up and running quickly with a smart contract deployed on chain with which they can interact.</p><p>Before starting, it is a good idea to read the <a class=\"reference internal\" href=\"../best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"../guides/integration-test-contract.html#integration-test-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Integration test a contract in Rust<a class=\"headerlink\" href=\"#integration-test-a-contract-in-rust\" title=\"Link to this heading\">#</a></h1><p>This guide describes how to write <em>integration tests</em> in Rust for your smart contracts using the <a class=\"reference external\" href=\"https://docs.rs/concordium-smart-contract-testing/latest/concordium_smart_contract_testing/\">Concordium smart contract testing library</a>.</p>", "a[href=\"#auction-smart-contract-example\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auction smart contract example<a class=\"headerlink\" href=\"#auction-smart-contract-example\" title=\"Link to this heading\">#</a></h2><p>A use case for smart contracts could be for holding an auction; here you program\nthe smart contract to accept different bids from anyone and have it keep track\nof the highest bidder.\nWhen the auction is over, the smart contract sends the winner bid CCD to the seller and all other bids back. The seller then should send the item to the winner.</p><p>The smart contract replaces the main role of the auctioneer. The contract itself\nonly governs the bidding part, and the on-chain distribution of CCDs. It will\nlikely also need some logic for reimbursing the highest bidder if the seller\ndoes not fulfil their obligations. This will most likely mean that the contract\nneeds to support some notion of proof that the seller has indeed fulfilled their\nobligation, or some way for the highest bidder to file a complaint. Smart\ncontracts cannot resolve these real-world issues automatically, and the best\nsolution is likely going to depend on the specifics of the auction.</p>", "a[href=\"#smart-contract-development-tools\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract development tools<a class=\"headerlink\" href=\"#smart-contract-development-tools\" title=\"Link to this heading\">#</a></h3><p>Concordium provides a number of tools to simplify the smart contract creation and deployment process.</p><p>The <a class=\"reference external\" href=\"https://marketplace.visualstudio.com/items?itemName=Concordium.concordium-smart-contracts\">VSCode extension</a> can help you develop Concordium smart contracts. The extension sets up the editor for development, installs the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> smart contract development tool for all supported platforms, and provides commands in the editor for the essential workflows, such as building and testing smart contracts.</p>", "a[href=\"contract-module.html#contract-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>. A smart contract module is often referred to simply as a <em>module</em>.</p><p>A module can contain one or more smart contracts, allowing code to be shared\namong the contracts and can optionally contain <a class=\"reference internal\" href=\"contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a> and verification data.</p>", "a[href=\"../best-practices/development.html#sc-development-best-practices\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Development best practices<a class=\"headerlink\" href=\"#development-best-practices\" title=\"Link to this heading\">#</a></h1><p>This document provides guidelines for developing smart contracts, including best practices for smart contract development, audit, information about common pitfalls and security vulnerabilities, and how to avoid them.</p><p>It starts with some general thoughts about smart contract development and then gives more details about writing smart contracts in Rust for Concordium.</p>", "a[href=\"contract-instances.html#contract-instances\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"../../net/resources/glossary.html#term-Instance\"><span class=\"xref std std-term\">smart contract instance</span></a> is a smart contract module together with a\nspecific state and an amount of CCD tokens. A smart contract instance is often just called an <em>instance</em>.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"#introduction-to-smart-contracts\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Link to this heading\">#</a></h1><p>Already know what smart contracts are? Go to the <a class=\"reference internal\" href=\"../guides/quick-start.html#sc-quick-start\"><span class=\"std std-ref\">quick guide</span></a> to start building smart contracts on Concordium right away.</p><p>A <a class=\"reference internal\" href=\"../../net/resources/glossary.html#term-Smart-contract\"><span class=\"xref std std-term\">smart contract</span></a> is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p>", "a[href=\"contract-schema.html#contract-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nreturn value of a receive function and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"#additional-reading\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Additional reading<a class=\"headerlink\" href=\"#additional-reading\" title=\"Link to this heading\">#</a></h3><p>For information about the lifecycle of smart contracts, see <a class=\"reference internal\" href=\"contract-lifecycle.html#sc-lifecycle\"><span class=\"std std-ref\">Lifecycle of a smart contract</span></a>. You can also continue reading about <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">contract modules</span></a>, <a class=\"reference internal\" href=\"contract-instances.html#contract-instances\"><span class=\"std std-ref\">contract instances</span></a>, and <a class=\"reference internal\" href=\"contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>. Also, read the <a class=\"reference internal\" href=\"../best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"contract-lifecycle.html#sc-lifecycle\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Life cycle of a smart contract<a class=\"headerlink\" href=\"#life-cycle-of-a-smart-contract\" title=\"Link to this heading\">#</a></h1><p>A smart contract is first deployed to the chain as part of a <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">contract\nmodule</span></a>. After this a smart contract can be <em>initialized</em> to\nobtain a <a class=\"reference internal\" href=\"contract-instances.html#contract-instances\"><span class=\"std std-ref\">smart contract instance</span></a>. Finally a smart\ncontract instance can be repeatedly updated according to its own logic.</p>", "a[href=\"#next-steps\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Next steps<a class=\"headerlink\" href=\"#next-steps\" title=\"Link to this heading\">#</a></h2><h3>Additional reading<a class=\"headerlink\" href=\"#additional-reading\" title=\"Link to this heading\">#</a></h3><p>For information about the lifecycle of smart contracts, see <a class=\"reference internal\" href=\"contract-lifecycle.html#sc-lifecycle\"><span class=\"std std-ref\">Lifecycle of a smart contract</span></a>. You can also continue reading about <a class=\"reference internal\" href=\"contract-module.html#contract-module\"><span class=\"std std-ref\">contract modules</span></a>, <a class=\"reference internal\" href=\"contract-instances.html#contract-instances\"><span class=\"std std-ref\">contract instances</span></a>, and <a class=\"reference internal\" href=\"contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a>. Also, read the <a class=\"reference internal\" href=\"../best-practices/development.html#sc-development-best-practices\"><span class=\"std std-ref\">Smart contracts best practices</span></a>.</p>", "a[href=\"../../net/resources/glossary.html#term-Smart-contract\"]": "<dt id=\"term-Smart-contract\">Smart contract</dt><dd><p>A computer program or a transaction protocol that is intended to automatically execute, control or document events and actions according to the terms of a contract or an agreement. An example is a smart contract for selling NFTs on a marketplace; it may contain information about royalties, selling the NFT on to others, and so on.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
