selector_to_html = {"a[href=\"#auction-smart-contract-example\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Auction smart contract example<a class=\"headerlink\" href=\"#auction-smart-contract-example\" title=\"Link to this heading\">#</a></h3><p>A use case for smart contracts could be for holding an auction; here you program\nthe smart contract to accept different bids from anyone and have it keep track\nof the highest bidder.\nWhen the auction is over, the smart contract sends the winner bid CCD to the seller and all other bids back. The seller then should send the item to the winner.</p><p>The smart contract replaces the main role of the auctioneer. The contract itself\nonly governs the bidding part, and the on-chain distribution of CCDs. It will\nlikely also need some logic for reimbursing the highest bidder if the seller\ndoes not fulfil their obligations. This will most likely mean that the contract\nneeds to support some notion of proof that the seller has indeed fulfilled their\nobligation, or some way for the highest bidder to file a complaint. Smart\ncontracts cannot resolve these real-world issues automatically, and the best\nsolution is likely going to depend on the specifics of the auction.</p>", "a[href=\"#what-are-smart-contracts-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are smart contracts for?<a class=\"headerlink\" href=\"#what-are-smart-contracts-for\" title=\"Link to this heading\">#</a></h2><p>Smart contracts can reduce the needed amount of trust in third-parties, in some cases\nremoving the need for a trusted third-party, in other cases reducing their\ncapabilities and thus reducing the amount of trust needed in them.</p><p>Because smart contracts are executed completely transparently, in a way that\nanybody with access to a node can verify, they can be very useful for ensuring\nagreement between parties.</p>", "a[href=\"../../smart-contracts/general/contract-module.html#contract-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>. A smart contract module is often referred to simply as a <em>module</em>.</p><p>A module can contain one or more smart contracts, allowing code to be shared\namong the contracts and can optionally contain <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a> and verification data.</p>", "a[href=\"../../smart-contracts/general/contract-instances.html#contract-instances\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"../../net/resources/glossary.html#term-Instance\"><span class=\"xref std std-term\">smart contract instance</span></a> is a smart contract module together with a\nspecific state and an amount of CCD tokens. A smart contract instance is often just called an <em>instance</em>.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"#life-cycle-of-a-smart-contract\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Life cycle of a smart contract<a class=\"headerlink\" href=\"#life-cycle-of-a-smart-contract\" title=\"Link to this heading\">#</a></h2><p>A smart contract is first deployed to the chain as part of a <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">contract\nmodule</span></a>. After this a smart contract can be <em>initialized</em> to\nobtain a <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-instances.html#contract-instances\"><span class=\"std std-ref\">smart contract instance</span></a>. Finally a smart\ncontract instance can be repeatedly updated according to its own logic.</p>", "a[href=\"#introduction-to-smart-contracts\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to smart contracts<a class=\"headerlink\" href=\"#introduction-to-smart-contracts\" title=\"Link to this heading\">#</a></h1><p>A smart contract is a user-supplied piece of code submitted to the Concordium\nblockchain, used to define behavior that is not directly part of the core\nprotocol. Smart contracts are executed by nodes in the Concordium network\naccording to predefined rules. Their execution is fully transparent, and all\nnodes must agree on what the outcome of execution is based on only publicly\navailable information.</p><p>A smart contract can receive, hold and send CCD, it is able to observe some\naspects of the chain, and maintain its own state. Smart contracts are always\nexecuted as a response to <strong>external</strong> actions, e.g., an account sending a\nmessage. In practice smart contracts will often be a small part of a larger\nsystem, combining on and off-chain functionality. An example of off-chain\nfunctionality could be a server that invokes the smart contract based on\ndata from the real-world, such as prices of stocks, or weather information.</p>", "a[href=\"#what-are-smart-contracts-not-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What are smart contracts <em>not</em> for?<a class=\"headerlink\" href=\"#what-are-smart-contracts-not-for\" title=\"Link to this heading\">#</a></h2><p>Smart contracts are a very exciting technology and people are still finding new\nways to take advantage of them.\nHowever, there are some cases where smart contracts are not a good solution.</p><p>One of the key advantages of smart contracts are the trust in the code\nexecution, and to achieve this a large number of nodes in the blockchain network\nhave to execute the same code and ensure agreement of the result.\nNaturally, this becomes expensive compared to running the same code on one node\nin some cloud service.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
