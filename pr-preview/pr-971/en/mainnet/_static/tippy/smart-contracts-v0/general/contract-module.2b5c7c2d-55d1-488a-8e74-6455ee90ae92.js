selector_to_html = {"a[href=\"../../smart-contracts/references/host-fns.html#host-functions\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Contract host functions<a class=\"headerlink\" href=\"#contract-host-functions\" title=\"Link to this heading\">#</a></h1><p>This is a reference of the functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium</span></code> module supplied by a\nhost running smart contract Wasm module.</p>", "a[href=\"#deployment\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Link to this heading\">#</a></h2><p>Deploying a module to the chain means submitting the module bytecode as a\ntransaction to the Concordium network. If <em>valid</em> this transaction will be\nincluded in a block. This transaction, as every other transaction, has an\nassociated cost. The cost is based on the size of the bytecode and is charged\nfor both checking validity of the module and on-chain storage.</p><p>The deployment itself does not execute a\nsmart contract. To execute, a user must first create an <em>instance</em> of a contract.</p>", "a[href=\"#smart-contract-on-the-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract on the chain<a class=\"headerlink\" href=\"#smart-contract-on-the-chain\" title=\"Link to this heading\">#</a></h2><p>A smart contract on the chain is a collection of functions exported from a deployed\nmodule. The concrete mechanism used for this is the <a class=\"reference external\" href=\"https://webassembly.org/\">Web Assembly</a> export\nsection. A smart contract must export one function for initializing new\ninstances and can export zero or more functions for updating the instance.</p><p>Since a smart contract module can export functions for multiple different smart\ncontracts, functions are associated with a contract using a naming scheme:</p>", "a[href=\"../../smart-contracts/general/contract-instances.html#contract-instances\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <a class=\"reference internal\" href=\"../../net/resources/glossary.html#term-Instance\"><span class=\"xref std std-term\">smart contract instance</span></a> is a smart contract module together with a\nspecific state and an amount of CCD tokens. A smart contract instance is often just called an <em>instance</em>.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"#on-chain-language\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">On-chain language<a class=\"headerlink\" href=\"#on-chain-language\" title=\"Link to this heading\">#</a></h2><p>On the Concordium blockchain the smart contract language is a subset of <a class=\"reference external\" href=\"https://webassembly.org/\">Web\nAssembly</a> (Wasm in short) which is designed to be a portable compilation\ntarget and to be run in sandboxed environments. This is useful because smart\ncontracts will be run by validators in the network who do not necessarily trust\nthe code.</p><p>Wasm is a low-level language and it is impractical to write by hand. Instead one\ncan write smart contracts in a more high-level language which is then\ncompiled to Wasm.</p>", "a[href=\"#floating-point-numbers\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Floating point numbers<a class=\"headerlink\" href=\"#floating-point-numbers\" title=\"Link to this heading\">#</a></h4><p>Although Wasm does have support for floating point numbers, a smart contract is\ndisallowed to use them. The reason for this is that Wasm floating-point numbers\ncan have a special <code class=\"docutils literal notranslate\"><span class=\"pre\">NaN</span></code> (\u201cnot a number\u201d) value whose treatment can result in nondeterminism.</p><p>The restriction applies statically, meaning that smart contracts cannot contain\nfloating point types, nor can they contain any instructions that involve floating\npoint values.</p>", "a[href=\"../../smart-contracts/general/contract-schema.html#contract-schema\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nreturn value of a receive function and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"#smart-contract-modules\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>.</p>", "a[href=\"#limitations\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Limitations<a class=\"headerlink\" href=\"#limitations\" title=\"Link to this heading\">#</a></h3><p>The blockchain environment is very particular in the sense that each node must\nbe able to execute the contract in exactly the same way, using exactly the same\namount of resources. Otherwise nodes would fail to reach consensus on the\nstate of the chain. For this reason smart contracts need to be written in a restricted\nsubset of Wasm.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
