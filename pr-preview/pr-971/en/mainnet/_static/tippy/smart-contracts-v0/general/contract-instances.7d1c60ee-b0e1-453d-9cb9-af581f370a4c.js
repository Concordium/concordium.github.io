selector_to_html = {"a[href=\"#instantiating-a-smart-contract-on-chain\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instantiating a smart contract on-chain<a class=\"headerlink\" href=\"#instantiating-a-smart-contract-on-chain\" title=\"Link to this heading\">#</a></h2><p>Every smart contract must contain a function for creating smart contract\ninstances. Such a function is referred to as the <em>init function</em>.</p><p>To create a smart contract instance, an account sends a special transaction with\na reference to the deployed smart contract module and the name of the\ninit function to use for instantiation.</p>", "a[href=\"../../smart-contracts/guides/initialize-contract.html#initialize-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p><p>You can also watch a video about initializing smart contract instances.</p>", "a[href=\"#action-descriptions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Action descriptions<a class=\"headerlink\" href=\"#action-descriptions\" title=\"Link to this heading\">#</a></h2><p>A receive function returns a <em>description of actions</em> to be executed by\nthe host environment on the chain.</p><p>The possible actions that a contract can produce are:</p>", "a[href=\"../../smart-contracts/general/contract-module.html#contract-module\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract modules<a class=\"headerlink\" href=\"#smart-contract-modules\" title=\"Link to this heading\">#</a></h1><p>Smart contracts are deployed on the chain in <em>smart contract modules</em>. A smart contract module is often referred to simply as a <em>module</em>.</p><p>A module can contain one or more smart contracts, allowing code to be shared\namong the contracts and can optionally contain <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-schema.html#contract-schema\"><span class=\"std std-ref\">contract schemas</span></a> and verification data.</p>", "a[href=\"../../smart-contracts/general/resource-accounting.html#resource-accounting\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Resource accounting<a class=\"headerlink\" href=\"#resource-accounting\" title=\"Link to this heading\">#</a></h1>", "a[href=\"#interacting-with-an-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interacting with an instance<a class=\"headerlink\" href=\"#interacting-with-an-instance\" title=\"Link to this heading\">#</a></h2><p>A smart contract can expose zero or more functions for interacting with an\ninstance, referred to as <em>receive functions</em>.</p><p>Just like with init functions, receive functions are triggered using\ntransactions, which contain some amount of CCD for the contract and an argument\nto the function in the form of bytes.</p>", "a[href=\"#instance-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Instance state<a class=\"headerlink\" href=\"#instance-state\" title=\"Link to this heading\">#</a></h2><p>Every smart contract instance holds its own state which is represented on-chain\nas an array of bytes. The instance uses functions provided by the host\nenvironment to read, write and resize the state.</p>", "a[href=\"../../smart-contracts/references/host-fns.html#host-functions-state\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instance state<a class=\"headerlink\" href=\"#smart-contract-instance-state\" title=\"Link to this heading\">#</a></h2>", "a[href=\"#processing-multiple-action-descriptions\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Processing multiple action descriptions<a class=\"headerlink\" href=\"#processing-multiple-action-descriptions\" title=\"Link to this heading\">#</a></h3><p>You can chain action descriptions using the <strong>and</strong> combinator.\nAn action-description sequence <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code> <strong>and</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code></p>", "a[href=\"#smart-contract-instances\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract instances<a class=\"headerlink\" href=\"#smart-contract-instances\" title=\"Link to this heading\">#</a></h1><p>A <strong>smart contract instance</strong> is a smart contract module together with a\nspecific state and an amount of CCD tokens.\nMultiple smart contract instances can be created from the same module.\nFor example, for an <a class=\"reference internal\" href=\"../../smart-contracts/general/introduction.html#auction\"><span class=\"std std-ref\">auction</span></a> contract, there could be multiple instances, each\none dedicated to bidding for a specific item and with its own participants.</p><p>Smart contract instances can be created from a deployed <a class=\"reference internal\" href=\"../../smart-contracts/general/contract-module.html#contract-module\"><span class=\"std std-ref\">smart contract\nmodule</span></a> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">init</span></code> transaction which invokes the\nrequested function in the smart contract module. This function can take a\nparameter.\nIts end result is required to be the initial smart contract state of the\ninstance.</p>", "a[href=\"../../smart-contracts/references/host-fns.html#host-functions-log\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Logging events<a class=\"headerlink\" href=\"#logging-events\" title=\"Link to this heading\">#</a></h2>", "a[href=\"#state-of-a-smart-contract-instance\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">State of a smart contract instance<a class=\"headerlink\" href=\"#state-of-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h2><p>The state of a smart contract instance consists of two parts, the user-defined\nstate and the amount of CCD the contract holds, i.e., its <em>balance</em>. When\nreferring to state it typically means only the user-defined state. The reason for\ntreating the CCD amount separately is that CCD can only be spent and\nreceived according to rules of the network, e.g., contracts cannot create\nor destroy CCD tokens.</p>", "a[href=\"../../smart-contracts/general/introduction.html#auction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auction smart contract example<a class=\"headerlink\" href=\"#auction-smart-contract-example\" title=\"Link to this heading\">#</a></h2><p>A use case for smart contracts could be for holding an auction; here you program\nthe smart contract to accept different bids from anyone and have it keep track\nof the highest bidder.\nWhen the auction is over, the smart contract sends the winner bid CCD to the seller and all other bids back. The seller then should send the item to the winner.</p><p>The smart contract replaces the main role of the auctioneer. The contract itself\nonly governs the bidding part, and the on-chain distribution of CCDs. It will\nlikely also need some logic for reimbursing the highest bidder if the seller\ndoes not fulfil their obligations. This will most likely mean that the contract\nneeds to support some notion of proof that the seller has indeed fulfilled their\nobligation, or some way for the highest bidder to file a complaint. Smart\ncontracts cannot resolve these real-world issues automatically, and the best\nsolution is likely going to depend on the specifics of the auction.</p>", "a[href=\"#logging-events\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Logging events<a class=\"headerlink\" href=\"#logging-events\" title=\"Link to this heading\">#</a></h2><p>Events can be logged during the execution of smart contract functions. This is\nthe case for both init and receive functions. The logs are designed for\noff-chain use, so that actors outside of the chain can monitor for events and\nreact to them. Logs are not accessible to smart contracts, or any other actor on\nthe chain. Events can be logged using a function supplied by the host\nenvironment.</p>", "a[href=\"#handling-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Handling errors<a class=\"headerlink\" href=\"#handling-errors\" title=\"Link to this heading\">#</a></h3><p>Use the <strong>or</strong> combinator to execute an action in case that a previous action fails.\nAn action description <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code> <strong>or</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code></p>", "a[href=\"../references/host-fns.html#host-functions-actions-v0\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Action description<a class=\"headerlink\" href=\"#action-description\" title=\"Link to this heading\">#</a></h3><p>The description of actions to execute on the chain, returned by smart contract\nreceive function.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
