selector_to_html = {"a[href=\"../general/develop-contracts.html#working-with-parameters-v0\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Working with parameters<a class=\"headerlink\" href=\"#working-with-parameters\" title=\"Link to this heading\">#</a></h3><p>Parameters to the init and receive functions are, like the instance\nstate, represented as byte arrays.\nWhile the byte arrays can be used directly, they can also be deserialized into\nstructured data.</p><p>The simplest way to deserialize a parameter is through the <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html#tymethod.get\">get()</a> function of\nthe <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/trait.Get.html\">Get</a> trait.</p>", "a[href=\"#interaction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Interaction<a class=\"headerlink\" href=\"#interaction\" title=\"Link to this heading\">#</a></h2><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the parameterless\nreceive function <code class=\"docutils literal notranslate\"><span class=\"pre\">my_receive</span></code> while allowing up to 1000 energy to be used,\nrun the following command:</p>", "a[href=\"deploy-module.html#deploy-module-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Make sure that you are <a class=\"reference internal\" href=\"../../net/guides/run-node.html#run-a-node\"><span class=\"std std-ref\">running a node</span></a> using the latest <a class=\"reference internal\" href=\"../../net/installation/downloads.html#downloads\"><span class=\"std std-ref\">Concordium software</span></a> and that you have a\nsmart-contract instance on-chain to inspect.</p>", "a[href=\"../references/references-on-chain.html#references-on-chain-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">References on-chain<a class=\"headerlink\" href=\"#references-on-chain\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how modules and contract instances are referenced\n<em>on-chain</em>.</p>", "a[href=\"../../net/installation/downloads.html#downloads\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Downloads<a class=\"headerlink\" href=\"#downloads\" title=\"Link to this heading\">#</a></h1><p>This topic contains information about where you can download the Concordium Wallets and tools for Mainnet and Testnet.</p>", "a[href=\"#passing-parameters-in-json-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in JSON format<a class=\"headerlink\" href=\"#passing-parameters-in-json-format\" title=\"Link to this heading\">#</a></h3><p>A parameter in JSON format can be passed if a <a class=\"reference internal\" href=\"../general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">smart contract schema</span></a> is supplied, either as a file or embedded in the module.\nThe schema is used to serialize the JSON into binary.</p>", "a[href=\"../general/contract-schema.html#contract-schema-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Smart contract schemas<a class=\"headerlink\" href=\"#smart-contract-schemas\" title=\"Link to this heading\">#</a></h1><p>A smart contract schema is a description of how to represent bytes in a more\nstructured representation. It can be used by external tools when displaying the\nstate of a smart contract instance and for specifying parameters using a\nstructured representation, such as JSON.</p>", "a[href=\"#interact-with-a-smart-contract-instance\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Interact with a smart contract instance<a class=\"headerlink\" href=\"#interact-with-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you, how to interact with a smart contract instance, which\nmeans triggering a receive function that, possibly, updates the state of the\ninstance.</p>", "a[href=\"../../net/guides/run-node.html#run-a-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Run a node with Docker<a class=\"headerlink\" href=\"#run-a-node-with-docker\" title=\"Link to this heading\">#</a></h1><p>In this guide, you learn how to run a node on your Linux computer that\nparticipates in the Concordium network. This means that you receive\nblocks and transactions from other nodes, as well as propagate\ninformation about blocks and transactions to the nodes in the Concordium\nnetwork. After following this guide, you will be able to:</p>", "a[href=\"initialize-contract.html#initialize-contract-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialize a smart contract instance<a class=\"headerlink\" href=\"#initialize-a-smart-contract-instance\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to initialize a smart contract from a deployed\nsmart contract module with parameters in JSON or binary format.\nAdditionally, it will show how to name an instance.</p>", "a[href=\"#passing-parameters-in-binary-format\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Passing parameters in binary format<a class=\"headerlink\" href=\"#passing-parameters-in-binary-format\" title=\"Link to this heading\">#</a></h3><p>When passing parameters in binary format, a\n<a class=\"reference internal\" href=\"../general/contract-schema.html#contract-schema-v0\"><span class=\"std std-ref\">contract schema</span></a> is not needed.</p><p>To update an instance with address index <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> using the receive function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter_receive</span></code> with a parameter file <code class=\"docutils literal notranslate\"><span class=\"pre\">my_parameter.bin</span></code> in binary\nformat, run the following command:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
