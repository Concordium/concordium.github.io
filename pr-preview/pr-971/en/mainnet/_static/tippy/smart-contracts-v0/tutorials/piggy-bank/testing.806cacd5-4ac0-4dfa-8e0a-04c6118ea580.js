selector_to_html = {"a[href=\"../../../smart-contracts/guides/custom-errors.html#custom-errors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Return custom errors<a class=\"headerlink\" href=\"#return-custom-errors\" title=\"Link to this heading\">#</a></h1><p>This guide shows how to return custom errors from your Rust smart contract.</p>", "a[href=\"../../guides/deploy-module.html#deploy-module-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Deploy a smart contract module<a class=\"headerlink\" href=\"#deploy-a-smart-contract-module\" title=\"Link to this heading\">#</a></h1><p>This guide will show you how to deploy a smart contract module <em>on-chain</em> and\nhow to name it.</p>", "a[href=\"../../../net/guides/create-account.html#create-account\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Create an account<a class=\"headerlink\" href=\"#create-an-account\" title=\"Link to this heading\">#</a></h1><p>If you are using Concordium Legacy Wallet or Desktop Wallet, when you created your <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>, it came with an <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Initial-Account\"><span class=\"xref std std-term\">initial account</span></a>. The initial account is a special account that the <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Identity-Provider\"><span class=\"xref std std-term\">identity provider</span></a> submits\nto the chain. When you already have an identity, you can create more <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> with that identity yourself.</p><p>If you are using Concordium Wallet for Web or Concordium Wallet for Mobile, no initial account was created when you created your <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Identity\"><span class=\"xref std std-term\">identity</span></a>. You create all <a class=\"reference internal\" href=\"../../../net/resources/glossary.html#term-Account\"><span class=\"xref std std-term\">accounts</span></a> related to your identities.</p>", "a[href=\"#add-a-test-module\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Add a test module<a class=\"headerlink\" href=\"#add-a-test-module\" title=\"Link to this heading\">#</a></h2><p>Since a smart contract module is written as a Rust library, you can test it as\none would test any library and write unit-tests as part of the Rust module.</p><p>At the bottom of the <code class=\"docutils literal notranslate\"><span class=\"pre\">lib.rs</span></code> file containing our code, make sure you have the\nfollowing starting point:</p>", "a[href=\"../../guides/local-simulate.html#local-simulate-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Locally simulate contract functions<a class=\"headerlink\" href=\"#locally-simulate-contract-functions\" title=\"Link to this heading\">#</a></h1><p>This guide is about how to locally simulate an invocation of some init or\nreceive function from a Wasm smart contract module in a given context and\nstate.\nThis simulation is useful for inspecting a smart contract and the outcome in\nspecific scenarios.</p>", "a[href=\"../../../net/nodes/windows.html#windows-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Windows nodes<a class=\"headerlink\" href=\"#windows-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Windows.</p>", "a[href=\"#simulating-the-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Simulating the piggy bank<a class=\"headerlink\" href=\"#simulating-the-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>So far the tests you have written are in <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> and have to be compiled alongside\nthe smart contract module in a test build. This is fine for unit testing, but\nthis test build is not the actual module that you intend to deploy on the\nConcordium blockchain.</p><p>You should also test the smart contract wasm module meant for deployment, and you\ncan use the simulate feature of <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code>. It takes a smart contract\nwasm module and uses the Wasm interpreter to run a smart contract function in a\ngiven context. For a reference of the context, see <a class=\"reference internal\" href=\"../../references/simulate-context.html#simulate-context-v0\"><span class=\"std std-ref\">Simulation contexts</span></a>.</p>", "a[href=\"#preparation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Preparation<a class=\"headerlink\" href=\"#preparation\" title=\"Link to this heading\">#</a></h2><p>Before you start, make sure to have the necessary tooling to build Rust\ncontracts.\nThe guide <a class=\"reference internal\" href=\"../../../smart-contracts/guides/setup-tools.html#setup-tools\"><span class=\"std std-ref\">Install tools for development</span></a> shows you how to do this.\nAlso, make sure to have a text editor setup to write Rust.</p><p>Additionally, to run the tests you need to:</p>", "a[href=\"../../../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The piggy bank smart contract<a class=\"headerlink\" href=\"#the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>In this tutorial, you are going to build a simple smart contract modelling a\npiggy bank.\nIt should allow any account to insert CCD and only the owner to smash it,\ntaking all of the CCD inside.</p><p>In the <a class=\"reference internal\" href=\"../../../smart-contracts/tutorials/piggy-bank/writing.html#piggy-bank-writing\"><span class=\"std std-ref\">first part</span></a>, you will learn how to write the very basic piggy bank smart\ncontract using the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language.</p>", "a[href=\"../../../net/nodes/ubuntu.html#ubuntu-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Ubuntu nodes<a class=\"headerlink\" href=\"#ubuntu-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Ubuntu.</p>", "a[href=\"../../../net/nodes/macos.html#macos-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">MacOS nodes<a class=\"headerlink\" href=\"#macos-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with MacOS.</p>", "a[href=\"#testing-instantiation-of-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing instantiation of a piggy bank<a class=\"headerlink\" href=\"#testing-instantiation-of-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>The first test to add is to verify a piggy bank is set up with the correct\nstate.</p>", "a[href=\"#testing-cause-of-rejection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing cause of rejection<a class=\"headerlink\" href=\"#testing-cause-of-rejection\" title=\"Link to this heading\">#</a></h2><p>You want to test that the piggy bank rejects in certain contexts, for example\nwhen someone besides the owner of the smart contract tries to smash it.</p><p>The test should:</p>", "a[href=\"../../references/simulate-context.html#simulate-context-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Simulation contexts<a class=\"headerlink\" href=\"#simulation-contexts\" title=\"Link to this heading\">#</a></h1><p>This is a reference of how the init- and receive-context is specified as JSON,\nwhen <a class=\"reference internal\" href=\"../../guides/local-simulate.html#local-simulate-v0\"><span class=\"std std-ref\">simulating contract functions locally</span></a>.</p>", "a[href=\"../../../net/references/concordium-client.html#concordium-client-import-accounts-keys\"]": "<h4 class=\"tippy-header\" style=\"margin-top: 0;\">Import accounts and keys from the Wallet apps<a class=\"headerlink\" href=\"#import-accounts-and-keys-from-the-wallet-apps\" title=\"Link to this heading\">#</a></h4><p>Import the keys of one or more accounts from a JSON file exported from the\nConcordium Legacy Wallet.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--name</span></code> option selects which account to import and imports it with this\nname. If it\u2019s omitted, all accounts in the file are imported under their\nexisting names.</p>", "a[href=\"#compiling-and-running-tests-in-wasm\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compiling and running tests in Wasm<a class=\"headerlink\" href=\"#compiling-and-running-tests-in-wasm\" title=\"Link to this heading\">#</a></h2><p>When running <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo</span> <span class=\"pre\">test</span></code> your contract module and tests are compiled targeting\nyour native platform, but on the Concordium blockchain a smart contract module\nis in Wasm.\nTherefore it is preferable to compile the tests targeting Wasm and run the tests\nusing a Wasm interpreter instead.\nLuckily, the <code class=\"docutils literal notranslate\"><span class=\"pre\">cargo-concordium</span></code> tool contains such an interpreter, and\nit is the same interpreter shipped with the official nodes on the Concordium\nblockchain.</p><p>Before you can run tests in Wasm, you have to replace <code class=\"docutils literal notranslate\"><span class=\"pre\">#[cfg(test)]</span></code> at the\ntop of your test module with <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.concordium_cfg_test.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[concordium_cfg_test]</span></code></a> and all the <code class=\"docutils literal notranslate\"><span class=\"pre\">#[test]</span></code>\nmacros with <a class=\"reference external\" href=\"https://docs.rs/concordium-std/latest/concordium_std/attr.concordium_test.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">#[concordium_test]</span></code></a>.</p>", "a[href=\"../../../smart-contracts/guides/setup-tools.html#setup-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Install tools for development<a class=\"headerlink\" href=\"#install-tools-for-development\" title=\"Link to this heading\">#</a></h1><p>Before you can start developing smart contracts, you need to setup the\nenvironment.</p><p>You can also watch a video about installing the smart contract tools.</p>", "a[href=\"writing.html#piggy-bank-writing-v0\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Writing the piggy bank smart contract<a class=\"headerlink\" href=\"#writing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the first <a class=\"reference internal\" href=\"index.html#piggy-bank-v0\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment. In this part you will focus on how to write a smart contract in the\n<a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming language using the <code class=\"docutils literal notranslate\"><span class=\"pre\">concordium-std</span></code> library.</p>", "a[href=\"#test-smashing-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test smashing a piggy bank<a class=\"headerlink\" href=\"#test-smashing-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Testing <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_smash</span></code> will follow the same pattern, but this time you will need\nto populate the context since this function uses the context for getting the\ncontract owner, the sender of the message triggering the function, and the\nbalance of contract.</p><p>If you only supply the function with an empty context it will fail, so instead\ndefine the context as mutable:</p>", "a[href=\"#test-inserting-ccd-into-a-piggy-bank\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Test inserting CCD into a piggy bank<a class=\"headerlink\" href=\"#test-inserting-ccd-into-a-piggy-bank\" title=\"Link to this heading\">#</a></h2><p>Next you should test the different functions for interacting with a piggy bank.\nThis is done in the same way as initializing, except you use <code class=\"docutils literal notranslate\"><span class=\"pre\">ReceiveContextTest</span></code>\nto construct the context.</p><p>To test <code class=\"docutils literal notranslate\"><span class=\"pre\">piggy_insert</span></code> you also need some amount of CCD and the current state\nof your smart contract instance:</p>", "a[href=\"#testing-the-piggy-bank-smart-contract\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the piggy bank smart contract<a class=\"headerlink\" href=\"#testing-the-piggy-bank-smart-contract\" title=\"Link to this heading\">#</a></h1><p>This is the second <a class=\"reference internal\" href=\"../../../smart-contracts/tutorials/piggy-bank/index.html#piggy-bank\"><span class=\"std std-ref\">part of a tutorial</span></a> on smart contract\ndevelopment.\nSo far you have written a piggy bank smart contract in the <a class=\"reference external\" href=\"https://www.rust-lang.org/\">Rust</a> programming\nlanguage.\nThis part will focus on how you can write unit tests for your piggy bank smart\ncontract and how to setup and locally simulate an invocation of a smart\ncontract.</p>", "a[href=\"../../../net/nodes/docker.html#docker-node\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Docker nodes<a class=\"headerlink\" href=\"#docker-nodes\" title=\"Link to this heading\">#</a></h1><p>This section contains topics that describe running a node with Docker.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
