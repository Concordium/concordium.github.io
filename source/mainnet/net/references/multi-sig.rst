.. _multi-sig-concordium-client:

=========
Multi-sig
=========

Concordium supports natively multi-sig accounts. Each account address on
Concordium is controlled by one or several credential(s) (real-world
identities e.g. a private person with a passport or a company with a registration) and
each credential has one or several public-private key pair(s).

.. note::

   A public-private key pair are related keys used for asymmetric cryptography.
   The private key is used to sign/authorize an action relatd to the account. NEVER share your private key with anyone.
   In contrast, the public key is shared with other entities to verify that a signature is generated
   by the associated private key.

Each account has an ``AccountThreshold`` (number of credentials needed to sign the transaction
initiated by that account) and one or several ``SignatureThresholds`` (number of signatures needed for a specific
credential so that this credential is considered to have signed the transaction initiated by that
account).

The ``concordium-client`` tool (version 6.3.0 or above) facilitates creating, signing, and sending of multi-sig
transactions for multi-sig accounts.
This page will go through the main steps as follows:

-  Create a multi-sig account by adding keys with the ``concordium-client`` tool to an account.
-  Configure the ``concordium-client`` tool to use a multi-sig account.
-  Create a multi-sig transaction with the ``concordium-client`` tool.
-  Add an additional signature to a multi-sig transaction with the ``concordium-client`` tool.
-  Send a multi-sig transaction with the ``concordium-client`` tool on chain.

.. note::

   Mutli-sig signing can be used on all active transaction types which are currently: ``DeployModule``, ``InitContract``,
   ``UpdateContract``, ``Transfer(CCD)``, ``TransferWithMemo``, ``TransferWithSchedule``,
   ``TransferWithScheduleAndMemo``, ``ConfigureDelegation``, ``ConfigureBaker``, ``RegisterData``, ``UpdateCredential``,
   and ``UpdateCredentialsKeys``.

Create a multi-sig account
==========================

When you create an account in one of the Concordium wallets, it is a basic account by default
that has exactly one credential and exactly one public-private key pair for that credential.
A default account can be converted into a multi-sig account.

.. note::

   The Desktop wallet is the only wallet currently that has its own independent flow of creating a multi-sig account via its front end and
   generating multi-sig transactions. The two guides :ref:`multi-sig accounts<overview-shared-accounts>` and
   :ref:`multi-sig transactions<create-multisig>` will cover the flows in the Desktop wallet.
   The partially-signed transaction file as generated by
   the Desktop wallet is currently NOT compatible with file generated by the ``concordium-client`` tool.
   You need to add additional signatures and send the transaction on-chain with the
   wallet/tool the file was initially generated with.

To add additional keys to an existing account on Concordium using the ``concordium-client`` tool, you can either:

.. dropdown:: Add an additional public-private key pair to your current credential

   - Step 1: Create an additional Ed25519 public-private key pair as you feel safe.

   For testing purposes we recommend, the `front-end <https://cyphr.me/ed25519_tool/ed.html>`_ to generate an un-safe
   additional key pair.

   - Step 2: Find the credential registration ID of your account that we are updating keys for.

   Run the following command where you replace ``<account-name-or-account-address>`` with your account.

   .. code-block:: console

      $concordium-client account show <account-name-or-account-address> --grpc-port <grpc-port-of-server> --grpc-ip <grpc-ip-url-to-node>

   Using the node connection to the hosted testnet node as an example:

   .. code-block:: console

      $concordium-client account show <account-name-or-account-address> --grpc-port 20000 --grpc-ip node.testnet.concordium.com

   This will output something like:

   .. code-block:: console

      Address:                3G5srtaeRvy2uzyaiheY3ZZ6nqTkDg1kRm59xWVnFo8CoEiZ6Y
      Balance:                1001736.135182 CCD
      Nonce:                  16
      Encryption public key:  b14cbfe44a02c6b1f78711176d5f437295367aa4f2a8c2551ee10d25a03adc69d61a332a058971919dad7312e1fc94c5a411f21ab3b0962c6fb664212e41769e83c82288515f16ca72c86f8a03e87531cae46394bffc63ab6168432903d79fb0

      Baking or delegating stake: no

      Credentials:
      * <credential-registration-id>:
         - Index: 0
         - Expiration: Jun 2023
         - Type: normal
         - Revealed attributes: none

   We require the ``<credential-registration-id>`` output for the next step.

   - Step 3: Send a transaction to update the keys of your account on-chain.

   .. code-block:: console

      $concordium-client account update-keys --credId <credential-registration-id> --sender <account-name-or-address> ./update-keys.json --grpc-port <grpc-port-of-server> --grpc-ip <grpc-ip-url-to-node>

   Using the node connection to the hosted testnet node as an example:

   .. code-block:: console

      $concordium-client account update-keys --credId <credential-registration-id> --sender <account-name-or-address> ./update-keys.json --grpc-port 20000 --grpc-ip node.testnet.concordium.com

   where ``update-keys.json`` is a file of the following format:

   .. code-block:: json
      :force:

      {
         "keys": {
            "0": {
               "verifyKey": "<Hex encoding without '0x' of the public key already on chain>"
            },
            "1": {
               "verifyKey": "<Hex encoding without '0x' of the public key from your newly generated key pair>"
            }
         },
         "threshold": 2
      }

   This command sends a transaction on-chain to replace the current key tied to the account with the keys
   in the ``update-keys.json`` file. The above example file adds two keys to your credential 0 of your account and
   sets the ``threshold`` (the minimum number of keys you specify to sign a transaction) to 2 for this credential.
   The above example generates a 2-out-of-2 multi-sig account where the key ``0:0 (credentialIndex : keyIndex)``
   is your old public key and the key ``0:1`` is your newly generated key.

   The above file specifies all keys that are associated with your account for a given credential after the update and
   the threshold can be set accordingly to a number between 1 and the number of keys.

.. dropdown:: Add an additional credential with at least one public-private key pair

   - Step 1: Create an additional credential.

   We recommend using the flow in the Desktop wallet to :ref:`create a credential file<create-credentials-file>`.
   Alternatively, you can `clone the project <https://github.com/Concordium/concordium-base/blob/main/rust-bins/src/bin/user_cli.rs>`_
   and run its command locally to generate a credential file.

   - Step 2: Send a transaction to add a credential to your account on-chain.

   .. code-block:: console

      $concordium-client account update-credentials --new-credentials new-credential.json --new-threshold <number-of-credential-to-sign> --sender <account-name-or-address> --grpc-port <grpc-port-of-server> --grpc-ip <grpc-ip-url-to-node>

   Using the node connection to the hosted testnet node as an example:

   .. code-block:: console

      $concordium-client account update-credentials --new-credentials new-credential.json --new-threshold <number-of-credential-to-sign> --sender <account-name-or-address> --grpc-port 20000 --grpc-ip node.testnet.concordium.com

   where ``new-credential.json`` is the file from the previous step.

   This command sends a transaction on-chain to add an additional credential to your account.
   The ``<number-of-credential-to-sign>`` specifies the minimum number of credentials that are needed to sign the
   transaction after the update.

Configure the ``concordium-client`` tool to use a multi-sig account
===================================================================

To configure the ``concordium-client`` tool to use a multi-sig account, you can either:

- pass in the signing keys via a file every time you sign a transaction (Option 1).
-  configure the ``concordium-client`` tool once to include the additional keys in its local key directory (Option 2).

To view the key directory path that the ``concordium-client`` tool is using, run the following command:

   .. code-block:: console

      $concordium-client config show

The goal is to add additional keys for your account to the local key directory of the ``concordium-client``
tool in this section (Option 2). The first option is covered in the
:ref:`following section<sign-with-keyfile>`.

.. dropdown:: Import the keys by adapting the key export file format from the browser wallet

   We recommend that you export a key file from a random account on the browser wallet and use this
   JSON file as a template to generate a corresponding JSON file for the keys of the account you want to update.

   .. note::

      You can read up on how to export a key file from the browser wallet :ref:`here<export-key>`.

   Your ``browser_wallet.export`` file should look similar to the following browser wallet export template:

   .. code-block:: json
      :force:

      {
         "type": "concordium-browser-wallet-account",
         "v": 0,
         "environment": "testnet",
         "value": {
            "accountKeys": {
               "keys": {
                  "0": {
                     "keys": {
                        "0": {
                           "signKey": "<Key_0_Private_Key_Without_0x_Prefix>",
                           "verifyKey": "<Key_0_Public_Key_Without_0x_Prefix>"
                        },
                        "1": {
                           "signKey": "<Key_1_Private_Key_Without_0x_Prefix>",
                           "verifyKey": "<Key_1_Public_Key_Without_0x_Prefix>"
                        }
                     },
                     "threshold": 2
                  }
               },
               "threshold": 1
            },
            "credentials": {
               "0": "97f325c9f86066ab0c80ff879c21629eb67818841940869308d6a72886d18f8668e62e43ad228fdcbda245d0722454df"
            },
            "address": "4jxvYasaPncfmCFCLZCvuL5cZuvR5HAQezCHZH7ZA7AGsRYpix"
         }
      }

   You can import the keys of this ``browser_wallet.export`` file and associate it to your account as follows:

   .. code-block:: console

      $concordium-client config account import browser_wallet.export --name <choose-a-name-for-your-account>

.. dropdown:: Assign an already imported key to your account

   If you already imported the new key to ``concordium-client`` but it is associated with a different account
   (e.g. because the public-private key pair was generated by creating a new account on Concordium which was imported
   to ``concordium-client`` and this key pair was re-used in your multi-sig account),
   you can look up the key in the local key directory of the ``concordium-client`` tool and associate
   the file's content to your multi-sig account.

   .. note::

      We do not recommend to re-use keys on different accounts in production.

   .. code-block:: console

      $concordium-client config account update-keys --keys new-keys.json --account <account-name-or-address>

   where ``new-keys.json`` is a file of the following format:

   .. code-block:: json
      :force:

      {
         "cidx": {
            "kidx": {
               "encryptedSignKey": {
                  "metadata": {
                     "encryptionMethod": "AES-256",
                     "iterations": ...,
                     "salt": ...,
                     "initializationVector": ...,
                     "keyDerivationMethod": "PBKDF2WithHmacSHA256"
                  },
                  "cipherText": ...
               },
               "verifyKey": ...,
               "schemeId": "Ed25519"
            },
            ...
         },
         ...
      }

   .. note::

   This command updates the keys in the key directory of your local ``concordium-client`` tool. No transaction is sent on-chain.


Create a multi-sig transaction
==============================
Add an additional signature to a multi-sig transaction
======================================================

.. _sign-with-keyfile:

Send a multi-sig transaction on-chain
=====================================


.. note::

   Additional resources:

   - `Use multi-sig accounts in the Rust SDK <https://gist.github.com/DOBEN/683fe1a7c82a0551546a7ec242d30cc0>`_

